#define yyFlexLexer CmdFlexLexer

#line 4 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler/cmdscanner.scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CScanner::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 580
#define YY_END_OF_BUFFER 581
static yyconst short int yy_accept[4510] =
    {   0,
      578,  578,  581,  579,  567,  569,  569,  578,   27,  579,
       20,   26,   28,  542,   10,   11,   23,   21,   15,   22,
       14,   18,    5,   12,  579,   25,   13,   24,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,   16,   17,   30,  542,  542,  542,  542,
       29,   19,  567,  578,  569,  571,    0,    9,  574,  542,
      576,    0,    4,    0,    5,  570,    0,  568,  573,  572,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
        1,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  185,  542,  542,  542,  542,  542,
      199,  542,   51,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      251,  542,  542,  542,  542,  542,  542,  542,    2,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  577,
      542,  575,    0,    7,    6,    3,   35,  542,  542,   84,

      542,  542,  111,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,   39,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,   45,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,    0,  542,  542,  542,  542,
      542,  542,  542,  212,  542,  542,  542,  219,  542,  542,
      542,  542,  542,  542,   52,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  229,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  262,  542,  542,
      542,  542,  542,   70,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,   72,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,   75,  333,  542,
      542,  542,  542,  310,  542,  542,  542,  542,  542,  542,
      542,  542,  542,    0,    0,    7,  542,   31,  542,  542,
        0,  542,  542,  542,  542,  542,  542,   85,  542,   86,
      542,   32,  542,   33,  542,  115,  542,  542,  542,  542,
      542,  542,   40,  542,  542,  542,  542,  542,  542,  542,

      123,  542,  542,  542,  542,  542,  542,  542,  135,  542,
      542,  542,  542,  542,  542,  141,  542,  542,  542,  542,
      149,  542,  542,   47,  542,  542,  542,  542,  542,  542,
      542,  173,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  196,  197,    0,  542,  542,  203,  206,
      542,  542,  542,    0,  542,  542,  542,  542,  220,  542,
      542,  489,  542,  542,  542,  542,  542,  542,  542,  234,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,    0,  542,  542,  542,  542,  542,  542,  542,
      231,  542,  542,  542,  542,  540,  542,    0,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  276,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  285,  542,  542,  522,  296,  542,  542,
      542,  542,  542,  542,  542,    0,  542,  542,  542,  542,
      542,  308,  542,  542,  542,  542,  437,  542,  439,  542,
      441,  542,  442,  438,  531,    0,    8,   83,  542,  542,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  112,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  122,  542,
       44,  542,  542,  542,  542,    0,  542,  533,  542,  542,
      542,    0,  542,    0,  542,  542,  537,  542,  542,  542,
      542,  542,    0,  542,  542,  542,  542,  542,   46,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  170,
        0,  542,  542,  542,  542,  476,  542,  542,  542,  542,
      432,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,    0,  542,    0,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,    0,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  491,  250,  542,  542,  495,
      542,  542,  542,  542,  325,  326,  542,  542,  542,  542,
      254,  542,  542,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,    0,    0,  542,  542,  542,
      542,  542,  542,  542,  542,  273,  542,  542,    0,  542,
      542,  542,  542,  542,  542,  284,   81,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  521,  542,  300,  302,

      542,  542,  304,  542,  542,  542,  331,  332,  542,  542,
      542,  542,  542,    0,  542,  542,  530,  311,  542,  542,
      542,  542,  542,  542,  542,  542,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,   87,  542,  542,  542,  542,  542,  542,  121,  542,
      542,  542,  542,  542,  542,  542,  542,  126,  542,  542,
      416,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,    0,  542,  542,  542,  542,  542,
      469,  144,  136,    0,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,   49,  542,  542,  542,  542,  542,  148,  542,  542,
      542,  542,  542,  542,  153,    0,  542,  542,  542,  542,
        0,  542,  171,  535,  475,  542,  477,  542,  542,  542,
      542,  542,  542,  542,  542,  184,  542,  542,  542,  542,
      542,  542,  542,  191,    0,    0,    0,    0,  542,  542,
      542,  542,    0,  542,  542,  542,  542,  542,  204,  542,

      542,  542,  542,  542,    0,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  490,  542,  542,  235,  542,  542,  542,
      237,  542,  542,  238,  542,  239,  542,  542,  241,  242,
        0,  542,  541,  542,  542,  542,  542,  542,  542,  498,
      542,  500,  542,  542,  542,  542,  542,  542,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  258,  542,  542,
      542,  542,  542,  542,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  274,  275,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  510,  542,  542,  542,  542,
        0,  542,  542,  542,  542,  542,  542,  542,   71,  536,
      542,  542,  542,  542,  542,  542,  542,  303,  523,  542,
      526,  527,  528,  542,  529,  305,    0,    0,  542,  542,
      542,  542,  542,  314,  542,  315,  316,  542,  542,  542,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  109,  413,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,    0,  542,  542,  542,  542,
      542,  542,  455,  542,  542,  542,  542,    0,  542,  542,

      415,  542,  542,  542,   78,  542,  542,  542,    0,  542,
      463,  542,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  128,  542,  542,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,    0,
      542,  542,  542,  542,  542,  542,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  474,    0,  542,  542,
        0,    0,    0,    0,    0,    0,    0,  542,  542,  542,

      542,  542,  542,  542,  430,  542,  542,    0,  542,  542,
      542,  542,  178,  179,  174,  180,  542,  542,  542,  433,
        0,  542,  542,  542,  542,  542,  434,  542,  542,    0,
        0,    0,    0,  542,  542,  542,  542,  198,  198,  201,
      483,  202,  484,  542,  542,  207,  542,  209,  211,  211,
      210,  542,  542,  542,  215,  542,  542,  542,  542,  542,
      542,  542,  542,  223,  542,  225,  542,  542,  542,  542,
      542,  542,  542,    0,  542,  542,  542,  542,  542,    0,
        0,    0,  542,  542,  542,  542,  542,  538,  542,  542,
       80,  542,  542,  497,  542,  228,  542,  542,  542,  542,

      542,    0,    0,  542,  542,  542,  542,  542,  542,   59,
      542,  542,  542,  542,  542,  264,  542,  542,    0,  260,
      542,  260,  263,  542,  542,  542,  542,  542,  542,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      279,  277,  280,  542,    0,  542,  542,  278,  542,  542,
      511,  542,   69,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,   73,  542,  542,  532,  542,  542,  542,
        0,    0,  542,  542,  542,  542,  312,  440,  443,  542,
      542,    0,   89,    0,  556,    0,    0,    0,    0,  545,

        0,  542,   89,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,    0,  542,  446,  447,  542,  449,  450,
       34,  542,  113,  412,  542,  542,    0,  542,  542,  542,
      542,  542,  542,  119,  542,  542,  542,    0,  542,  542,
      542,  542,  542,    0,  542,  542,  542,  542,    0,  542,
      414,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
        0,  542,  133,  542,  467,  468,  542,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  150,  542,  163,  542,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  172,  172,  177,  542,  542,  542,  542,  542,
      542,  542,  542,  183,  317,  318,  542,  542,  542,  542,
      542,   50,  542,    0,    0,  195,  193,  542,  542,  195,
      193,    0,  542,  205,  485,  542,  542,  542,  542,  542,

      542,  542,  542,  218,  542,  488,  222,  542,  542,  542,
      542,  542,  245,  542,  542,  542,  542,  542,  319,  320,
      247,  542,  542,  542,  542,  542,    0,    0,    0,  542,
      542,  542,  542,  542,  542,  542,  542,  539,  542,  542,
      501,  253,  502,  542,  230,    0,    0,  542,  542,  542,
      542,  542,  542,   58,  542,  542,  542,  542,  542,  267,
      542,  542,  261,  261,    0,  542,  271,  542,  542,  542,
      542,  542,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,    0,  542,   82,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,   74,
      297,  542,  299,  286,  287,  288,  289,  290,  291,  292,
      293,  294,  542,  542,  542,  542,  542,    0,  306,  542,
      306,  309,  542,  542,  542,    0,    0,   90,    0,    0,
        0,    0,  542,  542,   90,  542,  542,  542,  542,    0,
      542,  110,    0,    0,    0,    0,  542,  542,  542,  542,
      448,  542,  542,   38,  542,  542,    0,  542,  542,  542,
      542,  542,  542,  542,  542,  542,    0,  542,  542,  542,
      542,  542,    0,    0,  542,  542,   41,   42,   43,    0,
      542,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      334,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  334,  542,  542,  542,  542,  542,  542,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
        0,  542,  534,    0,  542,  542,    0,    0,    0,    0,
      424,    0,  423,  419,  420,  542,  542,  542,  542,  424,
      542,  423,  419,  420,  417,  542,  542,  542,  542,  542,
      542,  542,   48,  164,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  155,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  482,
      542,  542,  189,  542,  542,  194,    0,  194,  542,    0,
      542,  208,  542,  542,  542,  542,  542,    0,  542,  542,
      221,   55,   56,  542,   53,   54,  542,  542,  248,  542,
      542,  542,  542,  542,  240,  542,  562,  561,    0,  542,
      542,  542,  542,  542,  542,  226,  542,  542,  542,  499,
      542,    0,    0,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,    0,  542,  542,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  507,  542,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      436,  542,    0,  542,  281,   79,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  524,  542,    0,
      542,  307,  307,  542,   88,  444,    0,    0,    0,    0,
      555,    0,  542,  542,  542,  542,  542,  542,    0,    0,
      542,  542,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,   37,  542,  542,  542,    0,  542,  453,  542,
      116,  542,  542,  542,  457,  542,    0,  542,  127,  459,
      542,  542,    0,    0,  542,  542,    0,  542,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  335,    0,    0,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  335,
      542,  542,  542,  542,  542,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,    0,  542,    0,    0,    0,
        0,  542,  542,  542,  542,  542,    0,    0,    0,    0,
        0,    0,    0,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  142,  542,  542,  542,    0,    0,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
      542,  542,  429,    0,    0,  166,    0,  169,    0,    0,
        0,    0,  542,  542,  166,  542,  169,  542,  542,  542,
      542,  157,  542,  411,  542,  542,  479,  480,  542,  542,

      542,  542,  542,  542,  542,  190,    0,  542,    0,  542,
      542,  542,  542,  542,  542,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  224,  542,
      542,  236,  256,  542,  257,  542,  542,  560,  542,  542,
      542,  542,  542,  227,  542,  496,  542,    0,    0,  542,
      542,  542,  542,  503,  542,  542,  542,  542,  259,  542,
      327,  328,  542,  266,    0,    0,    0,  542,  542,  542,
      542,    0,  542,  542,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,    0,

      542,  542,  512,  513,  514,  542,  542,  542,  542,  542,
      542,  542,  295,  542,  542,    0,    0,    0,    0,  542,
      542,  542,  542,  542,  542,    0,    0,    0,  546,    0,
      542,  542,  542,  542,  542,    0,    0,    0,  542,  542,
      542,    0,  108,    0,  106,  104,  542,  108,  542,  106,
      104,  542,  542,  542,  114,  114,  542,  542,  542,  542,
      542,  120,  120,  460,  461,  542,    0,    0,  542,  542,
        0,  542,    0,  336,    0,    0,    0,    0,    0,    0,
        0,    0,  347,  542,  336,  542,  542,  542,  542,  542,
      542,  542,  542,  347,  542,  465,  542,  559,    0,    0,

        0,    0,  542,  542,  542,  542,  542,  134,  134,    0,
        0,    0,    0,  542,  542,  542,  542,  542,    0,  418,
        0,    0,    0,    0,    0,  542,  418,  542,  542,  542,
      542,  542,  542,  542,  542,  143,  542,  542,  542,  151,
        0,    0,    0,    0,  158,    0,  151,  542,  542,  542,
      542,  158,  542,    0,    0,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      481,  542,  542,  542,  542,  186,  542,    0,  542,    0,
      542,  542,  217,  214,  542,  542,    0,    0,    0,    0,
        0,    0,  542,  542,  542,  542,  542,  542,  542,  542,

      542,    0,  542,  542,  255,    0,  542,  542,  492,  542,
      252,    0,    0,  542,  542,  542,   64,   61,   62,  435,
      542,  505,  542,    0,  270,  268,  542,  270,  268,  506,
      329,  330,  542,  542,    0,    0,    0,    0,    0,    0,
      354,    0,    0,    0,    0,  348,  349,  542,  542,  542,
      542,  542,  542,  354,  542,  542,  542,  542,  348,  349,
      508,    0,  542,  542,  542,  542,  542,  518,  542,  542,
      542,  542,  525,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  542,  543,    0,    0,    0,    0,  547,  542,
      542,  542,  542,  542,  542,    0,    0,    0,  542,  542,

      542,  107,    0,  107,  542,   36,  542,  542,  454,  118,
      542,  456,  458,  542,    0,   77,  542,   77,    0,  542,
        0,  337,    0,    0,    0,    0,  344,    0,  342,  542,
      337,  542,  542,  542,  542,  344,  542,  342,  542,  542,
        0,    0,    0,  558,    0,  542,  542,  542,  542,  542,
        0,    0,    0,    0,  542,  542,  542,  542,  542,    0,
        0,    0,  421,    0,    0,  542,  542,  542,  421,  542,
      542,  472,  542,  542,  542,  542,  473,    0,  152,    0,
        0,    0,  542,  152,  542,  542,  542,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  181,  182,  431,  542,  542,    0,
      542,  200,  200,  486,  542,  487,    0,    0,    0,    0,
        0,    0,  542,  542,  542,  542,  542,  542,  216,  542,
      542,  322,  321,  249,  542,  324,  323,  493,  494,  542,
        0,  233,  542,  233,  542,   63,  542,   60,  542,  504,
      542,  269,  269,  542,  272,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,    0,  542,  509,  515,  542,
      542,  519,  520,  542,  301,    0,    0,    0,    0,  542,
      542,  542,  542,  313,  542,    0,    0,    0,    0,  542,

      542,  542,  542,    0,    0,    0,  542,  542,  542,    0,
      542,  542,  452,  542,  542,    0,  542,    0,  542,    0,
        0,    0,    0,    0,    0,  542,  542,  542,  542,  542,
      542,  464,  542,    0,    0,    0,    0,    0,  557,  542,
      542,  542,  542,  542,  542,  565,  564,    0,  563,  542,
      542,  542,  542,  542,  544,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  471,  542,  147,
        0,    0,    0,    0,  542,  542,  542,  542,    0,    0,
      162,    0,    0,  154,    0,  542,  542,  162,  542,  542,
      154,  542,  542,  176,  478,  542,  542,    0,  542,  542,

        0,    0,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  542,  542,  246,  243,  244,   67,    0,  542,
      542,  542,  542,  265,   68,  352,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  352,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,    0,  542,  516,
      542,  542,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  445,    0,    0,    0,    0,  542,
      542,  542,  542,    0,    0,    0,  542,  542,  542,  105,
      105,  542,  542,  462,    0,  542,    0,  542,  341,    0,
        0,    0,    0,    0,  341,  542,  542,  542,  542,  542,

      542,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  566,  542,  470,    0,    0,    0,    0,  139,  140,
      542,  542,  542,  542,  139,  140,  542,  542,    0,  161,
        0,    0,  542,  161,  542,  542,    0,    0,    0,    0,
      168,  542,  542,  542,  542,  168,  542,  188,  542,    0,
      542,  213,    0,    0,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,  542,  542,    0,  542,   66,  542,
      542,  353,    0,    0,    0,    0,    0,  360,  361,    0,
        0,    0,  353,  542,  542,  542,  542,  542,  360,  361,
      542,  542,  542,  282,  282,  517,  298,    0,    0,    0,

        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,    0,    0,    0,    0,  542,  542,  542,  542,    0,
        0,    0,  542,  542,  542,  542,  542,    0,  542,  125,
      125,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  542,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,    0,  137,    0,    0,    0,    0,    0,  542,
      137,  542,  542,  542,  542,  542,  542,  542,    0,    0,
      167,  542,  542,  167,    0,  165,  156,  160,  542,  165,
      156,  160,  175,  187,    0,  542,    0,    0,    0,    0,
        0,    0,    0,  394,  542,  542,  542,  542,  542,  542,

      542,  394,    0,  542,   65,  542,    0,    0,    0,    0,
      358,  359,    0,    0,    0,  542,  542,  542,  542,  358,
      359,  542,  542,  542,    0,  542,    0,    0,    0,    0,
        0,  371,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  371,  542,  542,  542,  542,  542,    0,    0,
        0,    0,  542,  542,  542,  542,    0,    0,    0,  542,
      542,  542,  542,  542,    0,  542,    0,  542,    0,    0,
        0,    0,    0,  542,  542,  542,  542,  542,  542,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  138,
        0,    0,    0,    0,  422,  138,  542,  542,  542,  542,

      422,  542,  542,    0,  159,  542,  159,    0,  542,    0,
      542,    0,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  542,  232,  232,   57,  355,    0,
      350,    0,    0,    0,    0,  355,  542,  350,  542,  542,
      542,  542,    0,  542,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,    0,    0,    0,    0,  542,  542,
      542,  542,    0,    0,  548,  542,  542,  542,  451,  117,
        0,  542,    0,  542,    0,    0,    0,    0,  340,  542,
      542,  542,  542,  340,  542,    0,    0,    0,    0,    0,

      542,  542,  542,  542,  542,    0,    0,    0,    0,  542,
      542,  542,  542,  145,  146,    0,  542,    0,  542,    0,
      542,    0,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  542,    0,  351,    0,  357,  362,
      542,  351,  542,  357,  362,    0,  542,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,    0,    0,    0,
        0,    0,  542,  542,  542,  542,  542,    0,  554,  542,
      542,    0,  542,    0,  542,    0,    0,  343,    0,  542,
      542,  343,  542,  466,    0,  129,  130,    0,    0,  542,

      129,  130,  542,  542,  427,  426,    0,  425,  427,  426,
      542,  425,    0,  542,    0,  542,    0,  542,    0,    0,
        0,    0,    0,    0,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  363,  364,    0,  363,  364,  542,
        0,  542,    0,    0,    0,    0,  378,    0,    0,    0,
        0,  367,  368,    0,    0,  372,    0,    0,  542,  542,
      542,  542,  378,  542,  542,  542,  542,  367,  368,  542,
      542,  372,  542,  542,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,    0,  542,   76,   76,    0,  542,
        0,    0,    0,    0,  542,  542,  542,  542,    0,    0,

        0,  542,  542,  542,  428,  428,    0,  542,    0,  542,
        0,  542,    0,    0,    0,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  542,    0,  542,
        0,  542,    0,    0,    0,    0,    0,  375,  373,  369,
      370,    0,    0,    0,  365,  542,  542,  542,  542,  542,
      375,  373,  369,  370,  542,  542,  542,  365,    0,    0,
        0,    0,    0,  542,  542,  542,  542,  542,    0,  542,
        0,  542,    0,  338,    0,  345,  542,  338,  542,  345,
        0,    0,    0,  542,  542,  542,    0,  542,    0,  542,
        0,  542,    0,    0,  392,    0,    0,    0,    0,    0,

      542,  542,  392,  542,  542,  542,  542,  542,    0,  542,
        0,  542,    0,    0,    0,    0,  374,    0,    0,  366,
      542,  542,  542,  542,  374,  542,  542,  366,  550,    0,
        0,    0,    0,  542,  542,  542,  542,  542,    0,  542,
        0,  542,  339,    0,  339,  542,    0,    0,    0,  542,
      542,  542,    0,  542,    0,  542,    0,  542,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  356,  356,    0,  542,
        0,    0,    0,    0,    0,    0,    0,  542,  542,  542,
      542,  542,  542,  542,    0,   98,    0,    0,  542,   98,

      542,  542,    0,  542,    0,  542,  346,  346,    0,  551,
        0,  542,  542,  542,    0,  542,    0,  542,    0,  542,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,    0,  542,    0,    0,    0,  381,  379,    0,
      377,  542,  542,  542,  381,  379,  542,  377,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,    0,  542,
        0,  542,  131,  132,  131,  132,    0,  542,  552,  542,
        0,  542,    0,    0,    0,  393,    0,    0,    0,    0,

        0,    0,  395,  542,  542,  542,  393,  542,  542,  542,
      542,  542,  542,  395,    0,  542,    0,    0,  380,  376,
      542,  542,  380,  376,    0,    0,    0,    0,    0,    0,
       96,    0,   91,    0,  542,  542,  542,  542,  542,  542,
       96,  542,   91,  542,    0,  542,    0,  542,  549,  542,
        0,  542,    0,    0,    0,  396,    0,    0,    0,    0,
        0,    0,  542,  542,  542,  396,  542,  542,  542,  542,
      542,  542,  283,  283,    0,    0,  542,  542,   93,    0,
        0,   95,   92,    0,    0,    0,    0,   93,  542,  542,
       95,   92,  542,  542,  542,  542,    0,  542,  124,  124,

      192,  192,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,    0,    0,  542,  542,   94,   97,    0,    0,
        0,    0,   94,   97,  542,  542,  542,  542,  553,  542,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
        0,    0,  542,  542,    0,    0,    0,  103,  542,  542,
      542,  103,    0,    0,    0,    0,    0,    0,    0,  408,
        0,    0,    0,  542,  542,  542,  542,  542,  542,  542,
      408,  542,  542,  542,    0,    0,  542,  542,    0,  102,

        0,  542,  102,  542,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,    0,    0,  542,  542,    0,    0,
      542,  542,    0,    0,    0,    0,    0,    0,  406,  407,
        0,    0,    0,  542,  542,  542,  542,  542,  542,  406,
      407,  542,  542,  542,    0,    0,  542,  542,    0,    0,
      542,  542,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,
        0,    0,  542,  542,  101,    0,  101,  542,    0,  400,
        0,    0,    0,    0,    0,    0,    0,  542,  400,  542,

      542,  542,  542,  542,  542,  542,    0,    0,  542,  542,
        0,    0,  542,  542,    0,    0,    0,    0,    0,  409,
      410,    0,    0,  542,  542,  542,  542,  542,  409,  410,
      542,  542,    0,    0,    0,    0,    0,    0,    0,  542,
      542,  542,  542,  542,  542,  542,    0,    0,  542,  542,
        0,    0,    0,    0,    0,    0,  397,  542,  542,  542,
      542,  542,  542,  397,    0,    0,    0,    0,    0,  390,
        0,  542,  542,  542,  542,  542,  390,  542,    0,    0,
      542,  542,    0,    0,    0,    0,  398,  399,  542,  542,
      542,  542,  398,  399,    0,    0,    0,  389,    0,    0,

      542,  542,  542,  389,  542,  542,    0,    0,  542,  542,
        0,    0,    0,    0,  542,  542,  542,  542,    0,  388,
      391,    0,  382,  383,  542,  388,  391,  542,  382,  383,
        0,  100,  542,  100,    0,    0,    0,  405,  542,  542,
      542,  405,  386,  387,  384,  385,  386,  387,  384,  385,
        0,  542,    0,  404,    0,  542,  404,  542,    0,  542,
        0,    0,  542,  542,    0,  542,    0,    0,  542,  542,
        0,  542,  403,    0,  403,  542,   99,   99,    0,    0,
      542,  542,    0,    0,  542,  542,    0,    0,  542,  542,
        0,    0,  542,  542,    0,  402,  542,  402,    0,  542,

        0,  542,    0,  542,    0,  542,  401,  401,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,    1,    1,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,    1,   62,   63,   64,    1,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,    1,   91,    1,   92,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[93] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    3,    5,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1

    } ;

static yyconst short int yy_base[4691] =
    {   0,
        0,    0,  603,13976,   91,   91,   94,   97,  569,  592,
    13976,13976,  588,    0,13976,13976,  527,13976,13976,  518,
       83,13976,   95,  501,   97,  500,13976,  499,   89,  105,
      156,  144,   80,  221,  142,  102,  151,   76,  139,  209,
      216,  151,  213,  287,  263,  350,  347,   85,  225,  220,
      264,  302,   85,13976,13976,  468,  110,  400,  394,  114,
      439,13976,  147,  264,  272,13976,  522,  517,13976,    0,
    13976,  434,  464,  474,  486,13976,  275,13976,13976,13976,
      148,  278,  165,  265,  202,  288,  264,  354,  266,  341,
      470,  269,  287,  288,  332,  343,  343,  358,  368,  376,

      470,  395,  394,  472,  485,  394,  392,  415,  481,  401,
      537,  506,  413,  490,  488,  532,  507,  497,  491,  520,
      542,  543,  544,  526,    0,  535,  543,  550,  547,  539,
      627,  556,    0,  536,  593,  607,  610,  547,  553,  613,
      606,  609,  613,  651,  699,  608,  615,  656,  613,  611,
        0,  636,  670,  687,  625,  707,  676,  628,  774,  710,
      641,  663,  757,  669,  713,  754,  772,  663,  667,  738,
      723,  771,  779,  728,  733,  785,  763,  765,  766,  787,
      802,  784,  788,  787,  790,  789,  794,  793,  825,13976,
      823,13976,  520,  140,  861,  887,    0,  810,  813,    0,

      828,  829,  916,  813,  821,  826,  829,  887,  897,  889,
      899,  891,  906,  900,  898,  909,  907,  911,  900,  907,
      911,  920,  907,  914,  909,    0,  908,  919,  941,  945,
      939,  957,  943,  948,  951,  944,  955,  966,  958,  966,
      965,  966,  981,  976,  963,  967,  971,  979, 1008,  982,
      966,  970,  984,  999,  997,  990, 1054, 1005, 1001, 1026,
     1008, 1030, 1022, 1021, 1026, 1036, 1042, 1044, 1044, 1046,
     1057, 1061, 1062, 1140, 1093, 1089, 1096,    0, 1097, 1097,
     1109, 1112, 1125, 1107,    0, 1128, 1129, 1138, 1142, 1128,
     1131, 1140, 1149, 1146, 1143, 1138, 1154, 1141, 1157, 1161,

     1180, 1179, 1146, 1147, 1151, 1152, 1219, 1184, 1171, 1186,
     1192, 1199, 1189, 1190, 1201, 1190, 1197, 1303, 1207, 1208,
     1209, 1213, 1197, 1220, 1217, 1222, 1212, 1214, 1262, 1221,
     1273, 1243, 1256, 1284,    0, 1255, 1251, 1255, 1292, 1284,
     1297, 1291, 1302, 1303, 1292, 1297, 1291, 1328, 1343, 1294,
     1307, 1314, 1301, 1313, 1316, 1324, 1328, 1347, 1347, 1356,
     1352, 1359, 1353,  515,  468,  261, 1355,    0, 1365, 1351,
     1399, 1451, 1352, 1357, 1356, 1377, 1383,    0, 1380, 1405,
     1376,    0, 1375,    0, 1401,    0, 1398, 1411, 1405, 1398,
     1421, 1428,    0, 1424, 1435, 1426, 1427, 1449, 1440, 1459,

     1445, 1459, 1537, 1460, 1455, 1452, 1464, 1629, 1721, 1468,
     1483, 1494, 1499, 1505, 1510, 1813, 1506, 1506, 1509, 1524,
        0, 1510, 1510,    0, 1525, 1530, 1525, 1525, 1533, 1529,
     1542, 1905, 1539, 1543, 1545, 1525, 1537, 1548, 1605, 1554,
     1571, 1561, 1605, 1577, 1584, 1573, 1617, 1604, 1619, 1609,
     1619, 1619, 1621, 1997,    0, 1631, 1632, 1622, 1710, 1629,
     1634, 1631, 1632, 1626, 1628, 1636, 1640, 1719,    0, 1650,
     1644,    0, 1691, 1673, 1712, 1654, 1672, 1677, 1664,    0,
     1703, 1706, 1724, 1727, 1714, 1731, 1716, 1732, 1718, 1729,
     1726, 1746, 1758, 1760, 1751, 1761, 1776, 1783, 1794, 1791,

     1793, 1802, 1790, 1800, 1790, 1812, 1794, 1804, 1804, 1806,
     2089, 1810, 1804, 1806, 1813, 1829, 1831, 1860, 1862, 1887,
     1825, 1862, 1881, 1876, 1883, 1895, 1894, 2181, 1902,    0,
     1908, 1901, 1900, 1895, 1910, 1910, 1897, 1899, 1896, 1919,
     1917, 1938, 1905, 1913, 1909, 1924, 1934,    0, 1937, 1951,
     1945, 1969, 1980, 1985, 1983, 1967, 1994, 1978, 1997, 1996,
     1989, 2273, 1997, 1997, 1991, 1998,    0, 1996, 2008, 2005,
        0, 1999, 2011,    0,    0,  458,13976,    0, 1993, 2006,
     2003, 2018, 2005, 2072, 2018, 2037, 2027, 2026, 2047, 2061,
     2076, 2064, 2082, 2075, 2075, 2070, 2068, 2090, 2097, 2095,

     2083,    0, 2089, 2169, 2159, 2159, 2100, 2086, 2100, 2094,
     2140, 2129, 2176, 2119, 2136, 2163, 2171, 2183,    0, 2173,
      442, 2181, 2185, 2183, 2188, 2331, 2383,    0, 2191, 2180,
     2195, 2228, 2273, 2182, 2184, 2262, 2191, 2195, 2231, 2253,
      396, 2252, 2435, 2490, 2252, 2254, 2269, 2262,    0, 2277,
     2277, 2279, 2284, 2277, 2268, 2267, 2277, 2274, 2295, 2579,
     2287, 2303, 2307, 2310, 2330,    0, 2315, 2333, 2329, 2343,
        0, 2342, 2341, 2327, 2350, 2331, 2342, 2344, 2356, 2345,
     2357, 2370, 2382, 2381, 2393, 2395, 2401, 2448, 2393, 2400,
     2388, 2408, 2412, 2439, 2432, 2439, 2428, 2442, 2433, 2443,

     2448, 2448, 2443, 2457, 2452, 2466, 2491, 2494, 2475, 2495,
     2486, 2502, 2493, 2499, 2492, 2495, 2503, 2515, 2515, 2547,
     2550, 2562, 2553, 2550, 2546, 2552, 2564, 2558, 2575, 2576,
     2577, 2567, 2567, 2583, 2584, 2671,    0, 2570, 2586, 2572,
     2574, 2591, 2577, 2591,13976,13976, 2623, 2624, 2610, 2615,
     2661, 2613, 2625, 2654, 2671, 2672, 2678, 2692, 2685, 2635,
     2660, 2672, 2665, 2681, 2708, 2690, 2678, 2707, 2692, 2705,
     2709, 2716, 2718, 2713, 2711,    0, 2731, 2731, 2766, 2821,
     2719, 2727, 2728, 2732, 2738, 2910, 2764, 2736, 2735, 2752,
     2740, 2739, 2760, 2778, 2777, 2779,    0, 2791,    0,    0,

     2792, 2779,  389, 2802, 2797, 2793,13976,13976, 2814, 2807,
     2818, 2810, 2828, 2833, 2836, 2829,    0, 2850, 2858, 2868,
     2883, 2882, 2892, 2894, 2879, 2887, 2893, 2901, 2887, 2899,
     2897, 2893, 2894, 2908, 2900, 2906, 2910, 2917, 2903, 2910,
     2908, 2905, 2906, 2924, 2917, 2924, 2922, 2940, 2938, 2952,
     2952, 2955, 2942, 2941, 2959, 2960, 2960, 2958, 2956, 2953,
     2955, 3038, 2971, 2989, 2993, 2974, 2987, 3013, 3130, 3007,
     3020, 3024, 3020, 3035,  384,  379,  343, 3222, 3020, 3028,
        0, 3036, 3039, 3045, 3026, 3034, 3034, 3041, 3038, 3042,
     3045, 3098, 3059, 3113, 3068, 3077, 3077, 3084, 3101, 3101,

     3105, 3119, 3106, 3107, 3118, 3119, 3117, 3127, 3133, 3124,
     3125, 3123, 3133, 3138, 3139, 3143, 3138, 3147, 3138, 3145,
     3174,    0,    0, 3164, 3179, 3171, 3190, 3204, 3202, 3190,
     3191, 3202, 3222, 3203, 3215, 3220, 3217, 3206, 3208, 3210,
     3210,    0, 3228, 3229, 3220, 3216, 3233,    0, 3227, 3227,
     3222, 3240, 3225, 3227, 3316, 3372, 3422, 3268, 3261, 3261,
     3262, 3266,    0,    0,    0, 3279, 3303, 3288, 3298, 3303,
     3291, 3291, 3306, 3304, 3315, 3314, 3313, 3318, 3323, 3306,
     3322, 3322, 3308,    0, 3328, 3323, 3309, 3332, 3340, 3334,
     3337, 3360, 3353, 3354, 3356, 3373, 3354, 3359,    0, 3368,

     3363, 3369, 3363, 3366, 3368, 3370, 3372, 3388, 3383, 3400,
     3382, 3390, 3398, 3412, 3415, 3433, 3423, 3425, 3423, 3421,
     3422, 3433, 3438,    0, 3432,  340,    0, 3429, 3443, 3460,
      336, 3435,  319,    0, 3431,    0, 3434, 3448,    0,    0,
     3483, 3484, 3483, 3443, 3453, 3466, 3469, 3484, 3485,    0,
     3485,    0, 3490, 3494, 3498, 3496, 3501, 3486, 3487, 3493,
     3489, 3496, 3526, 3498, 3493, 3520, 3502,    0, 3506, 3539,
     3544, 3528, 3533, 3544, 3547, 3549, 3552, 3552, 3541, 3543,
     3565, 3551, 3560, 3547,    0,    0, 3562, 3545, 3547, 3561,
     3559, 3551, 3564, 3554, 3565, 3595, 3582, 3587, 3601, 3598,

     3590, 3601, 3591, 3594, 3607,    0, 3610, 3603, 3594, 3605,
     3615, 3616, 3618, 3609, 3616, 3622, 3626, 3610,    0, 3670,
     3625, 3627, 3627, 3629, 3642, 3644, 3651,    0,    0, 3662,
        0,    0,    0, 3647,    0,    0, 3667, 3647, 3672, 3652,
     3659, 3673, 3674,    0, 3676,    0,    0, 3677, 3678, 3683,
     3672, 3676, 3674, 3679, 3679, 3693, 3700, 3717, 3720, 3711,
     3714, 3717, 3715, 3718, 3718, 3725, 3714, 3728, 3731, 3722,
     3734, 3727, 3803,    0, 3718, 3757, 3779, 3775, 3769, 3777,
     3773, 3788, 3789, 3780, 3780, 3793, 3794, 3800, 3808, 3804,
     3801, 3800,    0, 3803, 3810, 3798, 3813, 3795, 3796, 3796,

        0, 3807, 3813, 3831, 3904,  305,  301,  286, 3852, 3856,
        0, 3859, 3847, 3846, 3861, 3856, 3854, 3880, 3870,    0,
     3900, 3868, 3892, 3895, 3890, 3889, 3904, 3900, 3898, 3913,
     3895, 3996, 3911, 3895, 3918, 3910, 3911, 3906, 3906, 3906,
     3910, 3920, 3910, 3938, 3932, 3955, 3973, 3964, 3973, 3980,
     3981, 3983, 3988, 3972, 3986, 3988, 3989, 3986, 3994, 3979,
     3990, 4001, 3992, 4001, 4002, 3999, 3996, 4004, 3989, 4001,
     4019, 4013, 4028, 4037, 4030, 4026, 4028, 4042, 4042, 4048,
     4043, 4046, 4050, 4056, 4040, 4054,    0, 4088, 4139, 4037,
     4050, 4058, 4059, 4060, 4070, 4070, 4068, 4089, 4074, 4075,

     4084, 4101, 4106, 4100, 4097, 4118, 4104, 4108, 4111, 4113,
     4123, 4139, 4146,    0,    0, 4128, 4146, 4148, 4150,    0,
     4142, 4151, 4153, 4160, 4157, 4161,    0, 4160, 4174, 4179,
     4184, 4183, 4169, 4190, 4200, 4198, 4182,13976,    0, 4267,
        0,    0,    0, 4201, 4194,    0, 4216,    0,13976,    0,
        0, 4200, 4205, 4208, 4211, 4208, 4225, 4248, 4252, 4237,
     4243, 4254, 4265,    0, 4257, 4263, 4268, 4267, 4269, 4267,
     4263, 4269, 4254, 4256, 4275, 4265, 4260, 4277, 4273, 4284,
     4268, 4281, 4293, 4292, 4312, 4313, 4325,    0, 4315, 4325,
        0, 4327, 4311,    0, 4307,    0, 4330, 4311, 4316, 4317,

     4313, 4319, 4321, 4321, 4323, 4341, 4325, 4337, 4329, 4392,
     4353, 4364, 4364, 4378, 4371,    0, 4368, 4392, 4383,13976,
     4384,    0, 4476, 4377, 4382, 4383, 4386, 4380, 4395, 4384,
     4384, 4404, 4391, 4406, 4404, 4394, 4409, 4408, 4430, 4435,
     4440, 4461, 4449, 4468, 4461, 4451, 4466, 4465, 4467, 4458,
        0,    0,    0, 4460, 4461, 4462, 4475,    0, 4469, 4468,
        0, 4464,    0, 4477, 4469, 4487, 4480, 4476, 4473, 4497,
     4501, 4508, 4502, 4517, 4566, 4532,    0, 4523, 4534, 4515,
     4538, 4538, 4541, 4541, 4533, 4529,    0,    0,    0, 4547,
     4542, 4531,13976, 4557,13976, 4543, 4555, 4557, 4561,13976,

     4577, 4562,    0, 4578,    0, 4564, 4576, 4577, 4575,    0,
     4585, 4652, 4586, 4639, 4652,    0,    0, 4576,    0,    0,
     4624, 4586,    0,    0, 4606, 4635, 4633, 4634, 4627, 4643,
     4643, 4653, 4654,    0, 4643, 4647, 4645, 4655, 4656, 4662,
     4660, 4677, 4666, 4696, 4698, 4685, 4686, 4687, 4686, 4687,
        0, 4696, 4706, 4706, 4701, 4713, 4697, 4701, 4714, 4716,
     4716, 4717, 4705, 4703, 4715, 4725, 4722, 4717, 4737, 4721,
     4724, 4737, 4754, 4755, 4756, 4744, 4742, 4743, 4760, 4751,
     4753, 4757, 4770, 4754, 4760, 4762, 4763, 4775, 4759, 4765,
     4762, 4763,    0, 4765,    0, 4847, 4772, 4811, 4830, 4828,

     4815, 4823, 4821, 4832, 4826, 4827, 4827, 4840, 4837, 4829,
     4837, 4835, 4846, 4840, 4841, 4835, 4848, 4838, 4854, 4858,
     4846, 4857, 4872,    0, 4859,    0, 4866, 4890, 4878, 4876,
     4886, 4884, 4872, 4893, 4898, 4885, 4883, 4893, 4894, 4883,
     4904, 4894, 4893, 4894, 4894, 4895, 4904, 4896, 4909, 4918,
     4908, 4904, 4915, 4915, 4915, 4925, 4923, 4942, 4952, 4942,
     4948, 4942,13976,    0, 4941, 4938, 4941, 4959, 4956, 4957,
     4957, 4948, 4955,    0,13976,13976, 4949, 4951, 4963, 4961,
     4957,    0, 4976, 4967, 4965,13976,13976, 4969, 4968,    0,
        0, 4973, 4974,    0,    0, 4977, 4981, 5003, 5007, 5008,

     5009, 5078, 4999,    0, 5028,    0,    0, 5031, 5018, 5032,
     5034, 5019,    0, 5039, 5027, 5040, 5045, 5055,13976,13976,
        0, 5053, 5063, 5065, 5066, 5057, 5079, 5072, 5073, 5083,
     5076, 5076, 5071, 5073, 5083, 5088, 5081, 5091, 5078, 5093,
        0,    0,    0, 5094,    0, 5099, 5099, 5103, 5105, 5110,
     5123, 5119, 5129, 5178, 5135, 5137, 5131, 5135, 5145,  294,
     5141, 5131,13976,    0, 5180, 5181,    0, 5134, 5139, 5154,
     5155, 5156,    0, 5174, 5161, 5170, 5189, 5189,    0, 5187,
     5194, 5198, 5199, 5264, 5202, 5188, 5197, 5216, 5215, 5356,
     5241, 5249, 5253, 5254, 5251, 5248, 5249, 5250,    0, 5260,

     5261, 5248, 5254, 5254, 5267, 5265, 5249, 5272, 5262,    0,
        0, 5256,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5264, 5262, 5265, 5260, 5448, 5269,13976, 5271,
        0,    0, 5284, 5300, 5309, 5290, 5298,13976, 5297, 5305,
     5314, 5324, 5315, 5324,    0, 5330, 5338, 5352, 5349, 5356,
     5357,    0, 5360, 5339, 5359, 5361, 5364, 5344, 5363, 5420,
        0, 5354, 5362,    0, 5361, 5371, 5356, 5357, 5357, 5383,
     5405, 5425, 5433, 5431, 5417, 5431, 5426, 5429, 5425, 5436,
     5430, 5449, 5431, 5444, 5433, 5447,    0,    0,    0, 5448,
     5449, 5438, 5457, 5447,    0, 5442, 5459, 5465, 5471, 5463,

    13976, 5467, 5483, 5482, 5475, 5494, 5484, 5562, 5481, 5505,
     5511, 5515, 5504,    0, 5502, 5510, 5509, 5511, 5542, 5552,
     5553, 5552, 5543, 5555, 5562, 5563, 5562, 5548, 5560, 5567,
     5566, 5567,    0, 5572, 5605, 5570, 5555, 5570, 5565, 5572,
    13976, 5560,13976, 5568, 5599, 5595, 5609, 5603, 5615,    0,
     5602,    0, 5611, 5612,    0, 5627, 5620, 5628, 5619, 5628,
     5631, 5620,    0,    0, 5634, 5620, 5624, 5620, 5633, 5627,
     5636, 5646, 5632, 5637, 5646, 5662, 5658, 5663, 5671, 5663,
     5669, 5663, 5664, 5673, 5667, 5683, 5670, 5674, 5676, 5679,
     5672, 5673, 5682, 5676, 5693, 5680, 5684,    0, 5696, 5697,

     5685, 5689, 5696, 5690, 5700, 5722, 5722, 5712, 5726,    0,
     5720, 5718,    0, 5721, 5730,13976, 5737,    0, 5738, 5737,
     5738,    0, 5736, 5746, 5745, 5733, 5733, 5782, 5786, 5735,
        0,    0,    0, 5740,    0,    0, 5760, 5750,    0, 5749,
     5765, 5771, 5786, 5776,    0, 5779,13976,13976, 5792,    0,
        0, 5798, 5784, 5809, 5787,    0, 5788, 5785, 5804,    0,
     5800, 5815, 5822, 5826, 5829, 5820, 5840, 5840, 5841, 5834,
     5836, 5838, 5846, 5847, 5830, 5837, 5852, 5860, 5840, 5859,
     5864, 5843, 5862, 5854,  291, 5845,    0, 5851, 5872, 5868,
        0, 5858,    0, 5875, 5872,    0, 5874, 5878, 5880, 5901,

     5902, 5971, 5892, 6063, 5902, 5909, 6155, 5912, 5916, 5917,
        0, 5910, 5928, 5929,    0, 5915, 5943, 5959, 5949, 5957,
     5967, 5968, 5954, 5975, 5970, 5965, 5958,    0, 5975, 6046,
     6048,13976,    0, 5976,    0, 5962, 5967, 5968,    0, 5980,
    13976, 5966, 5971, 5972, 6247, 5984,    0, 5970, 5977, 5986,
     6035, 6018, 6037, 6047, 6043, 6033, 6044, 6062, 6063, 6059,
     6051, 6060,    0, 6061, 6066, 6067, 6058, 6063,    0, 6084,
        0, 6090, 6096, 6098,    0, 6109, 6110, 6111,    0,  258,
     6112, 6103, 6126, 6130, 6143, 6137, 6153, 6154, 6151, 6148,
     6157, 6157, 6147,    0, 6146, 6157, 6143,13976, 6153, 6163,

     6162, 6159, 6168, 6168, 6158, 6339, 6157, 6168, 6154,    0,
     6164, 6176, 6184, 6203, 6198, 6219, 6213, 6225, 6222, 6227,
     6232, 6220, 6232, 6229, 6239, 6229, 6230, 6238, 6234, 6245,
     6246, 6243, 6239, 6250, 6250, 6240, 6237, 6258, 6266, 6269,
     6268, 6292, 6293, 6272, 6293, 6298, 6301, 6311, 6320, 6326,
     6319, 6314, 6333, 6328,    0, 6326, 6333, 6334, 6333, 6331,
     6333, 6328, 6345, 6345, 6336, 6341, 6340, 6341, 6336, 6353,
     6353, 6346,    0, 6357, 6345,13976, 6360,13976, 6371, 6378,
     6378, 6387, 6388, 6374,    0, 6389,    0, 6395, 6396, 6391,
     6400,    0, 6386,    0, 6396, 6406,    0,    0, 6403, 6396,

     6405, 6398, 6411, 6394, 6406,    0, 6411, 6412, 6405, 6408,
     6407, 6405, 6422, 6408, 6424, 6427, 6425, 6434, 6429, 6433,
     6453, 6449, 6442, 6446, 6441, 6443, 6463, 6460,    0, 6458,
     6459,  234,    0, 6449,    0, 6461, 6466,13976,    0,  232,
     6468, 6469, 6455,    0, 6467,    0, 6462, 6467, 6469, 6471,
     6473, 6466, 6467,    0, 6485, 6491, 6498, 6494,    0, 6504,
    13976,13976, 6493,    0, 6511, 6514, 6499, 6518, 6518, 6502,
     6520, 6503, 6516, 6524, 6529, 6513, 6521, 6519, 6531, 6520,
     6517, 6523, 6541, 6518, 6541, 6542, 6548, 6538, 6552, 6554,
     6566, 6557, 6554, 6563, 6579, 6558, 6577, 6579, 6560, 6567,

     6568, 6584,    0,    0,    0, 6576, 6590, 6574, 6589, 6591,
     6591, 6594,    0, 6584, 6581, 6593, 6584, 6585, 6606, 6600,
     6595, 6602, 6628, 6627, 6624, 6629, 6617, 6641,13976, 6615,
     6636, 6622, 6649,    0, 6619, 6627, 6629, 6637, 6633, 6634,
     6642, 6644,13976, 6650,13976,13976, 6647,    0, 6655,    0,
        0, 6660, 6650, 6666,13976,    0, 6656, 6663, 6685, 6670,
     6673,13976,    0,    0,    0, 6693, 6692, 6695, 6695, 6697,
     6683, 6684, 6698,13976, 6702, 6703, 6704, 6691, 6692, 6697,
     6700, 6700,13976, 6709,    0, 6712, 6713, 6716, 6703, 6706,
     6711, 6713, 6714,    0, 6731,    0, 6734,    0, 6733, 6735,

     6748, 6734, 6818, 6749, 6757, 6769, 6755,13976,    0, 6760,
     6772, 6777, 6768, 6766, 6804, 6809, 6800, 6810, 6804,13976,
     6816, 6811, 6805, 6815, 6816, 6810,    0, 6822, 6817, 6811,
     6821, 6822, 6827, 6813, 6831,    0, 6831, 6817, 6824,13976,
     6833, 6821, 6833, 6839,13976, 6845,    0, 6864, 6850, 6864,
     6872,    0, 6876, 6862, 6861, 6869, 6863, 6864, 6871, 6877,
     6869, 6868, 6876, 6870, 6871, 6878, 6884, 6875, 6876, 6889,
        0, 6892, 6880, 6896, 6881,    0, 6890, 6904, 6905, 6903,
     6924, 6926,    0,    0, 6924, 6917, 6921, 6925, 6918, 6929,
     6942, 6941, 6927, 6931, 6924, 6935, 6948, 6947, 6947, 6938,

     6933, 6930, 6951, 6937,    0, 6937, 6954, 6944,    0, 6946,
        0,    0, 6961, 7030, 6984, 6981, 7045, 7055,    0,    0,
     6989,    0, 7016, 7011,13976,13976, 7013,    0,    0,    0,
    13976,13976, 7006, 7033, 7053, 7045,    0, 7055,    0, 7047,
    13976, 7044, 7044, 7051, 7052,13976,13976, 7065, 7054, 7139,
     7064, 7231, 7056,    0, 7053, 7053, 7059, 7063,    0,    0,
        0, 7107, 7114, 7105, 7119, 7123, 7127,    0, 7125, 7110,
     7116, 7112,    0, 7115, 7121, 7126, 7129, 7124, 7130, 7130,
     7133, 7127, 7135,13976, 7130, 7141, 7133, 7134,13976,    0,
     7135, 7156, 7167, 7169,    0, 7174, 7177, 7175, 7177, 7180,

     7178,13976, 7186,    0, 7200,    0, 7223, 7214,    0,    0,
     7207,    0,    0, 7215, 7229,13976, 7230,    0, 7227, 7228,
     7227,13976, 7234, 7223, 7226, 7234,13976,    0,13976, 7232,
        0, 7239, 7228, 7231, 7239,    0, 7323,    0, 7229, 7234,
     7300, 7230, 7238,13976, 7228, 7302, 7233, 7243,    0, 7261,
     7288, 7293, 7292, 7307, 7301, 7297, 7299, 7319, 7313, 7323,
      156, 7324, 7311, 7312, 7313, 7329,  150, 7330, 7316, 7318,
     7326,    0, 7340, 7342, 7335, 7347,    0, 7351,13976, 7357,
     7351, 7363, 7355,    0, 7361, 7355, 7368, 7362, 7373, 7379,
     7376, 7377, 7372, 7368, 7373, 7382, 7387, 7384, 7385, 7380,

     7376, 7389, 7386, 7404,    0,    0,    0, 7391, 7407, 7399,
     7406,13976,    0,    0, 7408,    0, 7419, 7409, 7417, 7416,
     7419, 7431, 7498, 7416, 7431, 7436, 7440, 7452,    0, 7449,
     7433,13976,13976,    0, 7462,13976,13976,    0,    0, 7469,
     7486,13976, 7487,    0, 7479, 7542, 7484, 7553, 7504,    0,
     7545,13976,    0, 7530,    0, 7540, 7538, 7549, 7551, 7556,
     7540,    0, 7540, 7542, 7557, 7553, 7551, 7562, 7561, 7566,
     7550, 7636, 7550, 7552, 7569, 7598, 7605,    0,    0, 7618,
     7619,    0,    0, 7610,    0, 7615, 7610, 7617, 7617, 7728,
     7613, 7820, 7619,    0, 7626, 7629, 7620, 7624, 7631, 7633,

     7624, 7629, 7636, 7641, 7627, 7645, 7644, 7631, 7659, 7662,
     7664, 7670,    0, 7682, 7683, 7670, 7671, 7675, 7676, 7700,
     7717, 7704, 7728, 7711, 7711, 7727, 7728, 7715, 7735, 7718,
     7719,    0, 7738, 7723, 7736, 7742, 7725,    0,13976, 7727,
     7740, 7746, 7729, 7912,    0,13976,13976, 7744,13976,    0,
        0, 7745,    0, 7746,13976, 7791,    0, 7745, 7758, 7772,
        0, 7793, 8004, 7798, 7783, 7784, 7796,    0, 7807,    0,
     7799, 7816, 7813, 7803, 7808, 7820, 7817, 7808, 7808, 7818,
    13976, 7819, 7820,13976, 7810, 7822, 7833,    0, 7853, 7855,
        0, 7844, 7851,    0,    0, 7866, 7867, 7865, 7866, 7869,

     7896, 7899, 7904,    0,    0, 7909, 7909, 7908, 7909, 7914,
     8096, 8188, 7914, 7916,    0,    0,    0,    0, 7913, 7914,
     7919, 7912, 7917,    0,    0,13976, 7907, 7919, 7910, 7930,
     7914,    0, 7910, 7937, 7960, 7960,    0, 7947, 7972, 7969,
     7989, 7973, 8280, 7970, 7991, 7995, 7993, 7991, 7992,    0,
     8003, 8004, 8002, 8005,    0, 8008, 8052,    0, 8006, 8009,
     8372, 8013, 8080, 8464,    0,    0, 7999, 8002, 8011, 8556,
     8032, 8034, 8043, 8065, 8067, 8081, 8073, 8077, 8089,13976,
        0, 8098, 8091,    0,    0, 8648, 8088, 8090,13976, 8091,
     8097, 8089, 8088, 8100,    0, 8096, 8102, 8096, 8095, 8109,

     8104, 8107, 8136, 8143, 8139, 8130, 8136, 8159, 8171, 8167,
     8158,13976,    0,    0, 8158, 8166, 8190, 8170,13976,13976,
     8168, 8174, 8191, 8180,    0,    0, 8190, 8189, 8178,13976,
     8187, 8176, 8181,    0, 8190, 8189, 8215, 8233, 8234, 8237,
    13976, 8224, 8252, 8261, 8262,    0, 8250,    0, 8247, 8261,
     8262,    0, 8276, 8269, 8275, 8282, 8282,    0, 8274, 8284,
     8277, 8283, 8292, 8289, 8740, 8281, 8276, 8280,    0, 8297,
     8290,13976, 8287, 8321, 8327, 8316, 8310,13976,13976, 8346,
     8357, 8340,    0, 8343, 8358, 8363, 8352, 8349,    0,    0,
     8372, 8375, 8358,    0, 8832,    0,    0, 8373, 8367, 8451,

     8380, 8359, 8370, 8384, 8379, 8372, 8452, 8386, 8368, 8381,
     8416, 8373, 8393, 8412,    0, 8419, 8445, 8437, 8924, 8439,
     8450, 8447, 8452, 8460, 8450, 8454, 8454, 8454, 8455,    0,
     9016, 8475, 8460, 8471, 8477, 8477, 8507, 8494, 8503, 8506,
     8504, 8517, 8498, 8514, 8539,    0, 8538, 8529, 8532, 8554,
     9108, 8550, 8547,13976, 8547, 8543, 8554, 8555, 8560, 8554,
        0, 8554, 8550, 8561, 8561, 8566, 8568, 8555, 8556, 8572,
    13976, 8559, 8574,    0, 8574,13976,13976,13976, 8594,    0,
        0,    0,    0,    0,    0, 9200, 8586, 8594,    0, 8596,
     8607, 8626, 8629,13976, 8617, 8622, 9292, 8624, 8624, 8635,

     8643,    0, 8630, 8631,    0, 8647, 8633, 8634, 8645, 8643,
    13976,13976, 8647, 8647, 8655, 8641, 8642, 8652, 8652,    0,
        0, 8659, 8659, 8669, 8674, 8677, 8678, 8683, 8701, 8680,
     8712,13976, 8723, 8726, 8715, 8733, 8712, 8721, 8726, 8742,
     8721, 8740,    0, 8743, 8744, 8733, 8749, 8728, 8747, 8750,
     8750, 8748, 8752, 8755, 8755, 8755, 8742, 8753, 8761, 8769,
     8778, 8769, 8791, 8789, 8809, 8810, 8802, 8803, 8821, 8807,
     8819, 8820, 8830, 8831, 8817, 8824, 8826, 8836, 8824, 8829,
     8839, 8840, 8824, 8829, 8836, 8846, 8849, 8833, 8840,13976,
     8862, 8877, 8882, 8873,13976,    0, 8871, 8896, 8909, 8898,

        0, 8890, 8895, 8910,13976, 8911,    0,    0, 9384, 8905,
     8906, 8919,    0, 8922, 8908, 8921, 8931, 8915, 8926, 9476,
     8929, 8915, 8928, 8937, 8921,13976,    0,    0,13976,    0,
    13976, 8922,    0, 8938, 8926,    0, 9568,    0, 8927, 9660,
     8945, 8950, 8966, 8967, 8970,    0, 8976, 8989, 8981, 8992,
        0,    0, 9003, 9003, 9002, 9752, 9008, 9013, 8997, 9008,
     9844, 9936, 9017, 9017, 9010, 9009, 9013, 9008, 9015, 9013,
     9017, 9012, 9015, 9033,13976, 9020, 9037,    0,    0,    0,
     9049, 9053, 9059, 9062,   89, 9062, 9070, 9090,13976,   66,
     9086, 9083, 9095,    0, 9098, 9099, 9089, 9098, 9106, 9107,

     9109, 9094, 9104, 9112, 9113, 9107, 9103, 9102, 9117, 9111,
     9109, 9108, 9125,    0,    0,    0,10028, 9109, 9112, 9146,
     9150, 9150, 9178, 9145, 9163, 9184, 9176, 9182, 9185, 9187,
     9184, 9189, 9201, 9191, 9197, 9184,13976, 9206,13976,13976,
     9187,    0, 9209,    0,    0, 9196, 9197, 9209, 9279, 9208,
        0,    0,    0, 9228, 9244, 9215,    0, 9245, 9292, 9267,
    10120,10212,10304, 9271, 9336, 9268,10396, 9271, 9275, 9295,
     9296, 9287, 9288, 9283, 9302, 9305, 9298, 9306,13976, 9310,
        0, 9336, 9340, 9328, 9352, 9364, 9359,13976, 9369, 9365,
     9365,    0, 9382,    0, 9376,13976,13976, 9377, 9371, 9380,

        0,    0, 9381, 9375,13976,13976, 9390,13976,    0,    0,
     9391,    0, 9375, 9376, 9394, 9396, 9384, 9387, 9386, 9405,
     9409, 9424, 9431, 9417, 9431, 9436, 9433, 9457, 9444, 9457,
     9467, 9451, 9470, 9475,13976,13976, 9470,    0,    0, 9471,
     9476, 9477, 9464, 9484, 9463, 9482,13976,    0, 9464, 9465,
     9466,13976,13976, 9492, 9471,13976,    0, 9473, 9478, 9498,
     9479, 9517,    0,10488, 9501, 9502, 9506,    0,    0, 9544,
     9531,    0,10580, 9533, 9552, 9554, 9540, 9560, 9548, 9564,
     9566, 9550, 9570, 9553,    0,10672,13976,    0, 9571, 9572,
     9557, 9563, 9576, 9557, 9561, 9567, 9581, 9562, 9585, 9576,

     9586, 9609, 9602, 9610,13976,    0, 9614, 9617, 9611, 9625,
     9641, 9645,    0, 9642, 9641, 9652, 9656, 9653, 9658, 9644,
    10764, 9656, 9653, 9665, 9664, 9661, 9666, 9652, 9654, 9655,
     9656, 9658,    0, 9675, 9675, 9661, 9659,13976,13976,13976,
    13976, 9683, 9702, 9686,13976,10856, 9708, 9710, 9694, 9705,
        0,    0,    0,    0, 9735, 9735, 9718,    0, 9737, 9728,
     9742, 9738, 9740, 9749, 9738, 9752, 9743, 9746, 9739, 9740,
     9744, 9745, 9753,13976, 9761,13976, 9755,    0, 9765,    0,
     9749, 9768, 9760, 9756, 9792, 9787, 9791, 9794, 9792, 9806,
     9811, 9812, 9838, 9827,13976, 9815,    0, 9823, 9845, 9838,

     9847, 9842,    0, 9830,10948, 9837, 9852, 9846, 9836, 9837,
     9851, 9854, 9889, 9852,    0,    0,13976, 9859,    0,13976,
     9921, 9883,11040,11132,    0, 9884,11224,    0,13976,    0,
     9887, 9891, 9919,    0,11316, 9915, 9908, 9927, 9932, 9933,
     9931, 9932,13976, 9917,    0, 9918, 9939, 9939, 9934, 9942,
     9942, 9937, 9935, 9936, 9948, 9949, 9948, 9951, 9953, 9964,
     9969, 9980, 9981,10007, 9977, 9991,10000,10007,10001,10005,
    10021,10021,10026,10017,10020,10021,13976,    0,10022,10023,
    10030,10022,    0,10018,10019,    0,10023,10039,10032,11408,
    10030,10050,11500,10052,11558,13976,10074,10070,11613,    0,

    10078,10085,10095,10096,10095,10096,13976,    0,10102,13976,
    10111,10109,    0,10118,10117,10118,10119,10120,10113,10114,
    10112,10116,10123,10113,10119,10117,10130,10138,    0,10133,
    10129,10128,10153,10161,10151,10159,10157,10183,10195,11702,
    10190,10188,10191,10194,10189,10198,10190,13976,13976,10191,
    13976,10198,10202,10194,    0,    0,10196,    0,10217,10221,
    10208,10201,10204,10219,10212,10229,10213,10229,10231,10237,
    10247,10240,10245,10259,10265,10287,10272,10286,10279,10280,
    10286,10287,13976,13976,    0,    0,10299,10300,13976,    0,
    10295,10296,10291,10289,10296,13976,10299,10299,10309,10313,

    10297,10306,    0,10304,10302,10310,    0,10313,10315,10344,
    10351,10335,10345,11794,10355,10369,10364,10362,13976,13976,
    10368,10366,    0,    0,10386,10388,10374,10394,10387,10382,
    13976,10398,    0,10380,10400,10402,10383,10403,10396,10391,
        0,10407,11886,10389,10408,10409,10414,10415,13976,    0,
    10418,10438,10441,10433,    0,    0,10429,10432,10462,10466,
        0,10455,10473,10465,11978,12070,10461,10464,10486,10482,
    12162,10471,13976,    0,10487,10479,10489,10482,13976,10486,
    10484,13976,13976,10494,10497,10494,10497,    0,10492,10492,
        0,    0,10502,10507,10504,10509,10528,10532,13976,    0,

    13976,    0,10536,10538,10536,10537,10552,10562,10565,10553,
    10554,10567,10578,10578,10576,10564,10571,10581,10583,10571,
    10570,10583,10589,10589,10591,10591,13976,13976,10579,10594,
    10584,10591,    0,    0,10587,10621,10612,10619,13976,    0,
    10619,10647,10631,10650,10658,10643,10654,10662,10665,10656,
    10660,10664,10659,10670,10676,10661,10671,10679,10677,10668,
    10672,10672,10676,10676,10690,10706,10707,13976,10715,10713,
    10711,    0,10705,10736,10745,10736,10736,10746,    0,13976,
    10740,10747,10761,10745,10763,10764,10755,10754,10761,12254,
        0,10755,10757,10771,10755,10773,10757,10777,10768,13976,

    10764,10771,    0,10766,10785,10788,10811,10797,10814,10828,
    10818,10837,10841,10828,10845,10829,10854,10837,10854,10855,
    10837,10856,10860,10847,10862,10865,10864,10867,10859,10860,
    10866,10865,10864,10897,10890,10892,10888,10888,13976,13976,
    10896,10906,10926,10920,10934,10927,10929,10930,10928,    0,
        0,10936,10933,10945,10936,10941,10939,10943,10955,10956,
    10957,10958,    0,10951,10943,10962,10959,10965,10959,10966,
    10979,12346,10986,10977,10998,10995,11012,11014,11019,11015,
        0,11009,12438,11012,13976,11023,    0,12530,11021,13976,
    11037,11031,11029,11033,11044,11034,11038,11033,    0,11046,

    11040,11039,11043,11055,11047,11051,11120,11061,11134,11081,
    11070,11114,11075,11122,11101,11117,11105,11132,11131,13976,
    13976,11132,11141,11138,11149,11140,11173,11169,    0,    0,
    11170,11179,11180,11185,11172,11178,11189,11199,11200,11215,
    11224,11211,11204,11207,11213,11212,11224,11211,11226,11213,
    11218,11234,    0,11216,11235,11237,13976,11224,11240,12622,
    11222,11242,11243,    0,11246,11267,11252,11274,11267,13976,
        0,11289,11299,11280,11300,11294,    0,12714,11289,11305,
    11293,11312,11313,11316,11313,11316,13976,13976,11317,11321,
    11318,11321,    0,    0,    0,11316,11314,13976,    0,11305,

    12806,11320,11321,    0,12898,11314,11337,11350,11359,11354,
    11348,11365,11353,11373,11376,11393,11381,11390,11385,13976,
    13976,11387,13976,13976,11389,    0,    0,11392,    0,    0,
    11384,13976,11399,    0,11411,11408,11406,13976,11414,11411,
    11409,    0,13976,13976,13976,13976,    0,    0,    0,    0,
    11418,11419,11415,13976,11410,11419,    0,11437,11444,11447,
    11451,11463,11472,11472,11475,11478,11487,11490,11491,11497,
    11498,11499,13976,11492,    0,12990,13976,    0,11485,11503,
    11486,11506,11501,11488,11504,11491,11497,11513,11501,11517,
    11532,11532,11541,11535,11531,13976,11532,    0,11546,11547,

    11546,11548,11553,11554,11564,11565,13976,    0,13976,13082,
    13084,13089,  110,13094,13097,13100,13105,13110,13115,13120,
    13125,13130,13135,13140,13145,13150,13155,13160,13165,13170,
    13175,13180,13185,13190,13195,13200,13205,13210,13215,13220,
    13225,13230,13235,13240,13245,13250,13255,13260,13265,13270,
    13275,13280,13285,13290,13295,13300,13305,13310,13315,13320,
    13325,13330,13335,13340,13345,13350,13355,13360,13365,13370,
    13375,13380,13385,13390,13395,13400,13405,13410,13415,13420,
    13425,13430,13435,13440,13445,13450,13455,13460,13465,13470,
    13475,13480,13485,13490,13495,13500,13505,13510,13515,13520,

    13525,13530,13535,13540,13545,13550,13555,13560,13565,13570,
    13575,13580,13585,13590,13595,13600,13605,13610,13615,13620,
    13625,13630,13635,13640,13645,13650,13655,13660,13665,13670,
    13675,13680,13685,13690,13695,13700,13705,13710,13715,13720,
    13725,13730,13735,13740,13745,13750,13755,13760,13765,13770,
    13775,13780,13785,13790,13795,13800,13805,13810,13815,13820,
    13825,13830,13835,13840,13845,13850,13855,13860,13865,13870,
    13875,13880,13885,13890,13895,13900,13905,13910,13915,13920,
    13925,13930,13935,13940,13945,13950,13955,13960,13965,13970
    } ;

static yyconst short int yy_def[4691] =
    {   0,
     4509,    1, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4510,
     4509, 4509, 4509, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4512, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509,   34, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4510, 4513, 4509, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4512, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4514, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4509, 4515, 4516, 4509, 4509, 4511, 4511, 4511, 4511,

     4511, 4511, 4517, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4518, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4519, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4520, 4515, 4516, 4511, 4511, 4511, 4511,
     4509, 4511,  372,  372,  372, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4521, 4511, 4511, 4511, 4511, 4522, 4523, 4511,
     4511, 4511, 4511, 4511, 4511, 4524, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4525, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4526, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4527, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4528, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4529, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4520, 4509, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4509, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4511,  644,  644, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4530,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4531, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4532, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4533, 4511, 4511, 4511, 4511, 4511, 4511, 4534, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4535, 4511, 4511,
     4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4536, 4509, 4511,  957,  957,  957,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4537, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,

     4511, 4511, 4511, 4511, 4538, 4511, 4511, 4511, 4509, 4511,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4539,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4540, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 1289,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4509, 4511, 4541,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4511, 4511, 4542, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4543, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4509, 4511,
     4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4511, 4511, 4511, 4544, 4511, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4545, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4511, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4546, 4509, 4509, 4509, 4509, 4509, 4547, 4509,
     4509, 4509, 4509, 4548, 4511, 4511, 4511, 4511, 4511, 4549,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4550, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4509, 4509, 4509, 4551, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4552, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4511, 4509, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4511, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4553, 4509, 4554, 4509, 4509, 4555, 4509, 4509, 4509, 4511,

     4511, 4556, 4511, 4557, 4511, 4511, 4558, 4511, 4511, 4511,
     4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4509, 4511, 4511, 4511, 4511, 4509, 4509, 4559, 4509,
     4509, 4509, 4511, 4511, 4560, 4511, 4511, 4511, 4509, 4509,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4511, 4511, 4509, 4511, 4509, 4509,
     4509, 4509, 4509, 4561, 4509, 4509, 4509, 4509, 4509, 4509,

     4511, 4511, 4511, 4511, 4511, 4562, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511,
     4511, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511,
     4509, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4563, 4509, 4509,

     4509, 4509, 4564, 4511, 4511, 4511, 4511, 4509, 4511, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4509, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4565, 4509, 4566, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4567, 4509, 4568, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4569,
     4511, 4570, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511,

     4511, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4509, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4571, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4572, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4509, 4511, 4511, 4511, 4511, 4573, 4509, 4509, 4509,
     4509, 4509, 4574, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4509, 4511, 4511, 4509, 4509, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4509, 4575, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4576, 4511, 4511, 4511, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4577, 4509, 4578, 4509, 4579,
     4511, 4580, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511,

     4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511, 4509,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4509, 4509, 4509, 4509, 4581, 4509, 4511,
     4511, 4511, 4511, 4582, 4511, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4583, 4509, 4509, 4509,
     4511, 4511, 4584, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511,

     4509, 4509, 4509, 4585, 4586, 4509, 4509, 4511, 4511, 4511,
     4587, 4588, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4509, 4589, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4590, 4511, 4511, 4511, 4511, 4509, 4511, 4511,
     4511, 4511, 4509, 4509, 4591, 4509, 4509, 4592, 4511, 4511,
     4593, 4511, 4511, 4594, 4511, 4595, 4509, 4509, 4509, 4596,
     4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511, 4509,
     4511, 4511, 4511, 4511, 4597, 4598, 4509, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4509, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4599, 4509, 4511,
     4511, 4511, 4511, 4511, 4600, 4511, 4509, 4511, 4511, 4511,
     4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4601, 4602, 4511, 4511, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4509, 4509, 4509, 4603, 4511, 4511, 4511, 4604, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4605,
     4606, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4607, 4509, 4511, 4511, 4511,
     4608, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4609, 4610, 4509, 4509, 4611, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4612, 4511, 4511, 4511,

     4511, 4511, 4509, 4511, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509,
     4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4509, 4509, 4511, 4511, 4613, 4614, 4509,
     4511, 4509, 4615, 4509, 4509, 4509, 4509, 4509, 4511, 4616,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4511, 4509, 4617,
     4509, 4509, 4618, 4509, 4509, 4511, 4619, 4511, 4511, 4620,
     4511, 4511, 4509, 4511, 4509, 4621, 4509, 4509, 4509, 4509,
     4622, 4623, 4509, 4509, 4511, 4624, 4511, 4511, 4511, 4511,
     4625, 4626, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511,
     4509, 4511, 4509, 4511, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,

     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4627, 4628, 4509, 4511, 4509,
     4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4509, 4509,
     4629, 4630, 4631, 4509, 4509, 4509, 4632, 4511, 4511, 4511,
     4633, 4634, 4635, 4511, 4511, 4511, 4636, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511,
     4511, 4509, 4511, 4509, 4511, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4511,

     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4509, 4511, 4509, 4511, 4509, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4511, 4511, 4511,
     4509, 4511, 4509, 4509, 4509, 4509, 4509, 4637, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4638, 4509, 4511, 4511,
     4511, 4511, 4511, 4639, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4640, 4511, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4641, 4642, 4509, 4511, 4509, 4511,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4509, 4509,

     4509, 4511, 4511, 4511, 4509, 4511, 4509, 4511, 4509, 4511,
     4509, 4511, 4643, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4644, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4509, 4511, 4645, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4646, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4509, 4509, 4509, 4511, 4511, 4511, 4509, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4509, 4509, 4647, 4509, 4509, 4509,

     4511, 4511, 4511, 4511, 4648, 4511, 4511, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4649, 4650, 4509, 4509, 4651, 4509,
     4511, 4511, 4652, 4653, 4511, 4511, 4654, 4511, 4509, 4655,
     4509, 4509, 4509, 4511, 4656, 4511, 4511, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4511, 4511, 4509, 4509, 4509, 4511,
     4511, 4511, 4509, 4511, 4509, 4511, 4509, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511,
     4509, 4509, 4657, 4509, 4509, 4658, 4509, 4511, 4511, 4659,
     4511, 4511, 4660, 4511, 4509, 4509, 4509, 4509, 4511, 4511,

     4511, 4511, 4509, 4511, 4509, 4511, 4509, 4511, 4509, 4509,
     4509, 4511, 4511, 4511, 4509, 4511, 4509, 4511, 4509, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4661, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4662,
     4511, 4511, 4509, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4511, 4511, 4509, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4663, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4664, 4509, 4511, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4665, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4666, 4511, 4509, 4511, 4509, 4511, 4509, 4511,
     4509, 4511, 4509, 4509, 4667, 4668, 4509, 4509, 4509, 4509,
     4669, 4509, 4511, 4511, 4670, 4671, 4511, 4511, 4511, 4511,
     4672, 4511, 4509, 4511, 4509, 4509, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511, 4509, 4511,

     4509, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4511, 4511, 4509, 4509, 4509, 4509,
     4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4509, 4511,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4673, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4674,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4509, 4509,

     4509, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4509, 4509,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511, 4509, 4509,
     4511, 4511, 4675, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4676, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4677, 4509, 4678, 4511, 4509, 4679, 4511, 4680, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4509, 4509, 4511, 4511,
     4509, 4509, 4681, 4509, 4509, 4509, 4509, 4511, 4511, 4682,
     4511, 4511, 4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509,
     4683, 4511, 4511, 4511, 4511, 4511, 4511, 4684, 4509, 4509,
     4511, 4511, 4509, 4509, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4511, 4511, 4685, 4509, 4509, 4509, 4686, 4509,

     4687, 4511, 4511, 4511, 4688, 4511, 4509, 4509, 4511, 4511,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4509, 4509,
     4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511,
     4511, 4511, 4509, 4509, 4509, 4509, 4511, 4511, 4511, 4511,
     4509, 4511, 4509, 4509, 4509, 4511, 4511, 4511, 4509, 4511,
     4509, 4509, 4511, 4511, 4509, 4511, 4509, 4509, 4511, 4511,
     4509, 4511, 4509, 4689, 4511, 4690, 4509, 4511, 4509, 4509,
     4511, 4511, 4509, 4509, 4511, 4511, 4509, 4509, 4511, 4511,
     4509, 4509, 4511, 4511, 4509, 4509, 4511, 4511, 4509, 4511,

     4509, 4511, 4509, 4511, 4509, 4511, 4509, 4511,    0, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509
    } ;

static yyconst short int yy_nxt[14069] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       14,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   14,   29,   30,   31,   32,   33,   57,
       35,   36,   58,   38,   39,   59,   41,   42,   60,   44,
       14,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       61,   62,   63,   65,   65,   64,   65,   65,   64,   78,

       78,   64,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   74,  194,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   81,   82,   83,  109,   84, 3590,
      129,   85,  176,  189,   86,   87,   88,  110,   89,   93,
      123,   90,   91,   92,  124,   94,  364,   95,   63,   70,
      365,   64, 3586,  142,   81,   82,   83,  109,   84,   96,
      129,   85,  176,  189,   86,   87,   88,  110,   89,   93,
      123,   90,   91,   92,  124,   94,  118,   95,  104,   70,
      119,  130,  105,  142,  120,  139,  106,  131,  125,   96,
       97,  126,  107,  121,   98,  108,  122,   99,  127,  140,

      197,  100,  200,  128,  101,  141,  118,  102,  104,  103,
      119,  130,  105, 2962,  120,  139,  106,  131,  125, 2956,
       97,  126,  107,  121,   98,  108,  122,   99,  127,  140,
      197,  100,  200,  128,  101,  141, 2606,  102, 2602,  103,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      135,  132,  142,  203,  180,  112,  133,  134,  136,  177,
      113,  143,  181,  178,  137,   64,  114,  364,   64,  115,
      138,  365,  116,  179,   65,   65,  117,   78,   78, 2464,
      135,  132,  142,  203,  180,  112,  133,  134,  136,  177,
      113,  143,  181,  178,  137, 2372,  114,  155, 2075,  115,

      138,  156,  116,  179,  201, 1548,  117,  144,  145,  146,
      147,  157,  182,  206,  198,  209,  183,  158,  202,  184,
     1547,  148,  214,  215, 1546,  149,  199,  155,  150,  151,
      204,  156,  152,  205,  201,  153,  185,  216,  154, 1376,
     1374,  157,  182,  206,  198,  209,  183,  158,  202,  184,
      186,  148,  214,  215,  187,  149,  199,  188,  150,  151,
      204, 1369,  152,  205, 1208,  153,  185,  216,  154,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  217,
      186,  170,  218,  210,  187,  171,  160,  188,  161,  172,
      219,  162,  163,  211,  207,  164,  208,  165,  173,  166,

      220,  174,  221,  167,  168,  175, 1207, 1206,  169,  217,
     1128,  170,  218,  210,  222,  171,  160,  922,  161,  172,
      219,  162,  163,  211,  207,  164,  208,  165,  173,  166,
      220,  174,  221,  167,  168,  175,  132,  125,  169,  113,
      126,  133,  191,  227,  222,  228,  234,  127,  235,  236,
      239,  242,  128,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  875,  577,  876,  132,  125,  877,  113,
      126,  133,  191,  227,  364,  228,  234,  127,  235,  236,
      239,  242,  128,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,   74,  212,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  223,  224,  225,  229,  237,
      231,  577,  226,  213,  232,  230,  364,  193,   68,  192,
      190,   80,   79,   76,  212,   72,  238,  233,  243,  244,
       71,  247,  240,  248,  249,  223,  224,  225,  229,  237,
      231,  241,  226,  213,  232,  230,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  238,  233,  243,  244,
      245,  247,  240,  248,  249,  250,  251,  253,  254,  257,
      246,  241,  258,  259,  265,  261,  255,  263,  270,  256,
      252,  262,  278,  264,  268,  269,  260,   69,   68,  279,

      245,   66, 4509, 4509, 4509,  250,  251,  253,  254,  257,
      246, 4509,  258,  259,  265,  261,  255,  263,  270,  256,
      252,  262,  278,  264,  268,  269,  260,  266,  266,  279,
      266,  266,  266,  266,  266,  266,  266,  271,  266,  266,
      266,  266,  266,  266,  274,  266,  272,  276,  284,  280,
      273,  282,  283,  285,  275,  299,  266,  266,  266,  266,
      266, 4509,  300, 4509,  304,  277,  281,  271, 4509,  305,
      306, 4509,  312, 4509,  274,  318,  272,  276,  284,  280,
      273,  282,  283,  285,  275,  299,  321,  266,  266,  266,
      286,  287,  300,  288,  304,  277,  281,  322,  289,  305,

      306,  301,  312,  290, 4509,  318, 4509,  302, 4509, 4509,
      303,  326,  333, 4509, 4509, 4509,  321,  266,  266,  334,
      286,  287,  307,  288,  316,  309,  308,  322,  289,  310,
      317,  301, 4509,  290,  291,  311,  292,  302,  293,  294,
      303,  326,  333,  313,  295,  296,  297,  327,  319,  334,
      328,  298,  307,  314,  316,  309,  308,  337, 4509,  310,
      317,  320,  315, 4509,  291,  311,  292, 4509,  293,  294,
     4509, 4509, 4509,  313,  295,  296,  297,  327,  319,  342,
      328,  298,  343,  314, 4509,  335, 4509,  337,  329,  336,
     4509,  320,  315,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  323,  324,  330,  331,  338,  347,  342,
      349,  350,  343,  340,  348,  335,  325,  339,  329,  336,
      332,  341,  344,  355,  356,  357,  358,  345,  359,  346,
      360,  361,  351,  323,  324,  330,  331,  338,  347,  353,
      349,  350,  352,  340,  348, 4509,  325,  339,  367,  354,
      332,  341,  344,  355,  356,  357,  358,  345,  359,  346,
      360,  361,  351,  285,  362,  368,  369,  370,  376,  353,
      377,  378,  352,  363,  379,  270, 4509, 4509,  367,  354,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
     4509, 4509, 4509,  285,  362,  368,  369,  370,  376, 4509,

      377,  378, 4509,  363,  379,  270,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  371,  371, 4509,  371,
      371,  371,  371,  371,  371,  371, 4509,  371,  371,  371,
      371,  371,  371,  380,  371,  381,  382,  383,  384, 4509,
      385,  387,  388,  389,  390,  371,  371,  371,  371,  371,
      391,  392,  393,  394,  396,  397,  373,  386,  395,  374,
      398,  399,  400,  380,  401,  381,  382,  383,  384,  375,
      385,  387,  388,  389,  390,  402,  371,  371,  371,  403,
      391,  392,  393,  394,  396,  397,  373,  386,  395,  374,
      398,  399,  400,  404,  401,  405,  406,  407,  408,  375,

      409,  410,  411,  413,  414,  402,  371,  371,  415,  403,
      416,  417,  420,  421,  422,  418,  423,  425,  412, 4509,
      428,  429,  424,  404,  430,  405,  406,  407,  408,  419,
      409,  410,  411,  413,  414,  431,  432,  433,  415,  434,
      416,  417,  420,  421,  422,  418,  423,  425,  412,  426,
      428,  429,  424,  446,  430,  447,  450,  427, 4509,  419,
     4509, 4509,  453, 4509,  448,  431,  432,  433,  451,  434,
      454,  455, 4509, 4509,  456,  449, 4509, 4509,  452,  426,
      457,  458,  459,  446,  460,  447,  450,  427,  435,  436,
      437,  438,  453,  439,  448,  461,  440,  462,  451,  463,

      454,  455,  441,  442,  456,  449,  443,  444,  452,  445,
      457,  458,  459, 4509,  460, 4509, 4509, 4509,  435,  436,
      437,  438, 4509,  439, 4509,  461,  440,  462, 4509,  463,
      466,  467,  441,  442,  468,  469,  443,  444,  470,  445,
      464,  464, 4509,  464,  464,  464,  464,  464,  464,  464,
      471,  464,  464,  464,  464,  464,  464,  472,  464,  477,
      466,  467,  478,  473,  468,  469,  474,  479,  470,  464,
      464,  464,  464,  464,  475,  480,  481,  482,  476,  484,
      471,  483,  485,  486,  487,  488,  489,  472,  490,  477,
      491,  493,  478,  473,  492,  494,  474,  479,  499,  500,

      464,  464,  464,  501,  475,  480,  481,  482,  476,  484,
      502,  483,  485,  486,  487,  488,  489,  497,  490,  495,
      491,  493,  508,  503,  492,  494,  509,  496,  499,  500,
      464,  464,  498,  501,  510,  511,  512,  513,  514,  515,
      502, 4509, 4509,  516,  517,  521,  522,  497,  523,  495,
      524,  525,  508,  504,  526,  528,  509,  496,  505,  529,
      527,  530,  498,  531,  510,  511,  512,  513,  514,  515,
      534,  506,  507,  516,  517,  521,  522, 4509,  523, 4509,
      524,  525, 4509,  504,  526,  528, 4509, 4509,  505,  529,
      527,  530,  537,  531,  538,  541, 4509,  542,  532,  543,

      534,  506,  507,  518,  518, 4509,  518,  518,  518,  518,
      518,  518,  518,  533,  518,  518,  518,  518,  518,  518,
      535,  518,  537,  539,  538,  541,  536,  542,  532,  543,
      544,  545,  518,  518,  518,  518,  518,  546,  547,  540,
      548,  549,  550,  533,  551,  552,  520,  556,  561, 4509,
      535,  562,  563,  539,  564,  567,  536,  565,  568, 4509,
      544,  545,  553,  518,  518,  518,  566,  546,  547,  540,
      548,  549,  550,  569,  551,  552,  520,  557,  561,  554,
      555,  562,  563,  570,  564,  567,  571,  565,  568,  558,
      572,  559,  553,  518,  518,  560,  566,  573,  574,  575,

      578,  579,  580,  569, 4509, 4509,  599,  557, 4509,  554,
      555,  600, 4509,  570,  601,  602,  571,  603,  604,  558,
      572,  559, 4509,  607, 4509,  560,  608,  573,  574,  575,
      578,  579,  580,  581,  582,  583,  599,  609,  584,  585,
      586,  600,  587,  605,  601,  602,  610,  603,  604,  611,
      612,  613,  588,  607,  589, 4509,  608, 4509,  606,  614,
     4509, 4509, 4509,  581,  582,  583,  615,  609,  584,  585,
      586,  616,  587,  605, 4509,  617,  610,  618,  619,  611,
      612,  613,  588,  620,  589,  590,  591,  592,  606,  614,
      593,  594,  595,  621,  596,  622,  615,  623,  624,  625,

      628,  616,  629,  630,  597,  617,  598,  618,  619,  631,
     4509, 4509, 4509,  620, 4509,  590,  591,  592, 4509, 4509,
      593,  594,  595,  621,  596,  622,  637,  623,  624,  625,
      628,  638,  629,  630,  597,  639,  598,  626,  626,  631,
      626,  626,  626,  626,  626,  626,  626,  640,  626,  626,
      626,  626,  626,  626,  641,  626,  637,  642,  647,  648,
      649,  638,  650,  651,  652,  639,  626,  626,  626,  626,
      626,  653,  655,  656,  657,  658,  659,  640,  654,  660,
      663,  664,  665,  666,  641,  667,  668,  642,  647,  648,
      649,  671,  650,  651,  652,  674, 4509,  626,  626,  626,

     4509,  653,  655,  656,  657,  658,  659, 4509,  654,  660,
      663,  664,  665,  666, 4509,  667,  668, 4509,  672,  677,
     4509,  671,  678, 4509,  679,  674,  673,  626,  626,  632,
      632, 4509,  632,  632,  632,  632,  632,  632,  632,  669,
      632,  632,  632,  632,  632,  632,  675,  632,  672,  677,
      670,  680,  678,  676,  679,  681,  673,  682,  632,  632,
      632,  632,  632,  683,  684,  685,  686,  689,  690,  669,
      691,  697,  698,  695,  699,  700,  675,  701,  702,  703,
      670,  680,  696,  676,  710,  681,  711,  682,  718,  632,
      632,  632, 4509,  683,  684,  685,  686,  689,  690, 4509,

      691,  697,  698,  695,  699,  700, 4509,  701,  702,  703,
      719,  714,  696,  720,  710,  715,  711,  721,  718,  632,
      632,  634,  634, 4509,  634,  634,  634,  634,  634,  634,
      634, 4509,  634,  634,  634,  634,  634,  634,  712,  634,
      719,  714, 4509,  720,  692,  715,  716,  721,  713,  722,
      634,  634,  634,  634,  634,  704,  693,  723,  724,  705,
      706,  636,  694,  717,  725,  707,  726,  727,  712,  728,
      708,  729,  709,  730,  692,  731,  716,  732,  713,  722,
      733,  634,  634,  634, 4509,  704,  693,  723,  724,  705,
      706,  636,  694,  717,  725,  707,  726,  727, 4509,  728,

      708,  729,  709,  730,  734,  731,  735,  732,  736,  737,
      733,  634,  634,  643,  643, 4509,  643,  643,  643,  643,
      643,  643,  643,  738,  643,  643,  643,  643,  643,  643,
      739,  643,  740,  741,  734,  742,  735,  747,  736,  737,
      743,  748,  643,  643,  643,  643,  643,  745,  746,  645,
      749,  646,  750,  738,  744,  751,  752,  753,  760,  761,
      739,  762,  740,  741,  763,  742,  764,  747,  765, 4509,
      743,  748,  771,  643,  643,  643, 4509,  745,  746,  645,
      749,  646,  750, 4509,  744,  751,  752,  753,  760,  761,
     4509,  762, 4509, 4509,  763,  766,  764,  768,  765,  767,

      772,  769,  771,  643,  643,  661,  661, 4509,  661,  661,
      661,  661,  661,  661,  661,  773,  661,  661,  661,  661,
      661,  661,  768,  661,  775,  766,  769,  768,  776,  767,
      772,  769,  777,  774,  661,  661,  661,  661,  661,  778,
      781,  770,  782,  783,  784,  773,  785,  786,  787,  788,
      789,  790,  768,  791,  775,  792,  769,  795,  776,  796,
     4509,  797,  777,  774,  798,  661,  661,  661, 4509,  778,
      781,  770,  782,  783,  784, 4509,  785,  786,  787,  788,
      789,  790, 4509,  791,  793,  792,  799,  795,  800,  796,
      794,  797,  801,  802,  798,  661,  661,  687,  687, 4509,

      687,  687,  687,  687,  687,  687,  687,  803,  687,  687,
      687,  687,  687,  687,  793,  687,  799,  804,  800,  805,
      794,  806,  801,  802,  807,  808,  687,  687,  687,  687,
      687,  809,  810,  811,  812,  813,  816,  803,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  804,  826,  805,
      827,  806,  828,  829,  807,  808,  832,  687,  687,  687,
     4509,  809,  810,  811,  812,  813,  816, 4509,  817,  818,
      819,  820,  821,  822,  823,  824,  825, 4509,  826,  833,
      827,  834,  828,  829,  835,  836,  832,  687,  687,  754,
      754, 4509,  754,  754,  754,  754,  754,  754,  754, 4509,

      754,  754,  754,  754,  754,  754,  830,  754,  837,  833,
      838,  834,  839,  842,  835,  836,  840,  843,  754,  754,
      754,  754,  754,  831,  844,  756,  845,  757,  846,  758,
      759,  847,  850,  841,  851,  848,  830,  860,  837,  861,
      838,  849,  839,  842,  862,  863,  840,  843, 4509,  754,
      754,  754, 4509,  831,  844,  756,  845,  757,  846,  758,
      759,  847,  850,  841,  851,  848, 4509,  860,  866,  861,
      869,  849,  870, 4509,  862,  863, 4509,  864,  865,  754,
      754,  779,  779, 4509,  779,  779,  779,  779,  779,  779,
      779, 4509,  779,  779,  779,  779,  779,  779,  866,  779,

      869,  858,  870,  852,  856,  871,  853,  864,  865,  872,
      779,  779,  779,  779,  779,  854,  857,  859,  867,  873,
      874,  855,  878,  879,  868,  880,  881,  902,  903,  904,
      915,  858,  916,  852,  856,  871,  853, 4509,  918,  872,
      919,  779,  779,  779, 4509,  854,  857,  859,  867,  873,
      874,  855,  878,  879,  868,  880,  881,  902,  903,  904,
      915, 4509,  916,  905,  906,  920, 4509,  907,  918,  908,
      919,  779,  779,  814,  814, 4509,  814,  814,  814,  814,
      814,  814,  814,  909,  814,  814,  814,  814,  814,  814,
      921,  814,  923,  905,  906,  920,  917,  907, 4509,  908,

      940,  941,  814,  814,  814,  814,  814,  942,  910,  911,
      916,  943,  912,  909,  913,  947,  944,  948,  949,  950,
      921,  951,  923,  952,  945,  953,  917,  954,  914,  946,
      940,  941,  955,  814,  814,  814,  961,  942,  910,  911,
      916,  943,  912, 4509,  913,  947,  944,  948,  949,  950,
     4509,  951,  962,  952,  945,  953, 4509,  954,  914,  946,
      963,  964,  955,  814,  814,  882,  961,  965,  883,  966,
      884,  885,  967,  886,  968,  887,  888,  969,  970,  971,
      889,  972,  962,  890,  973,  974,  891, 4509,  975,  976,
      963,  964, 4509, 4509,  977,  882,  978,  965,  883,  966,

      884,  885,  967,  886,  968,  887,  888,  969,  970,  971,
      889,  972,  979,  890,  973,  974,  891,  892,  975,  976,
      893,  980,  894,  895,  977,  896,  978,  897,  898,  981,
      982,  983,  899,  984,  993,  900,  985,  986,  901, 4509,
      987,  994,  979, 4509,  995,  996,  997,  892,  988, 4509,
      893,  980,  894,  895, 4509,  896, 4509,  897,  898,  981,
      982,  983,  899,  984,  993,  900,  985,  986,  901,  924,
      987,  994,  925,  926,  995,  996,  997,  998,  988,  927,
      999, 1000, 1001,  989,  990, 1004,  928,  991,  929, 1002,
     1003, 1005,  930,  931, 4509,  992, 1006, 4509, 4509,  924,

     1007, 1008,  925,  926, 4509, 1009, 1010,  998, 1011,  927,
      999, 1000, 1001,  989,  990, 1004,  928,  991,  929, 1002,
     1003, 1005,  930,  931,  932,  992, 1006,  933,  934, 1012,
     1007, 1008, 1013, 1014,  935, 1009, 1010, 1015, 1011, 1016,
     1017,  936, 1018,  937, 1019, 1020, 1021,  938,  939, 4509,
     4509, 1022, 4509, 4509,  932, 4509, 4509,  933,  934, 1012,
     4509, 4509, 1013, 1014,  935, 4509, 1023, 1015, 1024, 1016,
     1017,  936, 1018,  937, 1019, 1020, 1021,  938,  939,  956,
      956, 1022,  956,  956,  956,  956,  956,  956,  956, 1025,
      956,  956,  956,  956,  956,  956, 1023,  956, 1024, 1026,

     1027, 4509, 1028, 1029, 1030, 1031, 1032, 1033,  956,  956,
      956,  956,  956, 1034, 1035, 1036, 1037,  958,  959, 1025,
     1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1026,
     1027,  960, 1028, 1029, 1030, 1031, 1032, 1033, 1049,  956,
      956,  956, 4509, 1034, 1035, 1036, 1037,  958,  959, 4509,
     1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 4509,
     1050,  960, 1051, 1052, 1053, 4509, 1057, 1058, 1049,  956,
      956, 1041, 1041, 4509, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1068, 1041, 1041, 1041, 1041, 1041, 1041, 1059, 1041,
     1050, 1060, 1051, 1052, 1053, 1054, 1057, 1058, 1069, 4509,

     1041, 1041, 1041, 1041, 1041, 1061, 1063, 1055, 1062, 1062,
     1070, 1068, 1061, 1056, 1065, 1062, 4509, 1071, 1059, 1061,
     1064, 1060, 1062, 1072, 1075, 1054, 1061, 1067, 1069, 1062,
     4509, 1041, 1041, 1041, 1076, 1061, 1063, 1055, 1062, 1062,
     1070, 1077, 1061, 1056, 1065, 1062, 1066, 1071, 1078, 1061,
     1064, 1079, 1062, 1072, 1075, 1073, 1061, 1067, 1080, 1062,
     1074, 1041, 1041, 1081, 1076, 1082, 1083, 1084, 1085, 1086,
     4509, 1077, 1105, 4509, 1106, 1107, 1066, 4509, 1078, 1108,
     1110, 1079, 4509, 1116, 1117, 1073, 1118, 4509, 1080, 1109,
     1074, 1119, 1120, 1081, 4509, 1082, 1083, 1084, 1085, 1086,

     1087, 1113, 1105, 1088, 1106, 1107, 1089, 1090, 1121, 1108,
     1110, 1114, 1091, 1116, 1117, 1092, 1118, 1115, 1093, 1109,
     1122, 1119, 1120, 1094, 1095, 4509, 1123, 1124, 4509, 1125,
     1087, 1113, 4509, 1088, 1126, 1127, 1089, 1090, 1121, 1129,
     4509, 1114, 1091, 4509, 1130, 1092, 1131, 1115, 1093, 4509,
     1122, 1132, 1133, 1094, 1095, 1096, 1123, 1124, 1097, 1125,
     1134, 1098, 1099, 1135, 1126, 1127, 1136, 1100, 1137, 1129,
     1101, 1139, 1138, 1102, 1130, 1140, 1131, 1141, 1103, 1104,
     4509, 1132, 1133, 4509, 4509, 1096, 4509, 4509, 1097, 4509,
     1134, 1098, 1099, 1135, 4509, 4509, 1136, 1100, 1137, 1142,

     1101, 1139, 1138, 1102, 1143, 1140, 1144, 1141, 1103, 1104,
     1111, 1111, 4509, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1145, 1111, 1111, 1111, 1111, 1111, 1111, 1146, 1111, 1142,
     1147, 1148, 1149, 1150, 1143, 1151, 1144, 1152, 1153, 1111,
     1111, 1111, 1111, 1111, 1154, 1155, 1156, 1157, 1158, 1159,
     1145, 1160, 1161, 1162, 1163, 1164, 1165, 1146, 1166, 1167,
     1147, 1148, 1149, 1150, 1168, 1151, 1169, 1152, 1153, 1170,
     1111, 1111, 1111, 1171, 1154, 1155, 1156, 1157, 1158, 1159,
     1172, 1160, 1161, 1162, 1163, 1164, 1165, 1173, 1166, 1167,
     1174, 1175, 1176, 1177, 1168, 1178, 1169, 1179, 1180, 1170,

     1111, 1111, 1181, 1171, 1182, 1183, 1184, 1185, 4509, 4509,
     1172, 4509, 4509, 4509, 4509, 4509, 4509, 1173, 1190, 4509,
     1174, 1175, 1176, 1177, 4509, 1178, 4509, 1179, 1180, 1191,
     1192, 1193, 1181, 1194, 1182, 1183, 1184, 1185, 1186, 1186,
     4509, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1190, 1186,
     1186, 1186, 1186, 1186, 1186, 1200, 1186, 1201, 1202, 1191,
     1192, 1193, 1195, 1194, 1196, 1204, 1197, 1186, 1186, 1186,
     1186, 1186, 1205, 1211, 1212, 1188, 1203, 1215, 1213, 1216,
     1218, 1219, 1220, 1221, 1189, 1200, 1222, 1201, 1202, 1214,
     1217, 1223, 1195, 1224, 1196, 1204, 1197, 1227, 1186, 1186,

     1186, 4509, 1205, 1211, 1212, 1188, 1203, 1215, 1213, 1216,
     1218, 1219, 1220, 1221, 1189, 4509, 1222, 4509, 4509, 1214,
     1217, 1223, 1230, 1224, 1231, 1232, 1233, 1227, 1186, 1186,
     1198, 1198, 4509, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1225, 1198, 1198, 1198, 1198, 1198, 1198, 1228, 1198, 1234,
     1235, 1226, 1230, 1236, 1231, 1232, 1233, 1237, 1229, 1198,
     1198, 1198, 1198, 1198, 1238, 1239, 1240, 1241, 1242, 1243,
     1225, 1244, 1245, 1246, 1247, 1248, 1249, 1228, 1250, 1234,
     1235, 1226, 1251, 1236, 1252, 1253, 1254, 1237, 1229, 1255,
     1198, 1198, 1198, 4509, 1238, 1239, 1240, 1241, 1242, 1243,

     4509, 1244, 1245, 1246, 1247, 1248, 1249, 4509, 1250, 1256,
     4509, 1257, 1251, 1258, 1252, 1253, 1254, 1259, 1260, 1255,
     1198, 1198, 1209, 1209, 4509, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1261, 1209, 1209, 1209, 1209, 1209, 1209, 1256,
     1209, 1257, 1262, 1258, 1263, 1264, 1265, 1259, 1260, 1266,
     1269, 1209, 1209, 1209, 1209, 1209, 1267, 1270, 1271, 1272,
     1268, 1273, 1261, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1262, 1283, 1263, 1264, 1265, 1284, 1285, 1266,
     1269, 1286, 1209, 1209, 1209, 1287, 1267, 1270, 1271, 1272,
     1268, 1273, 4509, 1274, 1275, 1276, 1277, 1278, 1279, 1280,

     1281, 1282, 4509, 1283, 4509, 1305, 1306, 1284, 1285, 1307,
     1308, 1286, 1209, 1209, 1309, 1287, 1288, 1288, 1321, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1310, 1288, 1288, 1288,
     1288, 1288, 1288, 1313, 1288, 1305, 1306, 1311, 1314, 1307,
     1308, 1315, 1316, 1317, 1309, 1288, 1288, 1288, 1288, 1288,
     1318, 1319, 1312, 1320, 1323, 1324, 1310, 1325, 1326, 1327,
     1328, 1329, 1330, 1313, 1331, 1332, 1322, 1311, 1314, 1290,
     1333, 1315, 1316, 1317, 1334, 1335, 1288, 1288, 1288, 4509,
     1318, 1319, 1312, 1320, 1323, 1324, 4509, 1325, 1326, 1327,
     1328, 1329, 1330, 1336, 1331, 1332, 1322, 4509, 1337, 1290,

     1333, 1338, 1339, 1340, 1334, 1335, 1288, 1288, 1291, 1292,
     1341, 1342, 1343, 1293, 1344, 1345, 1294, 1346, 1347, 1348,
     1349, 1295, 1350, 1336, 1296, 1351, 1352, 1297, 1337, 4509,
     1353, 1338, 1339, 1340, 1354, 1355, 4509, 1356, 1291, 1292,
     1341, 1342, 1343, 1293, 1344, 1345, 1294, 1346, 1347, 1348,
     1349, 1295, 1350, 1357, 1296, 1351, 1352, 1297, 1298, 1299,
     1353, 1358, 1359, 1300, 1354, 1355, 1301, 1356, 1360, 1361,
     1362, 1302, 1363, 1364, 1303, 1365, 1366, 1304, 1367, 1368,
     1370, 1371, 1375, 1357, 1377, 1378, 1379, 4509, 1298, 1299,
     4509, 1358, 1359, 1300, 1388, 1389, 1301, 1372, 1360, 1361,

     1362, 1302, 1363, 1364, 1303, 1365, 1366, 1304, 1367, 1368,
     1370, 1371, 1375, 1373, 1377, 1378, 1379, 1380, 1383, 1390,
     1386, 1391, 1394, 1395, 1388, 1389, 1392, 1372, 1396, 1381,
     1384, 1397, 1398, 1393, 1399, 1400, 1382, 1385, 1387, 1401,
     1402, 1403, 1404, 1373, 1405, 1407, 1408, 1380, 1383, 1390,
     1386, 1391, 1394, 1395, 1409, 1410, 1392, 1411, 1396, 1381,
     1384, 1397, 1398, 1393, 1399, 1400, 1382, 1385, 1387, 1401,
     1402, 1403, 1404, 1406, 1405, 1407, 1408, 1412, 1414, 1404,
     1415, 1416, 1417, 1419, 1409, 1410, 1420, 1411, 1421, 1422,
     1423, 1424, 1413, 1427, 1428, 1429, 1432, 1418, 1433, 1434,

     1425, 1435, 1436, 1406, 1430, 1437, 1438, 1412, 1414, 1404,
     1415, 1416, 1417, 1419, 1426, 1431, 1420, 1439, 1421, 1422,
     1423, 1424, 1413, 1427, 1428, 1429, 1432, 1418, 1433, 1434,
     1425, 1435, 1436, 1442, 1430, 1437, 1438, 1440, 1443, 1444,
     1445, 1446, 1447, 1448, 1426, 1431, 1449, 1439, 1441, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461,
     1462, 1463, 1471, 1442, 1472, 1473, 1474, 1440, 1443, 1444,
     1445, 1446, 1447, 1448, 1460, 4509, 1449, 4509, 1441, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461,
     1462, 1463, 1471, 1475, 1472, 1473, 1474, 1476, 1477, 1478,

     1480, 1481, 1479, 1482, 1460, 1464, 1483, 1465, 1484, 1466,
     1485, 1486, 1487, 1488, 1489, 1467, 1490, 1491, 1492, 1468,
     1493, 1494, 1469, 1475, 1495, 1470, 1496, 1476, 1477, 1478,
     1480, 1481, 1479, 1482, 1497, 1464, 1483, 1465, 1484, 1466,
     1485, 1486, 1487, 1488, 1489, 1467, 1490, 1491, 1492, 1468,
     1493, 1494, 1469, 1498, 1495, 1470, 1496, 1499, 1500, 1501,
     1502, 1503, 1504, 1505, 1497, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 4509, 4509, 1516, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 1498, 4509, 4509, 4509, 1499, 1500, 1501,
     1502, 1503, 1504, 1505, 1517, 1506, 1507, 1508, 1509, 1510,

     1511, 1512, 1513, 1514, 1514, 1516, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1518, 1514, 1514, 1514, 1514, 1514, 1514,
     1519, 1514, 1520, 1521, 1517, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1514, 1514, 1514, 1514, 1514, 1528, 1531, 1532,
     1533, 1534, 1529, 1518, 1535, 1528, 1536, 1537, 1538, 1539,
     1519, 1540, 1520, 1521, 1541, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1530, 1514, 1514, 1514, 1542, 1528, 1531, 1532,
     1533, 1534, 1529, 1543, 1535, 1528, 1536, 1537, 1538, 1539,
     4509, 1540, 4509, 4509, 1541, 4509, 4509, 4509, 4509, 4509,
     4509, 1549, 1530, 1514, 1514, 1550, 1542, 1551, 1552, 1553,

     1554, 1555, 1556, 1543, 1544, 1544, 4509, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1557, 1544, 1544, 1544, 1544, 1544,
     1544, 1549, 1544, 1558, 1562, 1550, 1563, 1551, 1552, 1553,
     1554, 1555, 1556, 1544, 1544, 1544, 1544, 1544, 1560, 1561,
     1564, 1565, 1566, 1567, 1557, 1568, 1569, 1570, 1571, 1573,
     1574, 1575, 1576, 1558, 1562, 1577, 1563, 1578, 1579, 1580,
     1581, 1582, 1583, 1584, 1544, 1544, 1544, 4509, 1560, 1561,
     1564, 1565, 1566, 1567, 4509, 1568, 1569, 1570, 1571, 1573,
     1574, 1575, 1576, 1585, 4509, 1577, 1586, 1578, 1579, 1580,
     1581, 1582, 1583, 1584, 1544, 1544, 1559, 1559, 4509, 1559,

     1559, 1559, 1559, 1559, 1559, 1559, 1587, 1559, 1559, 1559,
     1559, 1559, 1559, 1585, 1559, 1588, 1586, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1559, 1559, 1559, 1559, 1559,
     1597, 1598, 1599, 1600, 1601, 1602, 1587, 1603, 1604, 1605,
     1606, 1607, 1608, 1609, 1610, 1588, 1611, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1612, 1559, 1559, 1559, 1613,
     1597, 1598, 1599, 1600, 1601, 1602, 1614, 1603, 1604, 1605,
     1606, 1607, 1608, 1609, 1610, 1615, 1611, 1616, 1617, 1618,
     1619, 1620, 1621, 1622, 1623, 1612, 1559, 1559, 1624, 1613,
     1625, 1626, 1627, 4509, 4509, 1642, 1614, 4509, 1643, 4509,

     1645, 1646, 1647, 1644, 1648, 1615, 1651, 1616, 1617, 1618,
     1619, 1620, 1621, 1622, 1623, 1649, 1654, 1655, 1624, 1650,
     1625, 1626, 1627, 1628, 1629, 1642, 1656, 1630, 1643, 1631,
     1645, 1646, 1647, 1644, 1648, 1657, 1651, 1652, 1660, 1654,
     1632, 1633, 1653, 1634, 4509, 1649, 1654, 1655, 4509, 1650,
     4509, 1658, 1661, 1628, 1629, 1659, 1656, 1630, 1662, 1631,
     1663, 4509, 4509, 1664, 4509, 1657, 1665, 1652, 1660, 1654,
     1632, 1633, 1653, 1634, 1635, 1636, 1666, 1667, 1637, 1671,
     1638, 1658, 1661, 1668, 1672, 1659, 1673, 1674, 1662, 1677,
     1663, 1639, 1640, 1664, 1641, 1678, 1665, 1679, 1669, 1675,

     1676, 1670, 1680, 1681, 1635, 1636, 1666, 1667, 1637, 1671,
     1638, 1682, 1683, 1668, 1672, 1684, 1673, 1674, 1685, 1677,
     1686, 1639, 1640, 1687, 1641, 1678, 1688, 1679, 1669, 1675,
     1676, 1670, 1680, 1681, 1689, 1690, 1691, 4509, 4509, 1694,
     4509, 1682, 1683, 4509, 4509, 1684, 4509, 1695, 1685, 4509,
     1686, 4509, 4509, 1687, 1696, 4509, 1688, 1697, 1698, 1699,
     1700, 1702, 1701, 1703, 1689, 1690, 1691, 1692, 1692, 1694,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1695, 1692, 1692,
     1692, 1692, 1692, 1692, 1696, 1692, 1704, 1697, 1698, 1699,
     1700, 1702, 1701, 1703, 1705, 1706, 1692, 1692, 1692, 1692,

     1692, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
     1716, 1717, 1718, 1719, 1720, 1721, 1704, 1722, 1723, 1724,
     1725, 1727, 1728, 1729, 1705, 1706, 1726, 1692, 1692, 1692,
     1730, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
     1716, 1717, 1718, 1719, 1720, 1721, 1731, 1722, 1723, 1724,
     1725, 1727, 1728, 1729, 1732, 1733, 1726, 1692, 1692, 1734,
     1730, 1736, 1735, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1731, 1750, 1751, 1752,
     1753, 4509, 4509, 4509, 1732, 1733, 4509, 4509, 4509, 1734,
     4509, 1736, 1735, 1737, 1738, 1739, 1740, 1741, 1742, 1743,

     1744, 1745, 1746, 1747, 1748, 1749, 1756, 1750, 1751, 1752,
     1753, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1756, 1774, 1775, 1776,
     1777, 1779, 1780, 1781, 1782, 1755, 4509, 4509, 1778, 4509,
     4509, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1783, 1774, 1775, 1776,
     1777, 1779, 1780, 1781, 1782, 1755, 1765, 1765, 1778, 1765,
     1765, 1765, 1765, 1765, 1765, 1765, 1784, 1765, 1765, 1765,
     1765, 1765, 1765, 1785, 1765, 1786, 1783, 1787, 1790, 1791,

     1792, 1793, 1788, 1794, 1795, 1765, 1765, 1765, 1765, 1765,
     1789, 1796, 1797, 1798, 1799, 1800, 1784, 1801, 1802, 1803,
     1804, 1805, 1806, 1785, 1807, 1786, 1808, 1787, 1790, 1791,
     1792, 1793, 1788, 1794, 1795, 1809, 1765, 1765, 1765, 1810,
     1789, 1796, 1797, 1798, 1799, 1800, 1811, 1801, 1802, 1803,
     1804, 1805, 1806, 1812, 1807, 1813, 1808, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 1809, 1765, 1765, 1824, 1810,
     4509, 1825, 1826, 1827, 1828, 1829, 1811, 1830, 1831, 1832,
     1833, 1834, 1835, 1812, 1836, 1813, 1814, 1815, 1816, 1817,
     1818, 1819, 1820, 1821, 1822, 1837, 1838, 1839, 1824, 1840,

     1823, 1825, 1826, 1827, 1828, 1829, 1841, 1830, 1831, 1832,
     1833, 1834, 1835, 1842, 1836, 1843, 1844, 1845, 1846, 1847,
     1848, 1849, 4509, 4509, 1852, 1837, 1838, 1839, 4509, 1840,
     1823, 4509, 1861, 4509, 4509, 4509, 1841, 4509, 4509, 1864,
     4509, 4509, 1865, 1842, 4509, 1843, 1844, 1845, 1846, 1847,
     1848, 1849, 1850, 1850, 1852, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1861, 1850, 1850, 1850, 1850, 1850, 1850, 1864,
     1850, 1862, 1865, 1866, 1853, 1867, 1868, 1863, 1854, 1869,
     1855, 1850, 1850, 1850, 1850, 1850, 1856, 1857, 1870, 1871,
     1872, 1858, 1873, 1859, 1874, 1875, 1876, 1877, 1878, 1860,

     1879, 1862, 1880, 1866, 1853, 1867, 1868, 1863, 1854, 1869,
     1855, 1881, 1850, 1850, 1850, 1882, 1856, 1857, 1870, 1871,
     1872, 1858, 1873, 1859, 1874, 1875, 1876, 1877, 1878, 1860,
     1879, 1883, 1880, 1885, 1887, 1888, 1889, 1890, 1891, 1892,
     1893, 1881, 1850, 1850, 1894, 1882, 1895, 1896, 1897, 1884,
     1898, 1886, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
     1907, 1883, 1908, 1885, 1887, 1888, 1889, 1890, 1891, 1892,
     1893, 1909, 1910, 1911, 1894, 1912, 1895, 1896, 1897, 1884,
     1898, 1886, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
     1907, 1913, 1908, 1914, 1915, 1916, 1917, 1918, 1919, 1920,

     1921, 1909, 1910, 1911, 1922, 1912, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 4509, 4509, 1936,
     4509, 1913, 4509, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 4509, 4509, 4509, 1922, 4509, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1934, 1936,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1937, 1934, 1934,
     1934, 1934, 1934, 1934, 1938, 1934, 1939, 1940, 1941, 1942,
     1943, 1944, 1945, 1946, 1947, 1948, 1934, 1934, 1934, 1934,
     1934, 1949, 1950, 1951, 1952, 1953, 1954, 1937, 1955, 1956,
     1957, 1958, 1959, 1960, 1938, 1961, 1939, 1940, 1941, 1942,

     1943, 1944, 1945, 1946, 1947, 1948, 1962, 1934, 1934, 1934,
     1963, 1949, 1950, 1951, 1952, 1953, 1954, 1964, 1955, 1956,
     1957, 1958, 1959, 1960, 1965, 1961, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1962, 1934, 1934, 1976,
     1963, 1977, 1978, 1979, 1980, 1981, 1982, 1964, 1983, 1984,
     1985, 1986, 1987, 1988, 1965, 1989, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1990, 1991, 1992, 1976,
     1993, 1977, 1978, 1979, 1980, 1981, 1982, 1994, 1983, 1984,
     1985, 1986, 1987, 1988, 1995, 1989, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2004, 2005, 1990, 1991, 1992, 2006,

     1993, 2007, 2010, 2008, 2011, 2012, 2013, 1994, 2009, 2014,
     2015, 2016, 2017, 2018, 1995, 2019, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2004, 2005, 2020, 2021, 2022, 2006,
     2023, 2007, 2010, 2008, 2011, 2012, 2013, 2024, 2009, 2014,
     2015, 2016, 2017, 2018, 2025, 2019, 2026, 2027, 4509, 4509,
     2030, 4509, 4509, 4509, 4509, 4509, 2020, 2021, 2022, 4509,
     2023, 4509, 4509, 4509, 4509, 2031, 4509, 2024, 2032, 2033,
     2034, 2035, 2036, 2037, 2025, 2038, 2026, 2027, 2028, 2028,
     2030, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2039, 2028,
     2028, 2028, 2028, 2028, 2028, 2031, 2028, 2040, 2032, 2033,

     2034, 2035, 2036, 2037, 2041, 2038, 2042, 2028, 2028, 2028,
     2028, 2028, 2043, 2044, 2045, 2046, 2047, 2048, 2039, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2040, 2057, 2058,
     2059, 2060, 2061, 2062, 2041, 2063, 2042, 2064, 2028, 2028,
     2028, 2065, 2043, 2044, 2045, 2046, 2047, 2048, 2066, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2067, 2057, 2058,
     2059, 2060, 2061, 2062, 2068, 2063, 2069, 2064, 2028, 2028,
     4509, 2065, 4509, 4509, 4509, 4509, 4509, 2070, 2066, 2071,
     2072, 2073, 2074, 2076, 2077, 4509, 4509, 2067, 2084, 4509,
     4509, 2085, 2086, 2087, 2068, 2088, 2069, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 2070, 2090, 2071,
     2072, 2073, 2074, 2076, 2077, 2078, 2081, 2091, 2084, 2079,
     2082, 2085, 2086, 2087, 2092, 2088, 2093, 2080, 2083, 2094,
     2096, 2097, 2098, 2099, 4509, 4509, 2101, 4509, 2090, 4509,
     4509, 4509, 4509, 4509, 2102, 2078, 2081, 2091, 4509, 2079,
     2082, 2103, 4509, 2104, 2092, 2105, 2093, 2080, 2083, 2094,
     2096, 2097, 2098, 2099, 2089, 2089, 2101, 2089, 2089, 2089,
     2089, 2089, 2089, 2089, 2102, 2089, 2089, 2089, 2089, 2089,
     2089, 2103, 2089, 2104, 2107, 2105, 2108, 2109, 2110, 2111,
     2112, 2113, 2114, 2089, 2089, 2089, 2089, 2089, 2115, 2116,

     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2132, 2107, 2133, 2108, 2109, 2110, 2111,
     2112, 2113, 2114, 2134, 2089, 2089, 2089, 4509, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2132, 4509, 2133, 2135, 2136, 2137, 2138,
     2139, 2140, 2141, 2134, 2089, 2089, 2095, 2095, 4509, 2095,
     2095, 2095, 2095, 2095, 2095, 2095, 2142, 2095, 2095, 2095,
     2095, 2095, 2095, 2143, 2095, 2144, 2135, 2136, 2137, 2138,
     2139, 2140, 2141, 2145, 2146, 2095, 2095, 2095, 2095, 2095,
     2147, 2148, 2149, 2151, 2153, 2154, 2142, 2155, 2158, 2156,

     2159, 2160, 2163, 2143, 2164, 2144, 2165, 2166, 2167, 2168,
     2169, 2150, 2152, 2145, 2146, 2157, 2095, 2095, 2095, 4509,
     2147, 2148, 2149, 2151, 2153, 2154, 4509, 2155, 2158, 2156,
     2159, 2160, 2163, 4509, 2164, 2170, 2165, 2166, 2167, 2168,
     2169, 2150, 2152, 2171, 4509, 2157, 2095, 2095, 2130, 2130,
     4509, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2161, 2130,
     2130, 2130, 2130, 2130, 2130, 2170, 2130, 2172, 2173, 2174,
     2175, 2176, 2177, 2171, 2162, 2178, 2179, 2130, 2130, 2130,
     2130, 2130, 2180, 2181, 2182, 2183, 2184, 2185, 2161, 2186,
     2187, 2188, 2189, 2190, 2191, 2193, 2194, 2172, 2173, 2174,

     2175, 2176, 2177, 2195, 2162, 2178, 2179, 2196, 2130, 2130,
     2130, 2197, 2180, 2181, 2182, 2183, 2184, 2185, 2198, 2186,
     2187, 2188, 2189, 2190, 2191, 2193, 2194, 2199, 2200, 2201,
     2202, 2203, 4509, 2195, 2205, 4509, 4509, 2196, 2130, 2130,
     4509, 2197, 2206, 4509, 4509, 4509, 4509, 4509, 2198, 2207,
     4509, 2208, 2209, 2210, 2211, 2212, 2213, 2199, 2200, 2201,
     2202, 2203, 2192, 2192, 2205, 2192, 2192, 2192, 2192, 2192,
     2192, 2192, 2206, 2192, 2192, 2192, 2192, 2192, 2192, 2207,
     2192, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
     2217, 2192, 2192, 2192, 2192, 2192, 2218, 2219, 2220, 2221,

     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2236, 2237, 4509,
     2238, 2229, 2239, 2240, 4509, 2241, 2242, 2214, 2215, 2216,
     2217, 2230, 2192, 2192, 2192, 2231, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2236, 2237, 2232,
     2238, 2229, 2239, 2240, 2233, 2241, 2242, 2243, 2244, 2245,
     2246, 2230, 2192, 2192, 2234, 2231, 2247, 2248, 2235, 2249,
     2250, 2251, 2252, 2253, 2254, 2255, 2256, 2258, 2257, 2232,
     2259, 2260, 2261, 2262, 2233, 2263, 2264, 2243, 2244, 2245,
     2246, 2265, 2266, 2267, 2234, 2268, 2247, 2248, 2235, 2249,
     2250, 2251, 2252, 2253, 2254, 2255, 2256, 2258, 2257, 2269,

     2259, 2260, 2261, 2262, 2270, 2263, 2264, 2271, 2272, 2273,
     2274, 2265, 2266, 2267, 2275, 2268, 2276, 2277, 2278, 2279,
     2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2269,
     2289, 2290, 2291, 2292, 2270, 2293, 2294, 2271, 2272, 2273,
     2274, 2295, 2296, 2297, 2275, 2298, 2276, 2277, 2278, 2279,
     2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2299,
     2289, 2290, 2291, 2292, 2300, 2293, 2294, 2301, 2302, 2303,
     2304, 2295, 2296, 2297, 2305, 2298, 2306, 2307, 2308, 2309,
     2310, 2311, 2312, 2313, 2314, 2315, 4509, 2328, 4509, 2299,
     4509, 2329, 4509, 4509, 2300, 4509, 2330, 2301, 2302, 2303,

     2304, 2331, 2332, 2333, 2305, 2334, 2306, 2307, 2308, 2309,
     2310, 2311, 2312, 2313, 2314, 2315, 2316, 2328, 2317, 2318,
     2322, 2329, 2323, 2324, 2335, 2319, 2330, 2336, 2337, 2325,
     2338, 2331, 2332, 2333, 2320, 2334, 2339, 2340, 2326, 2343,
     2321, 2344, 2345, 2341, 2327, 2346, 2316, 2347, 2317, 2318,
     2322, 2348, 2323, 2324, 2335, 2319, 2349, 2336, 2337, 2325,
     2338, 2342, 2350, 2351, 2320, 2352, 2339, 2340, 2326, 2343,
     2321, 2344, 2345, 2341, 2327, 2346, 2353, 2347, 2354, 2355,
     2356, 2348, 2357, 2358, 2359, 2360, 2349, 2361, 2362, 2363,
     2364, 2342, 2350, 2351, 2365, 2352, 2366, 2367, 2368, 2369,

     2370, 2371, 2373, 2374, 2377, 2379, 2353, 2375, 2354, 2355,
     2356, 2376, 2357, 2358, 2359, 2360, 2381, 2361, 2362, 2363,
     2364, 2382, 2384, 2385, 2365, 2386, 2366, 2367, 2368, 2369,
     2370, 2371, 2373, 2374, 2377, 2379, 2387, 2375, 2389, 2391,
     2388, 2376, 4509, 2393, 4509, 4509, 2381, 4509, 4509, 4509,
     4509, 2382, 2384, 2385, 4509, 2386, 4509, 4509, 2394, 4509,
     2396, 2397, 2398, 2399, 2400, 2401, 2387, 2402, 2389, 2391,
     2388, 2378, 2378, 2393, 2378, 2378, 2378, 2378, 2378, 2378,
     2378, 2403, 2378, 2378, 2378, 2378, 2378, 2378, 2394, 2378,
     2396, 2397, 2398, 2399, 2400, 2401, 2404, 2402, 2405, 2406,

     2378, 2378, 2378, 2378, 2378, 2407, 2408, 2409, 2412, 2410,
     2413, 2403, 2414, 2415, 2424, 2425, 2426, 2427, 2429, 2430,
     2431, 2432, 2434, 2435, 2438, 2436, 2404, 2411, 2405, 2406,
     2437, 2378, 2378, 2378, 4509, 2407, 2408, 2409, 2412, 2410,
     2413, 4509, 2414, 2415, 2424, 2425, 2426, 2427, 2429, 2430,
     2431, 2432, 2434, 2435, 2438, 2436, 2441, 2411, 4509, 4509,
     2437, 2378, 2378, 2380, 2380, 4509, 2380, 2380, 2380, 2380,
     2380, 2380, 2380, 2442, 2380, 2380, 2380, 2380, 2380, 2380,
     2416, 2380, 2420, 2439, 2443, 2444, 2441, 2445, 2440, 2417,
     2446, 2421, 2380, 2380, 2380, 2380, 2380, 2418, 2447, 2422,

     2448, 2449, 2419, 2442, 2423, 2450, 2451, 2452, 2453, 2454,
     2416, 2455, 2420, 2439, 2443, 2444, 2456, 2445, 2440, 2417,
     2446, 2421, 2457, 2380, 2380, 2380, 4509, 2418, 2447, 2422,
     2448, 2449, 2419, 4509, 2423, 2450, 2451, 2452, 2453, 2454,
     4509, 2455, 2458, 4509, 2459, 2460, 2456, 2461, 2462, 2463,
     2465, 2466, 2457, 2380, 2380, 2383, 2383, 4509, 2383, 2383,
     2383, 2383, 2383, 2383, 2383, 2467, 2383, 2383, 2383, 2383,
     2383, 2383, 2458, 2383, 2459, 2460, 2468, 2461, 2462, 2463,
     2465, 2466, 2469, 2470, 2383, 2383, 2383, 2383, 2383, 2471,
     2472, 2473, 2474, 2475, 2476, 2467, 2477, 2479, 2480, 2481,

     2482, 2483, 2484, 2485, 2486, 2487, 2468, 2488, 2490, 2491,
     2492, 2493, 2469, 2470, 2494, 2383, 2383, 2383, 4509, 2471,
     2472, 2473, 2474, 2475, 2476, 4509, 2477, 2479, 2480, 2481,
     2482, 2483, 2484, 2485, 2486, 2487, 2495, 2488, 2490, 2491,
     2492, 2493, 2496, 2497, 2494, 2383, 2383, 2428, 2428, 4509,
     2428, 2428, 2428, 2428, 2428, 2428, 2428, 2498, 2428, 2428,
     2428, 2428, 2428, 2428, 2499, 2428, 2495, 2500, 2501, 2502,
     2503, 2504, 2496, 2497, 2505, 2506, 2428, 2428, 2428, 2428,
     2428, 2507, 2508, 2509, 2510, 2511, 2512, 2498, 2513, 2514,
     2515, 2516, 2517, 2518, 2499, 2519, 2520, 2500, 2501, 2502,

     2503, 2504, 2521, 2522, 2505, 2506, 2523, 2428, 2428, 2428,
     4509, 2507, 2508, 2509, 2510, 2511, 2512, 4509, 2513, 2514,
     2515, 2516, 2517, 2518, 4509, 2519, 2520, 4509, 2524, 2525,
     2526, 2527, 2521, 2522, 2528, 2529, 2523, 2428, 2428, 2478,
     2478, 4509, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2530,
     2478, 2478, 2478, 2478, 2478, 2478, 2531, 2478, 2524, 2525,
     2526, 2527, 2532, 2533, 2528, 2529, 2534, 2535, 2478, 2478,
     2478, 2478, 2478, 2536, 2537, 2538, 2539, 2540, 2541, 2530,
     2542, 2543, 2544, 2545, 2546, 2547, 2531, 2548, 2549, 2550,
     2551, 2552, 2532, 2533, 2553, 2554, 2534, 2535, 2555, 2478,

     2478, 2478, 2556, 2536, 2537, 2538, 2539, 2540, 2541, 2557,
     2542, 2543, 2544, 2545, 2546, 2547, 2558, 2548, 2549, 2550,
     2551, 2552, 2559, 2560, 2553, 2554, 2561, 2562, 2555, 2478,
     2478, 2563, 2556, 2564, 2565, 2566, 2567, 2568, 2569, 2557,
     2570, 2571, 2572, 2573, 2574, 2575, 2558, 2576, 2577, 2578,
     2579, 2580, 2559, 2560, 2581, 2582, 2561, 2562, 2583, 2584,
     2585, 2563, 2586, 2564, 2565, 2566, 2567, 2568, 2569, 2587,
     2570, 2571, 2572, 2573, 2574, 2575, 2588, 2576, 2577, 2578,
     2579, 2580, 2589, 2590, 2581, 2582, 2591, 2592, 2583, 2584,
     2585, 2593, 2586, 2594, 2595, 2596, 2597, 2598, 2599, 2587,

     2600, 2601, 2603, 2604, 2605, 2607, 2588, 2608, 2609, 2610,
     2611, 2612, 2589, 2590, 2613, 2614, 2591, 2592, 2615, 2616,
     2617, 2593, 2618, 2594, 2595, 2596, 2597, 2598, 2599, 2619,
     2600, 2601, 2603, 2604, 2605, 2607, 2620, 2608, 2609, 2610,
     2611, 2612, 2621, 2622, 2613, 2614, 2623, 2624, 2615, 2616,
     2617, 2625, 2618, 2626, 2627, 2628, 2629, 2630, 2633, 2619,
     2631, 2632, 2634, 2635, 2636, 2637, 2620, 2638, 2639, 2640,
     2641, 2642, 2621, 2622, 2645, 2643, 2623, 2624, 2644, 2646,
     2647, 2625, 2648, 2626, 2627, 2628, 2629, 2630, 2633, 2649,
     2631, 2632, 2634, 2635, 2636, 2637, 2650, 2638, 2639, 2640,

     2641, 2642, 2651, 2652, 2645, 2643, 2653, 2654, 2644, 2646,
     2647, 2655, 2648, 2656, 2658, 2659, 2657, 2660, 2661, 2649,
     2662, 2663, 2664, 2665, 2666, 2667, 2650, 2668, 2669, 2670,
     2671, 2672, 2651, 2652, 2673, 2674, 2653, 2654, 2675, 2676,
     2677, 2655, 2678, 2656, 2658, 2659, 2657, 2660, 2661, 2679,
     2662, 2663, 2664, 2665, 2666, 2667, 2680, 2668, 2669, 2670,
     2671, 2672, 2681, 2682, 2673, 2674, 2683, 2684, 2675, 2676,
     2677, 2685, 2678, 2689, 2690, 2686, 2691, 2695, 2696, 2679,
     2697, 2687, 2698, 2692, 2699, 2700, 2680, 2701, 2702, 2693,
     2703, 2704, 2681, 2682, 2688, 2705, 2683, 2684, 2706, 2707,

     2708, 2685, 2694, 2689, 2690, 2686, 2691, 2695, 2696, 2709,
     2697, 2687, 2698, 2692, 2699, 2700, 2710, 2701, 2702, 2693,
     2703, 2704, 2711, 2712, 2688, 2705, 2713, 2714, 2706, 2707,
     2708, 2715, 2694, 2716, 2717, 2718, 2719, 2720, 2721, 2709,
     2722, 2723, 2724, 2725, 2726, 2727, 2710, 2728, 2729, 2730,
     2731, 2732, 2711, 2712, 2733, 2734, 2713, 2714, 2735, 2736,
     2737, 2715, 2738, 2716, 2717, 2718, 2719, 2720, 2721, 2739,
     2722, 2723, 2724, 2725, 2726, 2727, 2740, 2728, 2729, 2730,
     2731, 2732, 2742, 2743, 2733, 2734, 2744, 2745, 2735, 2736,
     2737, 4509, 2738, 4509, 4509, 4509, 4509, 4509, 2747, 2739,

     4509, 4509, 4509, 4509, 4509, 2748, 2740, 2749, 2750, 2751,
     2752, 2753, 2742, 2743, 2754, 2755, 2744, 2745, 2741, 2741,
     4509, 2741, 2741, 2741, 2741, 2741, 2741, 2741, 2747, 2741,
     2741, 2741, 2741, 2741, 2741, 2748, 2741, 2749, 2750, 2751,
     2752, 2753, 2756, 2757, 2754, 2755, 2758, 2741, 2741, 2741,
     2741, 2741, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776,
     2777, 2778, 2756, 2757, 2779, 2780, 2758, 2781, 2741, 2741,
     2741, 2782, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776,

     2777, 2778, 2783, 2784, 2779, 2780, 2785, 2781, 2741, 2741,
     2786, 2782, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804,
     2805, 2806, 2783, 2784, 2807, 2808, 2785, 2809, 2810, 2811,
     2786, 2812, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804,
     2805, 2806, 2813, 2814, 2807, 2808, 2815, 2809, 2810, 2811,
     2816, 2812, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824,
     2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834,
     2835, 2838, 2813, 2814, 2836, 2837, 2815, 2839, 2840, 2842,

     2816, 4509, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824,
     2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834,
     2835, 2838, 2844, 2845, 2836, 2837, 2850, 2839, 2840, 2842,
     2841, 2841, 4509, 2841, 2841, 2841, 2841, 2841, 2841, 2841,
     4509, 2841, 2841, 2841, 2841, 2841, 2841, 4509, 2841, 4509,
     4509, 4509, 2844, 2845, 2851, 2852, 2850, 2853, 2854, 2841,
     2841, 2841, 2841, 2841, 2846, 2846, 2846, 2846, 2846, 2846,
     2846, 2846, 2846, 2846, 2848, 2848, 2848, 2848, 2848, 2848,
     2848, 2848, 2848, 2848, 2851, 2852, 2855, 2853, 2854, 2856,
     2841, 2841, 2841, 2857, 2859, 2861, 2862, 2863, 2847, 2864,

     2865, 2866, 2867, 2869, 2871, 2872, 2873, 2874, 2849, 4509,
     4509, 2875, 4509, 4509, 4509, 4509, 2855, 4509, 4509, 2856,
     2841, 2841, 4509, 2857, 2859, 2861, 2862, 2863, 2847, 2864,
     2865, 2866, 2867, 2869, 2871, 2872, 2873, 2874, 2849, 2858,
     2858, 2875, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2876,
     2858, 2858, 2858, 2858, 2858, 2858, 2877, 2858, 2878, 2879,
     2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2858, 2858,
     2858, 2858, 2858, 2888, 2889, 2890, 2891, 2892, 2893, 2876,
     2894, 2895, 2896, 2897, 2898, 2899, 2877, 2900, 2878, 2879,
     2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2901, 2858,

     2858, 2858, 4509, 2888, 2889, 2890, 2891, 2892, 2893, 4509,
     2894, 2895, 2896, 2897, 2898, 2899, 4509, 2900, 2902, 4509,
     2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2901, 2858,
     2858, 2860, 2860, 4509, 2860, 2860, 2860, 2860, 2860, 2860,
     2860, 2911, 2860, 2860, 2860, 2860, 2860, 2860, 2902, 2860,
     2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2912, 2913,
     2860, 2860, 2860, 2860, 2860, 2914, 2915, 2916, 2917, 2918,
     2919, 2911, 2920, 2921, 2922, 2923, 2924, 2926, 2927, 2928,
     2929, 2930, 2932, 2933, 2937, 2938, 2939, 2943, 2912, 2913,
     2944, 2860, 2860, 2860, 4509, 2914, 2915, 2916, 2917, 2918,

     2919, 4509, 2920, 2921, 2922, 2923, 2924, 2926, 2927, 2928,
     2929, 2930, 2932, 2933, 2937, 2938, 2939, 2943, 4509, 2945,
     2944, 2860, 2860, 2925, 2925, 4509, 2925, 2925, 2925, 2925,
     2925, 2925, 2925, 2946, 2925, 2925, 2925, 2925, 2925, 2925,
     2934, 2925, 2940, 2947, 2948, 2949, 2950, 2951, 2935, 2945,
     2941, 2952, 2925, 2925, 2925, 2925, 2925, 2953, 2936, 2954,
     2942, 2955, 2957, 2946, 2958, 2959, 2960, 2961, 2963, 2964,
     2934, 2965, 2940, 2947, 2948, 2949, 2950, 2951, 2935, 2966,
     2941, 2952, 2967, 2925, 2925, 2925, 2968, 2953, 2936, 2954,
     2942, 2955, 2957, 2969, 2958, 2959, 2960, 2961, 2963, 2964,

     2970, 2965, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2966,
     2978, 2979, 2967, 2925, 2925, 2980, 2968, 2981, 2982, 2983,
     2984, 2985, 2986, 2969, 2987, 2988, 2989, 2990, 2991, 2992,
     2970, 2993, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2994,
     2978, 2979, 2995, 2996, 2997, 2980, 2998, 2981, 2982, 2983,
     2984, 2985, 2986, 2999, 2987, 2988, 2989, 2990, 2991, 2992,
     3000, 2993, 3002, 3003, 3004, 3005, 3006, 3007, 4509, 2994,
     3010, 4509, 2995, 2996, 2997, 4509, 2998, 4509, 3011, 4509,
     4509, 4509, 4509, 2999, 4509, 3012, 4509, 3013, 3014, 3015,
     3000, 3016, 3002, 3003, 3004, 3005, 3006, 3007, 3001, 3001,

     3010, 3001, 3001, 3001, 3001, 3001, 3001, 3001, 3011, 3001,
     3001, 3001, 3001, 3001, 3001, 3012, 3001, 3013, 3014, 3015,
     3017, 3016, 3018, 3019, 3020, 3021, 3022, 3001, 3001, 3001,
     3001, 3001, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 3009, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     3017, 4509, 3018, 3019, 3020, 3021, 3022, 3023, 3001, 3001,
     3001, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846,
     2846, 3009, 2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848,
     2848, 2848, 3024, 3025, 3026, 3027, 3028, 3023, 3001, 3001,
     3029, 3030, 3032, 3034, 3035, 3031, 3036, 3037, 3038, 3039,

     3040, 3041, 3043, 3045, 3046, 3042, 4509, 4509, 3047, 4509,
     4509, 4509, 3024, 3025, 3026, 3027, 3028, 4509, 4509, 4509,
     3029, 3030, 3032, 3034, 3035, 3031, 3036, 3037, 3038, 3039,
     3040, 3041, 3043, 3045, 3046, 3042, 3033, 3033, 3047, 3033,
     3033, 3033, 3033, 3033, 3033, 3033, 3048, 3033, 3033, 3033,
     3033, 3033, 3033, 3049, 3033, 3050, 3051, 3052, 3054, 3055,
     3057, 3058, 3061, 3064, 3065, 3033, 3033, 3033, 3033, 3033,
     3066, 3067, 3068, 3069, 3070, 3071, 3048, 3072, 3073, 3074,
     3075, 3076, 3077, 3049, 3078, 3050, 3051, 3052, 3054, 3055,
     3057, 3058, 3061, 3064, 3065, 3079, 3033, 3033, 3033, 4509,

     3066, 3067, 3068, 3069, 3070, 3071, 4509, 3072, 3073, 3074,
     3075, 3076, 3077, 4509, 3078, 3080, 4509, 3081, 3082, 3083,
     3084, 3085, 3086, 3087, 3088, 3079, 3033, 3033, 3053, 3053,
     4509, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3089, 3053,
     3053, 3053, 3053, 3053, 3053, 3080, 3053, 3081, 3082, 3083,
     3084, 3085, 3086, 3087, 3088, 3090, 3091, 3053, 3053, 3053,
     3053, 3053, 3092, 3093, 3094, 3095, 3096, 3097, 3089, 3098,
     3099, 3060, 3100, 3101, 3102, 3103, 3104, 3105, 3107, 3108,
     3109, 3110, 3112, 3113, 3114, 3090, 3091, 3118, 3053, 3053,
     3053, 4509, 3092, 3093, 3094, 3095, 3096, 3097, 4509, 3098,

     3099, 3060, 3100, 3101, 3102, 3103, 3104, 3105, 3107, 3108,
     3109, 3110, 3112, 3113, 3114, 4509, 3119, 3118, 3053, 3053,
     3056, 3056, 4509, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3120, 3056, 3056, 3056, 3056, 3056, 3056, 3115, 3056, 3121,
     3124, 3125, 3126, 3127, 3128, 3116, 3119, 3122, 3129, 3056,
     3056, 3056, 3056, 3056, 3130, 3131, 3132, 3133, 3134, 3135,
     3120, 3136, 3137, 3063, 3138, 3139, 3140, 3115, 3141, 3121,
     3124, 3125, 3126, 3127, 3128, 3116, 3142, 3122, 3129, 3143,
     3056, 3056, 3056, 4509, 3130, 3131, 3132, 3133, 3134, 3135,
     4509, 3136, 3137, 3063, 3138, 3139, 3140, 4509, 3141, 3144,

     4509, 3145, 3146, 3147, 3148, 3149, 3142, 3150, 3151, 3143,
     3056, 3056, 3106, 3106, 4509, 3106, 3106, 3106, 3106, 3106,
     3106, 3106, 3152, 3106, 3106, 3106, 3106, 3106, 3106, 3144,
     3106, 3145, 3146, 3147, 3148, 3149, 3153, 3150, 3151, 3153,
     3155, 3106, 3106, 3106, 3106, 3106, 3158, 3159, 3160, 3160,
     3162, 3165, 3152, 3154, 3166, 3167, 3168, 3169, 3170, 3171,
     3172, 3173, 3174, 3161, 3175, 3176, 3153, 3178, 3179, 3153,
     3155, 3180, 3106, 3106, 3106, 4509, 3158, 3159, 3160, 3160,
     3162, 3165, 4509, 3154, 3166, 3167, 3168, 3169, 3170, 3171,
     3172, 3173, 3174, 3161, 3175, 3176, 3181, 3178, 3179, 3182,

     3183, 3180, 3106, 3106, 3117, 3117, 4509, 3117, 3117, 3117,
     3117, 3117, 3117, 3117, 3184, 3117, 3117, 3117, 3117, 3117,
     3117, 3185, 3117, 3186, 3187, 3191, 3181, 3189, 3190, 3182,
     3183, 3192, 3193, 3117, 3117, 3117, 3117, 3117, 3194, 3195,
     3196, 3197, 3198, 3201, 3184, 3198, 3205, 3202, 3208, 3205,
     3213, 3185, 3209, 3186, 3187, 3191, 3214, 3189, 3190, 3199,
     3215, 3192, 3193, 3206, 3117, 3117, 3117, 4509, 3194, 3195,
     3196, 3197, 3198, 3201, 4509, 3198, 3205, 3202, 3208, 3205,
     3213, 4509, 3209, 3217, 4509, 4509, 3214, 3201, 3218, 3199,
     3215, 3202, 3219, 3206, 3117, 3117, 3156, 3156, 4509, 3156,

     3156, 3156, 3156, 3156, 3156, 3156, 3203, 3156, 3156, 3156,
     3156, 3156, 3156, 3217, 3156, 3208, 3220, 3201, 3218, 3209,
     3221, 3202, 3219, 3222, 3223, 3156, 3156, 3156, 3156, 3156,
     3224, 3225, 3226, 3227, 3210, 3230, 3203, 3231, 3232, 3233,
     3234, 3235, 3236, 3237, 3238, 3208, 3220, 3239, 3240, 3209,
     3221, 3241, 3242, 3222, 3223, 3243, 3156, 3156, 3156, 4509,
     3224, 3225, 3226, 3227, 3210, 3230, 4509, 3231, 3232, 3233,
     3234, 3235, 3236, 3237, 3238, 3244, 4509, 3239, 3240, 3245,
     3246, 3241, 3242, 3247, 3248, 3243, 3156, 3156, 3157, 3157,
     4509, 3157, 3157, 3157, 3157, 3157, 3157, 3157, 3249, 3157,

     3157, 3157, 3157, 3157, 3157, 3244, 3157, 3250, 3251, 3245,
     3246, 3252, 3253, 3247, 3248, 3254, 3259, 3157, 3157, 3157,
     3157, 3157, 3260, 3261, 3255, 3262, 3266, 3267, 3249, 3256,
     3263, 3268, 3269, 3270, 3271, 3272, 3273, 3250, 3251, 3257,
     3264, 3252, 3253, 3258, 3265, 3254, 3259, 3274, 3157, 3157,
     3157, 4509, 3260, 3261, 3255, 3262, 3266, 3267, 4509, 3256,
     3263, 3268, 3269, 3270, 3271, 3272, 3273, 3275, 4509, 3257,
     3264, 3276, 3277, 3258, 3265, 3278, 3279, 3274, 3157, 3157,
     3177, 3177, 4509, 3177, 3177, 3177, 3177, 3177, 3177, 3177,
     3280, 3177, 3177, 3177, 3177, 3177, 3177, 3275, 3177, 3281,

     3282, 3276, 3277, 3283, 3284, 3278, 3279, 3285, 3286, 3177,
     3177, 3177, 3177, 3177, 3287, 3288, 3289, 3290, 3292, 3294,
     3280, 3291, 3295, 3296, 3297, 3300, 3302, 3298, 3303, 3281,
     3282, 3299, 3304, 3283, 3284, 3305, 3306, 3285, 3286, 3307,
     3177, 3177, 3177, 4509, 3287, 3288, 3289, 3290, 3292, 3294,
     4509, 3291, 3295, 3296, 3297, 3300, 3302, 3298, 3303, 3308,
     4509, 3299, 3304, 3309, 3310, 3305, 3306, 3311, 3312, 3307,
     3177, 3177, 3200, 3200, 4509, 3200, 3200, 3200, 3200, 3200,
     3200, 3200, 3313, 3200, 3200, 3200, 3200, 3200, 3200, 3308,
     3200, 3314, 3315, 3309, 3310, 3316, 3317, 3311, 3312, 3318,

     3319, 3200, 3200, 3200, 3200, 3200, 3320, 3321, 3322, 3323,
     3324, 3327, 3313, 3328, 3333, 3334, 3335, 3338, 3339, 3336,
     3344, 3314, 3315, 3337, 3345, 3316, 3317, 3346, 3349, 3318,
     3319, 3350, 3200, 3200, 3200, 4509, 3320, 3321, 3322, 3323,
     3324, 3327, 4509, 3328, 3333, 3334, 3335, 3338, 3339, 3336,
     3344, 3347, 4509, 3337, 3345, 3348, 4509, 3346, 3349, 3351,
     4509, 3350, 3200, 3200, 3204, 3204, 4509, 3204, 3204, 3204,
     3204, 3204, 3204, 3204, 3353, 3204, 3204, 3204, 3204, 3204,
     3204, 3347, 3204, 3354, 3355, 3348, 3329, 3340, 3357, 3351,
     3330, 3341, 3358, 3204, 3204, 3204, 3204, 3204, 3331, 3342,

     3359, 3360, 3361, 3362, 3353, 3363, 3364, 3365, 3366, 3332,
     3343, 3369, 3370, 3354, 3355, 3371, 3329, 3340, 3357, 3372,
     3330, 3341, 3358, 3373, 3204, 3204, 3204, 4509, 3331, 3342,
     3359, 3360, 3361, 3362, 4509, 3363, 3364, 3365, 3366, 3332,
     3343, 3369, 3370, 3374, 4509, 3371, 3375, 3376, 3377, 3372,
     3378, 3379, 3380, 3373, 3204, 3204, 3212, 3212, 4509, 3212,
     3212, 3212, 3212, 3212, 3212, 3212, 3381, 3212, 3212, 3212,
     3212, 3212, 3212, 3374, 3212, 3382, 3375, 3376, 3377, 3384,
     3378, 3379, 3380, 3385, 3386, 3212, 3212, 3212, 3212, 3212,
     3387, 3389, 3390, 3391, 3392, 3393, 3381, 3394, 3395, 3396,

     3397, 3398, 3399, 3400, 3401, 3382, 3402, 3403, 3404, 3384,
     3405, 3406, 3407, 3385, 3386, 3408, 3212, 3212, 3212, 4509,
     3387, 3389, 3390, 3391, 3392, 3393, 4509, 3394, 3395, 3396,
     3397, 3398, 3399, 3400, 3401, 3409, 3402, 3403, 3404, 3412,
     3405, 3406, 3407, 3413, 3415, 3408, 3212, 3212, 3228, 3228,
     4509, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3416, 3228,
     3228, 3228, 3228, 3228, 3228, 3409, 3228, 3417, 3418, 3412,
     3419, 3420, 3422, 3413, 3415, 3423, 3424, 3228, 3228, 3228,
     3228, 3228, 3425, 3426, 3427, 3428, 3429, 3430, 3416, 3431,
     3432, 3433, 3434, 3435, 3436, 3437, 3438, 3417, 3418, 3439,

     3419, 3420, 3422, 3440, 3441, 3423, 3424, 3442, 3228, 3228,
     3228, 4509, 3425, 3426, 3427, 3428, 3429, 3430, 4509, 3431,
     3432, 3433, 3434, 3435, 3436, 3437, 3438, 3443, 4509, 3439,
     3444, 3445, 3446, 3440, 3441, 3447, 3448, 3442, 3228, 3228,
     3293, 3293, 4509, 3293, 3293, 3293, 3293, 3293, 3293, 3293,
     3449, 3293, 3293, 3293, 3293, 3293, 3293, 3443, 3293, 3450,
     3444, 3445, 3446, 3451, 3452, 3447, 3448, 3453, 3454, 3293,
     3293, 3293, 3293, 3293, 3455, 3456, 3457, 3458, 3459, 3460,
     3449, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3450,
     3469, 3470, 3471, 3451, 3452, 3472, 3473, 3453, 3454, 3474,

     3293, 3293, 3293, 4509, 3455, 3456, 3457, 3458, 3459, 3460,
     4509, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3475,
     3469, 3470, 3471, 3476, 3477, 3472, 3473, 3478, 3479, 3474,
     3293, 3293, 3325, 3325, 4509, 3325, 3325, 3325, 3325, 3325,
     3325, 3325, 3480, 3325, 3325, 3325, 3325, 3325, 3325, 3475,
     3325, 3481, 3482, 3476, 3477, 3483, 3484, 3478, 3479, 3485,
     3486, 3325, 3325, 3325, 3325, 3325, 3487, 3488, 3489, 3490,
     3491, 3492, 3480, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3481, 3482, 3501, 3502, 3483, 3484, 3503, 3504, 3485,
     3486, 3505, 3325, 3325, 3325, 4509, 3487, 3488, 3489, 3490,

     3491, 3492, 4509, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3506, 4509, 3501, 3502, 3507, 3508, 3503, 3504, 3509,
     3510, 3505, 3325, 3325, 3352, 3352, 4509, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3511, 3352, 3352, 3352, 3352, 3352,
     3352, 3506, 3352, 3512, 3513, 3507, 3508, 3514, 3515, 3509,
     3510, 3516, 3517, 3352, 3352, 3352, 3352, 3352, 3520, 3521,
     3522, 3524, 3525, 3526, 3511, 3527, 3528, 3529, 3531, 3532,
     3533, 3534, 3535, 3512, 3513, 3537, 3539, 3514, 3515, 3540,
     3542, 3516, 3517, 3544, 3352, 3352, 3352, 4509, 3520, 3521,
     3522, 3524, 3525, 3526, 4509, 3527, 3528, 3529, 3531, 3532,

     3533, 3534, 3535, 3545, 4509, 3537, 3539, 3546, 3547, 3540,
     3542, 3548, 3550, 3544, 3352, 3352, 3367, 3367, 4509, 3367,
     3367, 3367, 3367, 3367, 3367, 3367, 3551, 3367, 3367, 3367,
     3367, 3367, 3367, 3545, 3367, 3552, 3553, 3546, 3547, 3556,
     3557, 3548, 3550, 3558, 3560, 3367, 3367, 3367, 3367, 3367,
     3561, 3562, 3563, 3566, 3567, 3568, 3551, 3569, 3570, 3572,
     3573, 3574, 3575, 3577, 3571, 3552, 3553, 3578, 3576, 3556,
     3557, 3579, 3580, 3558, 3560, 3581, 3367, 3367, 3367, 4509,
     3561, 3562, 3563, 3566, 3567, 3568, 4509, 3569, 3570, 3572,
     3573, 3574, 3575, 3577, 3571, 3582, 4509, 3578, 3576, 3583,

     3584, 3579, 3580, 3585, 3587, 3581, 3367, 3367, 3383, 3383,
     4509, 3383, 3383, 3383, 3383, 3383, 3383, 3383, 3588, 3383,
     3383, 3383, 3383, 3383, 3383, 3582, 3383, 3589, 3591, 3583,
     3584, 3592, 3593, 3585, 3587, 3594, 3595, 3383, 3383, 3383,
     3383, 3383, 3596, 3597, 3598, 3599, 3600, 3601, 3588, 3602,
     3603, 3604, 3605, 3606, 3607, 3608, 3609, 3589, 3591, 3610,
     3611, 3592, 3593, 3612, 3615, 3594, 3595, 3616, 3383, 3383,
     3383, 4509, 3596, 3597, 3598, 3599, 3600, 3601, 4509, 3602,
     3603, 3604, 3605, 3606, 3607, 3608, 3609, 3617, 4509, 3610,
     3611, 3618, 3619, 3612, 3615, 4509, 3622, 3616, 3383, 3383,

     3410, 3410, 4509, 3410, 3410, 3410, 3410, 3410, 3410, 3410,
     3623, 3410, 3410, 3410, 3410, 3410, 3410, 3617, 3410, 3620,
     3624, 3618, 3619, 3625, 3626, 3621, 3622, 3627, 3628, 3410,
     3410, 3410, 3410, 3410, 3629, 3630, 3631, 3632, 3633, 3634,
     3623, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3620,
     3624, 3643, 3648, 3625, 3626, 3621, 4509, 3627, 3628, 3657,
     3410, 3410, 3410, 4509, 3629, 3630, 3631, 3632, 3633, 3634,
     4509, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3654,
     4509, 3643, 3648, 3655, 4509, 3652, 3653, 3659, 4509, 3657,
     3410, 3410, 3414, 3414, 4509, 3414, 3414, 3414, 3414, 3414,

     3414, 3414, 3656, 3414, 3414, 3414, 3414, 3414, 3414, 3654,
     3414, 3664, 3673, 3655, 3644, 3652, 3653, 3659, 3645, 3675,
     4509, 3414, 3414, 3414, 3414, 3414, 3646, 3660, 3668, 3669,
     3676, 3661, 3656, 3677, 3678, 3679, 3680, 3647, 3681, 3662,
     3682, 3664, 3673, 3683, 3644, 4509, 3684, 3685, 3645, 3675,
     3663, 3686, 3414, 3414, 3414, 4509, 3646, 3660, 3668, 3669,
     3676, 3661, 4509, 3677, 3678, 3679, 3680, 3647, 3681, 3662,
     3682, 3670, 4509, 3683, 3687, 3671, 3684, 3685, 3688, 3689,
     3663, 3686, 3414, 3414, 3518, 3518, 4509, 3518, 3518, 3518,
     3518, 3518, 3518, 3518, 3672, 3518, 3518, 3518, 3518, 3518,

     3518, 3670, 3518, 3690, 3687, 3671, 3693, 3694, 3688, 3689,
     3691, 3695, 3697, 3518, 3518, 3518, 3518, 3518, 3692, 3696,
     3698, 3699, 3700, 3701, 3672, 3702, 3703, 3704, 3705, 3706,
     3707, 3708, 3709, 3690, 3710, 3711, 3693, 3694, 3712, 3713,
     3691, 3695, 3697, 3714, 3518, 3518, 3518, 4509, 3692, 3696,
     3698, 3699, 3700, 3701, 4509, 3702, 3703, 3704, 3705, 3706,
     3707, 3708, 3709, 3715, 3710, 3711, 3716, 3717, 3712, 3713,
     3718, 3719, 3720, 3714, 3518, 3518, 3523, 3523, 4509, 3523,
     3523, 3523, 3523, 3523, 3523, 3523, 3721, 3523, 3523, 3523,
     3523, 3523, 3523, 3715, 3523, 3722, 3716, 3717, 3723, 3724,

     3718, 3719, 3720, 3725, 3726, 3523, 3523, 3523, 3523, 3523,
     3727, 3728, 3729, 3730, 3731, 3732, 3721, 3733, 3734, 3735,
     3736, 3738, 3739, 3740, 3741, 3722, 3742, 3743, 3723, 3724,
     3745, 3746, 3747, 3725, 3726, 3748, 3523, 3523, 3523, 4509,
     3727, 3728, 3729, 3730, 3731, 3732, 4509, 3733, 3734, 3735,
     3736, 3738, 3739, 3740, 3741, 3749, 3742, 3743, 3751, 3752,
     3745, 3746, 3747, 3753, 3754, 3748, 3523, 3523, 3536, 3536,
     4509, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3755, 3536,
     3536, 3536, 3536, 3536, 3536, 3749, 3536, 3756, 3751, 3752,
     3758, 3759, 3760, 3753, 3754, 3761, 3762, 3536, 3536, 3536,

     3536, 3536, 3763, 3764, 3765, 3766, 3767, 3768, 3755, 3771,
     3772, 3773, 3774, 3775, 3776, 3777, 3778, 3756, 3779, 3780,
     3758, 3759, 3760, 3781, 3782, 3761, 3762, 3783, 3536, 3536,
     3536, 4509, 3763, 3764, 3765, 3766, 3767, 3768, 4509, 3771,
     3772, 3773, 3774, 3775, 3776, 3777, 3778, 3784, 3779, 3780,
     3785, 3786, 3787, 3781, 3782, 3788, 3789, 3783, 3536, 3536,
     3538, 3538, 4509, 3538, 3538, 3538, 3538, 3538, 3538, 3538,
     3790, 3538, 3538, 3538, 3538, 3538, 3538, 3784, 3538, 3791,
     3785, 3786, 3787, 3792, 3794, 3788, 3789, 3795, 3796, 3538,
     3538, 3538, 3538, 3538, 3797, 3798, 3799, 3800, 3802, 3803,

     3790, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3791,
     3812, 3814, 3815, 3792, 3794, 3816, 3817, 3795, 3796, 3818,
     3538, 3538, 3538, 4509, 3797, 3798, 3799, 3800, 3802, 3803,
     4509, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3819,
     3812, 3814, 3815, 3820, 3822, 3816, 3817, 3823, 3824, 3818,
     3538, 3538, 3549, 3549, 4509, 3549, 3549, 3549, 3549, 3549,
     3549, 3549, 3825, 3549, 3549, 3549, 3549, 3549, 3549, 3819,
     3549, 3826, 3827, 3820, 3822, 3828, 3829, 3823, 3824, 3830,
     3831, 3549, 3549, 3549, 3549, 3549, 3832, 3833, 3834, 3835,
     3836, 3837, 3825, 3838, 3839, 3840, 3841, 3842, 3843, 3844,

     3845, 3826, 3827, 3846, 3847, 3828, 3829, 3848, 3849, 3830,
     3831, 3850, 3549, 3549, 3549, 4509, 3832, 3833, 3834, 3835,
     3836, 3837, 4509, 3838, 3839, 3840, 3841, 3842, 3843, 3844,
     3845, 3851, 4509, 3846, 3847, 3852, 3853, 3848, 3849, 3854,
     3855, 3850, 3549, 3549, 3554, 3554, 4509, 3554, 3554, 3554,
     3554, 3554, 3554, 3554, 3856, 3554, 3554, 3554, 3554, 3554,
     3554, 3851, 3554, 3857, 3858, 3852, 3853, 3862, 3863, 3854,
     3855, 3865, 3859, 3554, 3554, 3554, 3554, 3554, 3860, 3866,
     3867, 3868, 3871, 3872, 3856, 3874, 3875, 3869, 3876, 3877,
     3878, 3861, 3879, 3857, 3858, 3880, 3883, 3862, 3863, 4509,

     3870, 3865, 3859, 3886, 3554, 3554, 3554, 4509, 3860, 3866,
     3867, 3868, 3871, 3872, 4509, 3874, 3875, 3869, 3876, 3877,
     3878, 3861, 3879, 3881, 4509, 3880, 3883, 3890, 3893, 3882,
     3870, 4509, 3896, 3886, 3554, 3554, 3555, 3555, 4509, 3555,
     3555, 3555, 3555, 3555, 3555, 3555, 3897, 3555, 3555, 3555,
     3555, 3555, 3555, 3881, 3555, 3888, 3898, 3890, 3893, 3882,
     3900, 3889, 3896, 3901, 3902, 3555, 3555, 3555, 3555, 3555,
     3903, 3904, 3905, 3906, 3907, 3908, 3897, 3909, 3910, 3911,
     3912, 3913, 3914, 3915, 3916, 3888, 3898, 3917, 3918, 3919,
     3900, 3889, 3920, 3901, 3902, 3921, 3555, 3555, 3555, 4509,

     3903, 3904, 3905, 3906, 3907, 3908, 4509, 3909, 3910, 3911,
     3912, 3913, 3914, 3915, 3916, 3922, 4509, 3917, 3918, 3919,
     3923, 3924, 3920, 3925, 3929, 3921, 3555, 3555, 3613, 3613,
     4509, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3930, 3613,
     3613, 3613, 3613, 3613, 3613, 3922, 3613, 3926, 3931, 3932,
     3923, 3924, 3933, 3925, 3929, 3927, 3934, 3613, 3613, 3613,
     3613, 3613, 3935, 3936, 3940, 3928, 3937, 3941, 3930, 3942,
     3943, 3944, 3945, 3946, 3938, 3948, 3949, 3926, 3931, 3932,
     3951, 3952, 3933, 3953, 3939, 3927, 3934, 3955, 3613, 3613,
     3613, 4509, 3935, 3936, 3940, 3928, 3937, 3941, 4509, 3942,

     3943, 3944, 3945, 3946, 3938, 3948, 3949, 3956, 4509, 3958,
     3951, 3952, 3967, 3953, 3939, 3968, 3977, 3955, 3613, 3613,
     3649, 3649, 4509, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3978, 3649, 3649, 3649, 3649, 3649, 3649, 3956, 3649, 3958,
     3979, 3980, 3967, 3981, 3982, 3968, 3977, 3983, 3984, 3649,
     3649, 3649, 3649, 3649, 3985, 3986, 3987, 3988, 3989, 3990,
     3978, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999,
     3979, 3980, 4000, 3981, 3982, 4002, 4003, 3983, 3984, 4004,
     3649, 3649, 3649, 4509, 3985, 3986, 3987, 3988, 3989, 3990,
     4509, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999,

     4509, 4005, 4000, 4006, 4007, 4002, 4003, 4008, 4009, 4004,
     3649, 3649, 3650, 3650, 4509, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 4010, 3650, 3650, 3650, 3650, 3650, 3650, 4011,
     3650, 4005, 4013, 4006, 4007, 4014, 4015, 4008, 4009, 4016,
     4017, 3650, 3650, 3650, 3650, 3650, 4018, 4019, 4020, 4021,
     4022, 4023, 4010, 4024, 4025, 4026, 4027, 4028, 4029, 4011,
     4030, 4031, 4013, 4032, 4033, 4014, 4015, 4034, 4035, 4016,
     4017, 4036, 3650, 3650, 3650, 4509, 4018, 4019, 4020, 4021,
     4022, 4023, 4509, 4024, 4025, 4026, 4027, 4028, 4029, 4509,
     4030, 4031, 4509, 4032, 4033, 4037, 4038, 4034, 4035, 4039,

     4040, 4036, 3650, 3650, 3651, 3651, 4509, 3651, 3651, 3651,
     3651, 3651, 3651, 3651, 4041, 3651, 3651, 3651, 3651, 3651,
     3651, 4042, 3651, 4043, 4044, 4037, 4038, 4045, 4046, 4039,
     4040, 4047, 4048, 3651, 3651, 3651, 3651, 3651, 4049, 4050,
     4051, 4052, 4053, 4054, 4041, 4055, 4056, 4057, 4058, 4059,
     4060, 4042, 4061, 4043, 4044, 4063, 4064, 4045, 4046, 4065,
     4066, 4047, 4048, 4067, 3651, 3651, 3651, 4509, 4049, 4050,
     4051, 4052, 4053, 4054, 4509, 4055, 4056, 4057, 4058, 4059,
     4060, 4509, 4061, 4068, 4509, 4063, 4064, 4069, 4070, 4065,
     4066, 4071, 4073, 4067, 3651, 3651, 3658, 3658, 4509, 3658,

     3658, 3658, 3658, 3658, 3658, 3658, 4074, 3658, 3658, 3658,
     3658, 3658, 3658, 4068, 3658, 4075, 4076, 4069, 4070, 4077,
     4078, 4071, 4073, 4079, 4080, 3658, 3658, 3658, 3658, 3658,
     4081, 4082, 4083, 4084, 4085, 4087, 4074, 4088, 4089, 4090,
     4091, 4092, 4093, 4094, 4096, 4075, 4076, 4097, 4098, 4077,
     4078, 4099, 4100, 4079, 4080, 4101, 3658, 3658, 3658, 4509,
     4081, 4082, 4083, 4084, 4085, 4087, 4509, 4088, 4089, 4090,
     4091, 4092, 4093, 4094, 4096, 4102, 4509, 4097, 4098, 4103,
     4104, 4099, 4100, 4107, 4108, 4101, 3658, 3658, 3737, 3737,
     4509, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 4109, 3737,

     3737, 3737, 3737, 3737, 3737, 4102, 3737, 4110, 4112, 4103,
     4104, 4113, 4114, 4107, 4108, 4117, 4118, 3737, 3737, 3737,
     3737, 3737, 4119, 4120, 4122, 4123, 4124, 4125, 4109, 4126,
     4127, 4128, 4129, 4130, 4131, 4132, 4133, 4110, 4112, 4134,
     4135, 4113, 4114, 4136, 4137, 4117, 4118, 4138, 3737, 3737,
     3737, 4509, 4119, 4120, 4122, 4123, 4124, 4125, 4509, 4126,
     4127, 4128, 4129, 4130, 4131, 4132, 4133, 4139, 4509, 4134,
     4135, 4140, 4141, 4136, 4137, 4142, 4143, 4138, 3737, 3737,
     3744, 3744, 4509, 3744, 3744, 3744, 3744, 3744, 3744, 3744,
     4144, 3744, 3744, 3744, 3744, 3744, 3744, 4139, 3744, 4145,

     4146, 4140, 4141, 4147, 4148, 4142, 4143, 4149, 4150, 3744,
     3744, 3744, 3744, 3744, 4151, 4152, 4153, 4154, 4155, 4156,
     4144, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4145,
     4146, 4165, 4166, 4147, 4148, 4167, 4168, 4149, 4150, 4169,
     3744, 3744, 3744, 4509, 4151, 4152, 4153, 4154, 4155, 4156,
     4509, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4170,
     4509, 4165, 4166, 4171, 4172, 4167, 4168, 4173, 4509, 4169,
     3744, 3744, 3769, 3769, 4509, 3769, 3769, 3769, 3769, 3769,
     3769, 3769, 4176, 3769, 3769, 3769, 3769, 3769, 3769, 4170,
     3769, 4177, 4174, 4171, 4172, 4178, 4179, 4173, 4175, 4180,

     4181, 3769, 3769, 3769, 3769, 3769, 4182, 4183, 4184, 4185,
     4187, 4188, 4176, 4189, 4190, 4186, 4191, 4192, 4193, 4194,
     4195, 4177, 4174, 4196, 4197, 4178, 4179, 4198, 4175, 4180,
     4181, 4199, 3769, 3769, 3769, 4509, 4182, 4183, 4184, 4185,
     4187, 4188, 4509, 4189, 4190, 4186, 4191, 4192, 4193, 4194,
     4195, 4200, 4509, 4196, 4197, 4201, 4202, 4198, 4203, 4204,
     4205, 4199, 3769, 3769, 3793, 3793, 4509, 3793, 3793, 3793,
     3793, 3793, 3793, 3793, 4206, 3793, 3793, 3793, 3793, 3793,
     3793, 4200, 3793, 4207, 4208, 4201, 4202, 4209, 4203, 4204,
     4205, 4210, 4212, 3793, 3793, 3793, 3793, 3793, 4213, 4214,

     4215, 4216, 4217, 4218, 4206, 4219, 4220, 4222, 4223, 4224,
     4225, 4226, 4227, 4207, 4208, 4228, 4229, 4209, 4230, 4231,
     4232, 4210, 4212, 4233, 3793, 3793, 3793, 4509, 4213, 4214,
     4215, 4216, 4217, 4218, 4509, 4219, 4220, 4222, 4223, 4224,
     4225, 4226, 4227, 4234, 4509, 4228, 4229, 4235, 4230, 4231,
     4232, 4236, 4237, 4233, 3793, 3793, 3813, 3813, 4509, 3813,
     3813, 3813, 3813, 3813, 3813, 3813, 4238, 3813, 3813, 3813,
     3813, 3813, 3813, 4234, 3813, 4239, 4240, 4235, 4241, 4242,
     4243, 4236, 4237, 4244, 4245, 3813, 3813, 3813, 3813, 3813,
     4246, 4247, 4248, 4249, 4250, 4251, 4238, 4252, 4253, 4254,

     4255, 4256, 4257, 4258, 4259, 4239, 4240, 4260, 4241, 4242,
     4243, 4261, 4262, 4244, 4245, 4263, 3813, 3813, 3813, 4509,
     4246, 4247, 4248, 4249, 4250, 4251, 4509, 4252, 4253, 4254,
     4255, 4256, 4257, 4258, 4259, 4264, 4509, 4260, 4265, 4266,
     4267, 4261, 4262, 4268, 4269, 4263, 3813, 3813, 3864, 3864,
     4509, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 4270, 3864,
     3864, 3864, 3864, 3864, 3864, 4264, 3864, 4271, 4265, 4266,
     4267, 4272, 4273, 4268, 4269, 4274, 4275, 3864, 3864, 3864,
     3864, 3864, 4276, 4277, 4278, 4279, 4280, 4281, 4270, 4282,
     4283, 4284, 4285, 4286, 4287, 4288, 4290, 4271, 4291, 4292,

     4293, 4272, 4273, 4294, 4295, 4274, 4275, 4296, 3864, 3864,
     3864, 4509, 4276, 4277, 4278, 4279, 4280, 4281, 4509, 4282,
     4283, 4284, 4285, 4286, 4287, 4288, 4290, 4297, 4291, 4292,
     4293, 4299, 4300, 4294, 4295, 4301, 4302, 4296, 3864, 3864,
     3884, 3884, 4509, 3884, 3884, 3884, 3884, 3884, 3884, 3884,
     4303, 3884, 3884, 3884, 3884, 3884, 3884, 4297, 3884, 4304,
     4305, 4299, 4300, 4306, 4308, 4301, 4302, 4310, 4312, 3884,
     3884, 3884, 3884, 3884, 4315, 4317, 4318, 4319, 4320, 4316,
     4303, 4321, 4322, 4323, 4326, 4327, 4324, 4328, 4329, 4304,
     4305, 4325, 4330, 4306, 4308, 4331, 4332, 4310, 4312, 4339,

     3884, 3884, 3884, 4509, 4315, 4317, 4318, 4319, 4320, 4316,
     4509, 4321, 4322, 4323, 4326, 4327, 4324, 4328, 4329, 4346,
     4509, 4325, 4330, 4347, 4509, 4331, 4332, 4509, 4349, 4339,
     3884, 3884, 3885, 3885, 4509, 3885, 3885, 3885, 3885, 3885,
     3885, 3885, 4351, 3885, 3885, 3885, 3885, 3885, 3885, 4346,
     3885, 4352, 4348, 4347, 4333, 4334, 4353, 4335, 4349, 4336,
     4350, 3885, 3885, 3885, 3885, 3885, 4337, 4347, 4340, 4341,
     4354, 4342, 4351, 4343, 4338, 4349, 4355, 4356, 4357, 4358,
     4344, 4352, 4348, 4359, 4333, 4334, 4353, 4335, 4345, 4336,
     4350, 4360, 3885, 3885, 3885, 4509, 4337, 4347, 4340, 4341,

     4354, 4342, 4509, 4343, 4338, 4349, 4355, 4356, 4357, 4358,
     4344, 4361, 4509, 4359, 4362, 4363, 4364, 4365, 4345, 4366,
     4367, 4360, 3885, 3885, 3887, 3887, 4509, 3887, 3887, 3887,
     3887, 3887, 3887, 3887, 4368, 3887, 3887, 3887, 3887, 3887,
     3887, 4361, 3887, 4369, 4362, 4363, 4364, 4365, 4370, 4366,
     4367, 4371, 4372, 3887, 3887, 3887, 3887, 3887, 4373, 4374,
     4375, 4376, 4377, 4378, 4368, 4379, 4380, 4381, 4382, 4383,
     4384, 4386, 4387, 4369, 4388, 4389, 4390, 4392, 4370, 4393,
     4394, 4371, 4372, 4395, 3887, 3887, 3887, 4509, 4373, 4374,
     4375, 4376, 4377, 4378, 4509, 4379, 4380, 4381, 4382, 4383,

     4384, 4386, 4387, 4396, 4388, 4389, 4390, 4392, 4397, 4393,
     4394, 4398, 4399, 4395, 3887, 3887, 3895, 3895, 4509, 3895,
     3895, 3895, 3895, 3895, 3895, 3895, 4401, 3895, 3895, 3895,
     3895, 3895, 3895, 4396, 3895, 4402, 4403, 4404, 4397, 4405,
     4407, 4398, 4399, 4408, 4409, 3895, 3895, 3895, 3895, 3895,
     4410, 4411, 4412, 4413, 4414, 4415, 4401, 4416, 4417, 4418,
     4420, 4421, 4423, 4424, 4426, 4402, 4403, 4404, 4427, 4405,
     4407, 4429, 4430, 4408, 4409, 4431, 3895, 3895, 3895, 4509,
     4410, 4411, 4412, 4413, 4414, 4415, 4509, 4416, 4417, 4418,
     4420, 4421, 4423, 4424, 4426, 4432, 4509, 4433, 4427, 4434,

     4435, 4429, 4430, 4436, 4437, 4431, 3895, 3895, 3947, 3947,
     4509, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 4438, 3947,
     3947, 3947, 3947, 3947, 3947, 4432, 3947, 4433, 4439, 4434,
     4435, 4440, 4441, 4436, 4437, 4442, 4451, 3947, 3947, 3947,
     3947, 3947, 4443, 4444, 4445, 4446, 4447, 4448, 4438, 4449,
     4450, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4439, 4459,
     4460, 4440, 4441, 4461, 4462, 4442, 4451, 4463, 3947, 3947,
     3947, 4509, 4443, 4444, 4445, 4446, 4447, 4448, 4509, 4449,
     4450, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4509, 4459,
     4460, 4464, 4465, 4461, 4462, 4466, 4467, 4463, 3947, 3947,

     3950, 3950, 4509, 3950, 3950, 3950, 3950, 3950, 3950, 3950,
     4468, 3950, 3950, 3950, 3950, 3950, 3950, 4469, 3950, 4470,
     4471, 4464, 4465, 4472, 4473, 4466, 4467, 4474, 4475, 3950,
     3950, 3950, 3950, 3950, 4476, 4477, 4478, 4480, 4483, 4485,
     4468, 4484, 4487, 4488, 4486, 4489, 4490, 4469, 4491, 4470,
     4471, 4492, 4493, 4472, 4473, 4494, 4483, 4474, 4475, 4485,
     3950, 3950, 3950, 4509, 4476, 4477, 4478, 4480, 4483, 4485,
     4495, 4484, 4487, 4488, 4486, 4489, 4490, 4496, 4491, 4497,
     4498, 4492, 4493, 4499, 4500, 4494, 4483, 4501, 4502, 4485,
     3950, 3950, 3959, 3960, 4503, 3961, 4504, 3962, 4505, 4506,

     4495, 4507, 4508, 4509, 3963, 4509, 4509, 4496, 4509, 4497,
     4498, 3964, 3965, 4499, 4500, 4509, 3966, 4501, 4502, 4509,
     4509, 4509, 3959, 3960, 4503, 3961, 4504, 3962, 4505, 4506,
     4509, 4507, 4508, 4509, 3963, 4509, 4509, 4509, 4509, 4509,
     4509, 3964, 3965, 4509, 4509, 4509, 3966, 3969, 3970, 4509,
     3971, 4509, 3972, 4509, 4509, 4509, 4509, 4509, 4509, 3973,
     4509, 4509, 4509, 4509, 4509, 4509, 3974, 3975, 4509, 4509,
     4509, 3976, 4509, 4509, 4509, 4509, 4509, 3969, 3970, 4509,
     3971, 4509, 3972, 4509, 4509, 4509, 4509, 4509, 4509, 3973,
     4509, 4509, 4509, 4509, 4509, 4509, 3974, 3975, 4509, 4509,

     4509, 3976, 4001, 4001, 4509, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4509, 4001, 4001, 4001, 4001, 4001, 4001, 4509,
     4001, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4001, 4001, 4001, 4001, 4001, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4001, 4001, 4001, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4001, 4001, 4062, 4062, 4509, 4062, 4062, 4062,

     4062, 4062, 4062, 4062, 4509, 4062, 4062, 4062, 4062, 4062,
     4062, 4509, 4062, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4062, 4062, 4062, 4062, 4062, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4062, 4062, 4062, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4062, 4062, 4086, 4086, 4509, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4509, 4086, 4086, 4086,

     4086, 4086, 4086, 4509, 4086, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4086, 4086, 4086, 4086, 4086,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4086, 4086, 4086, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4086, 4086, 4105, 4105,
     4509, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4509, 4105,
     4105, 4105, 4105, 4105, 4105, 4509, 4105, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4105, 4105, 4105,
     4105, 4105, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4105, 4105,
     4105, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4105, 4105,
     4106, 4106, 4509, 4106, 4106, 4106, 4106, 4106, 4106, 4106,
     4509, 4106, 4106, 4106, 4106, 4106, 4106, 4509, 4106, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4106,

     4106, 4106, 4106, 4106, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4106, 4106, 4106, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4106, 4106, 4111, 4111, 4509, 4111, 4111, 4111, 4111, 4111,
     4111, 4111, 4509, 4111, 4111, 4111, 4111, 4111, 4111, 4509,
     4111, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4111, 4111, 4111, 4111, 4111, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4111, 4111, 4111, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4111, 4111, 4211, 4211, 4509, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4509, 4211, 4211, 4211, 4211, 4211,
     4211, 4509, 4211, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4211, 4211, 4211, 4211, 4211, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4211, 4211, 4211, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4211, 4211, 4289, 4289, 4509, 4289,
     4289, 4289, 4289, 4289, 4289, 4289, 4509, 4289, 4289, 4289,
     4289, 4289, 4289, 4509, 4289, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4289, 4289, 4289, 4289, 4289,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4289, 4289, 4289, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4289, 4289, 4307, 4307,
     4509, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4509, 4307,
     4307, 4307, 4307, 4307, 4307, 4509, 4307, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4307, 4307, 4307,
     4307, 4307, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4307, 4307,

     4307, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4307, 4307,
     4311, 4311, 4509, 4311, 4311, 4311, 4311, 4311, 4311, 4311,
     4509, 4311, 4311, 4311, 4311, 4311, 4311, 4509, 4311, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4311,
     4311, 4311, 4311, 4311, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4314, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4311, 4311, 4311, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4314, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4311, 4311, 4385, 4385, 4509, 4385, 4385, 4385, 4385, 4385,
     4385, 4385, 4509, 4385, 4385, 4385, 4385, 4385, 4385, 4509,
     4385, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4385, 4385, 4385, 4385, 4385, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4385, 4385, 4385, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4385, 4385, 4400, 4400, 4509, 4400, 4400, 4400,
     4400, 4400, 4400, 4400, 4509, 4400, 4400, 4400, 4400, 4400,
     4400, 4509, 4400, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4400, 4400, 4400, 4400, 4400, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4400, 4400, 4400, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4400, 4400, 4419, 4419, 4509, 4419,
     4419, 4419, 4419, 4419, 4419, 4419, 4509, 4419, 4419, 4419,
     4419, 4419, 4419, 4509, 4419, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4419, 4419, 4419, 4419, 4419,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4419, 4419, 4419, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4419, 4419, 4422, 4422,

     4509, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4509, 4422,
     4422, 4422, 4422, 4422, 4422, 4509, 4422, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4422, 4422, 4422,
     4422, 4422, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4422, 4422,
     4422, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4422, 4422,
     4479, 4479, 4509, 4479, 4479, 4479, 4479, 4479, 4479, 4479,

     4509, 4479, 4479, 4479, 4479, 4479, 4479, 4509, 4479, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4479,
     4479, 4479, 4479, 4479, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4482, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4479, 4479, 4479, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4482, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4479, 4479,   67,   67,   67,   67,   67,   70,   70,   77,
       77,   77,   77,   77,  267, 4509,  267,  267,  267,  365,

      365,  365,  366,  366,  366,  372, 4509,  372,  372,  372,
      465, 4509,  465,  465,  465,  519, 4509,  519,  519,  519,
      576,  576,  576,  576,  576,  627, 4509,  627,  627,  627,
      633, 4509,  633,  633,  633,  635, 4509,  635,  635,  635,
      644, 4509,  644,  644,  644,  662, 4509,  662,  662,  662,
      688, 4509,  688,  688,  688,  755, 4509,  755,  755,  755,
      780, 4509,  780,  780,  780,  815, 4509,  815,  815,  815,
      957, 4509,  957,  957,  957, 1042, 4509, 1042, 1042, 1042,
     1112, 4509, 1112, 1112, 1112, 1187, 4509, 1187, 1187, 1187,
     1199, 4509, 1199, 1199, 1199, 1210, 4509, 1210, 1210, 1210,

     1289, 4509, 1289, 1289, 1289, 1515, 4509, 1515, 1515, 1515,
     1545, 4509, 1545, 1545, 1545, 1559, 4509, 1559, 1559, 1559,
     1572, 4509, 1572, 1572, 1572, 1693, 4509, 1693, 1693, 1693,
     1766, 4509, 1766, 1766, 1766, 1851, 4509, 1851, 1851, 1851,
     1935, 4509, 1935, 1935, 1935, 2029, 4509, 2029, 2029, 2029,
     2089, 4509, 2089, 2089, 2089, 2095, 4509, 2095, 2095, 2095,
     2100, 4509, 2100, 2100, 2100, 2106, 4509, 2106, 2106, 2106,
     2131, 4509, 2131, 2131, 2131, 2192, 4509, 2192, 2192, 2192,
     2204, 4509, 2204, 2204, 2204, 2378, 4509, 2378, 2378, 2378,
     2380, 4509, 2380, 2380, 2380, 2383, 4509, 2383, 2383, 2383,

     2390, 4509, 2390, 2390, 2390, 2392, 4509, 2392, 2392, 2392,
     2395, 4509, 2395, 2395, 2395, 2428, 4509, 2428, 2428, 2428,
     2433, 4509, 2433, 2433, 2433, 2478, 4509, 2478, 2478, 2478,
     2489, 4509, 2489, 2489, 2489, 2741, 4509, 2741, 2741, 2741,
     2746, 4509, 2746, 2746, 2746, 2841, 4509, 2841, 2841, 2841,
     2843, 4509, 2843, 2843, 2843, 2858, 4509, 2858, 2858, 2858,
     2860, 4509, 2860, 2860, 2860, 2868, 4509, 2868, 2868, 2868,
     2870, 4509, 2870, 2870, 2870, 2925, 4509, 2925, 2925, 2925,
     2931, 4509, 2931, 2931, 2931, 3001, 4509, 3001, 3001, 3001,
     3008, 4509, 3008, 3008, 3008, 3033, 4509, 3033, 3033, 3033,

     3044, 4509, 3044, 3044, 3044, 3053, 4509, 3053, 3053, 3053,
     3056, 4509, 3056, 3056, 3056, 3059, 4509, 3059, 3059, 3059,
     3062, 4509, 3062, 3062, 3062, 3106, 4509, 3106, 3106, 3106,
     3111, 4509, 3111, 3111, 3111, 3117, 4509, 3117, 3117, 3117,
     3123, 4509, 3123, 3123, 3123, 3156, 4509, 3156, 3156, 3156,
     3157, 4509, 3157, 3157, 3157, 3163, 4509, 3163, 3163, 3163,
     3164, 4509, 3164, 3164, 3164, 3177, 4509, 3177, 3177, 3177,
     3188, 4509, 3188, 3188, 3188, 3200, 4509, 3200, 3200, 3200,
     3204, 4509, 3204, 3204, 3204, 3207, 4509, 3207, 3207, 3207,
     3211, 4509, 3211, 3211, 3211, 3212, 4509, 3212, 3212, 3212,

     3216, 4509, 3216, 3216, 3216, 3228, 4509, 3228, 3228, 3228,
     3229, 4509, 3229, 3229, 3229, 3293, 4509, 3293, 3293, 3293,
     3301, 4509, 3301, 3301, 3301, 3325, 4509, 3325, 3325, 3325,
     3326, 4509, 3326, 3326, 3326, 3352, 4509, 3352, 3352, 3352,
     3356, 4509, 3356, 3356, 3356, 3367, 4509, 3367, 3367, 3367,
     3368, 4509, 3368, 3368, 3368, 3383, 4509, 3383, 3383, 3383,
     3388, 4509, 3388, 3388, 3388, 3410, 4509, 3410, 3410, 3410,
     3411, 4509, 3411, 3411, 3411, 3414, 4509, 3414, 3414, 3414,
     3421, 4509, 3421, 3421, 3421, 3518, 4509, 3518, 3518, 3518,
     3519, 4509, 3519, 3519, 3519, 3523, 4509, 3523, 3523, 3523,

     3530, 4509, 3530, 3530, 3530, 3536, 4509, 3536, 3536, 3536,
     3538, 4509, 3538, 3538, 3538, 3541, 4509, 3541, 3541, 3541,
     3543, 4509, 3543, 3543, 3543, 3549, 4509, 3549, 3549, 3549,
     3554, 4509, 3554, 3554, 3554, 3555, 4509, 3555, 3555, 3555,
     3559, 4509, 3559, 3559, 3559, 3564, 4509, 3564, 3564, 3564,
     3565, 4509, 3565, 3565, 3565, 3613, 4509, 3613, 3613, 3613,
     3614, 4509, 3614, 3614, 3614, 3649, 4509, 3649, 3649, 3649,
     3650, 4509, 3650, 3650, 3650, 3651, 4509, 3651, 3651, 3651,
     3658, 4509, 3658, 3658, 3658, 3665, 4509, 3665, 3665, 3665,
     3666, 4509, 3666, 3666, 3666, 3667, 4509, 3667, 3667, 3667,

     3674, 4509, 3674, 3674, 3674, 3737, 4509, 3737, 3737, 3737,
     3744, 4509, 3744, 3744, 3744, 3750, 4509, 3750, 3750, 3750,
     3757, 4509, 3757, 3757, 3757, 3769, 4509, 3769, 3769, 3769,
     3770, 4509, 3770, 3770, 3770, 3793, 4509, 3793, 3793, 3793,
     3801, 4509, 3801, 3801, 3801, 3813, 4509, 3813, 3813, 3813,
     3821, 4509, 3821, 3821, 3821, 3864, 4509, 3864, 3864, 3864,
     3873, 4509, 3873, 3873, 3873, 3884, 4509, 3884, 3884, 3884,
     3885, 4509, 3885, 3885, 3885, 3887, 4509, 3887, 3887, 3887,
     3891, 4509, 3891, 3891, 3891, 3892, 4509, 3892, 3892, 3892,
     3894, 4509, 3894, 3894, 3894, 3895, 4509, 3895, 3895, 3895,

     3899, 4509, 3899, 3899, 3899, 3947, 4509, 3947, 3947, 3947,
     3950, 4509, 3950, 3950, 3950, 3954, 4509, 3954, 3954, 3954,
     3957, 4509, 3957, 3957, 3957, 4001, 4509, 4001, 4001, 4001,
     4012, 4509, 4012, 4012, 4012, 4062, 4509, 4062, 4062, 4062,
     4072, 4509, 4072, 4072, 4072, 4086, 4509, 4086, 4086, 4086,
     4095, 4509, 4095, 4095, 4095, 4105, 4509, 4105, 4105, 4105,
     4106, 4509, 4106, 4106, 4106, 4111, 4509, 4111, 4111, 4111,
     4115, 4509, 4115, 4115, 4115, 4116, 4509, 4116, 4116, 4116,
     4121, 4509, 4121, 4121, 4121, 4211, 4509, 4211, 4211, 4211,
     4221, 4509, 4221, 4221, 4221, 4289, 4509, 4289, 4289, 4289,

     4298, 4509, 4298, 4298, 4298, 4307, 4509, 4307, 4307, 4307,
     4309, 4509, 4309, 4309, 4309, 4311, 4509, 4311, 4311, 4311,
     4313, 4509, 4313, 4313, 4313, 4385, 4509, 4385, 4385, 4385,
     4391, 4509, 4391, 4391, 4391, 4400, 4509, 4400, 4400, 4400,
     4406, 4509, 4406, 4406, 4406, 4419, 4509, 4419, 4419, 4419,
     4422, 4509, 4422, 4422, 4422, 4425, 4509, 4425, 4425, 4425,
     4428, 4509, 4428, 4428, 4428, 4479, 4509, 4479, 4479, 4479,
     4481, 4509, 4481, 4481, 4481,    3, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509
    } ;

static yyconst short int yy_chk[14069] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    6,    6,    5,    7,    7,    8,   25,

       25,    8,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   23, 4513,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   29,   29,   29,   33,   29, 3490,
       38,   29,   48,   53,   29,   29,   29,   33,   29,   30,
       36,   29,   29,   29,   36,   30,  194,   30,   63,   57,
      194,   63, 3485,   60,   29,   29,   29,   33,   29,   30,
       38,   29,   48,   53,   29,   29,   29,   33,   29,   30,
       36,   29,   29,   29,   36,   30,   35,   30,   32,   57,
       35,   39,   32,   60,   35,   42,   32,   39,   37,   30,
       31,   37,   32,   35,   31,   32,   35,   31,   37,   42,

       81,   31,   83,   37,   31,   42,   35,   31,   32,   31,
       35,   39,   32, 2767,   35,   42,   32,   39,   37, 2761,
       31,   37,   32,   35,   31,   32,   35,   31,   37,   42,
       81,   31,   83,   37,   31,   42, 2340,   31, 2332,   31,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       41,   40,   43,   85,   50,   34,   40,   40,   41,   49,
       34,   43,   50,   49,   41,   64,   34,  366,   64,   34,
       41,  366,   34,   49,   65,   65,   34,   77,   77, 2180,
       41,   40,   43,   85,   50,   34,   40,   40,   41,   49,
       34,   43,   50,   49,   41, 2085,   34,   45, 1760,   34,

       41,   45,   34,   49,   84, 1208,   34,   44,   44,   44,
       44,   45,   51,   87,   82,   89,   51,   45,   84,   51,
     1207,   44,   92,   93, 1206,   44,   82,   45,   44,   44,
       86,   45,   44,   86,   84,   44,   52,   94,   44, 1033,
     1031,   45,   51,   87,   82,   89,   51,   45,   84,   51,
       52,   44,   92,   93,   52,   44,   82,   52,   44,   44,
       86, 1026,   44,   86,  877,   44,   52,   94,   44,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   95,
       52,   47,   96,   90,   52,   47,   46,   52,   46,   47,
       97,   46,   46,   90,   88,   46,   88,   46,   47,   46,

       98,   47,   99,   46,   46,   47,  876,  875,   46,   95,
      803,   47,   96,   90,  100,   47,   46,  641,   46,   47,
       97,   46,   46,   90,   88,   46,   88,   46,   47,   46,
       98,   47,   99,   46,   46,   47,   59,   58,   46,   58,
       58,   59,   59,  102,  100,  103,  106,   58,  107,  108,
      110,  113,   58,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  621,  576,  621,   59,   58,  621,   58,
       58,   59,   59,  102,  365,  103,  106,   58,  107,  108,
      110,  113,   58,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   75,   91,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  101,  101,  101,  104,  109,
      105,  364,  101,   91,  105,  104,  193,   68,   67,   61,
       56,   28,   26,   24,   91,   20,  109,  105,  114,  115,
       17,  117,  112,  118,  119,  101,  101,  101,  104,  109,
      105,  112,  101,   91,  105,  104,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  109,  105,  114,  115,
      116,  117,  112,  118,  119,  120,  121,  122,  123,  124,
      116,  112,  126,  127,  130,  128,  123,  129,  134,  123,
      121,  128,  138,  129,  132,  132,  127,   13,   10,  139,

      116,    9,    3,    0,    0,  120,  121,  122,  123,  124,
      116,    0,  126,  127,  130,  128,  123,  129,  134,  123,
      121,  128,  138,  129,  132,  132,  127,  131,  131,  139,
      131,  131,  131,  131,  131,  131,  131,  135,  131,  131,
      131,  131,  131,  131,  136,  131,  135,  137,  142,  140,
      135,  141,  141,  143,  136,  146,  131,  131,  131,  131,
      131,    0,  147,    0,  149,  137,  140,  135,    0,  150,
      152,    0,  155,    0,  136,  158,  135,  137,  142,  140,
      135,  141,  141,  143,  136,  146,  161,  131,  131,  131,
      144,  144,  147,  144,  149,  137,  140,  162,  144,  150,

      152,  148,  155,  144,    0,  158,    0,  148,    0,    0,
      148,  164,  168,    0,    0,    0,  161,  131,  131,  169,
      144,  144,  153,  144,  157,  154,  153,  162,  144,  154,
      157,  148,    0,  144,  145,  154,  145,  148,  145,  145,
      148,  164,  168,  156,  145,  145,  145,  165,  160,  169,
      165,  145,  153,  156,  157,  154,  153,  171,    0,  154,
      157,  160,  156,    0,  145,  154,  145,    0,  145,  145,
        0,    0,    0,  156,  145,  145,  145,  165,  160,  174,
      165,  145,  175,  156,    0,  170,    0,  171,  166,  170,
        0,  160,  156,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  163,  163,  166,  167,  172,  177,  174,
      178,  179,  175,  173,  177,  170,  163,  172,  166,  170,
      167,  173,  176,  182,  183,  184,  185,  176,  186,  176,
      187,  188,  180,  163,  163,  166,  167,  172,  177,  181,
      178,  179,  180,  173,  177,    0,  163,  172,  198,  181,
      167,  173,  176,  182,  183,  184,  185,  176,  186,  176,
      187,  188,  180,  191,  189,  199,  201,  202,  204,  181,
      205,  206,  180,  189,  207,  191,    0,    0,  198,  181,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
        0,    0,    0,  191,  189,  199,  201,  202,  204,    0,

      205,  206,    0,  189,  207,  191,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  203,  203,    0,  203,
      203,  203,  203,  203,  203,  203,    0,  203,  203,  203,
      203,  203,  203,  208,  203,  209,  210,  211,  212,    0,
      213,  214,  215,  216,  217,  203,  203,  203,  203,  203,
      218,  219,  220,  221,  222,  223,  203,  213,  221,  203,
      224,  225,  227,  208,  228,  209,  210,  211,  212,  203,
      213,  214,  215,  216,  217,  229,  203,  203,  203,  230,
      218,  219,  220,  221,  222,  223,  203,  213,  221,  203,
      224,  225,  227,  231,  228,  232,  233,  234,  235,  203,

      236,  237,  238,  239,  240,  229,  203,  203,  240,  230,
      241,  242,  244,  245,  246,  243,  247,  248,  238,    0,
      250,  251,  247,  231,  252,  232,  233,  234,  235,  243,
      236,  237,  238,  239,  240,  253,  254,  255,  240,  256,
      241,  242,  244,  245,  246,  243,  247,  248,  238,  249,
      250,  251,  247,  258,  252,  259,  261,  249,    0,  243,
        0,    0,  263,    0,  260,  253,  254,  255,  262,  256,
      264,  265,    0,    0,  266,  260,    0,    0,  262,  249,
      267,  268,  269,  258,  270,  259,  261,  249,  257,  257,
      257,  257,  263,  257,  260,  271,  257,  272,  262,  273,

      264,  265,  257,  257,  266,  260,  257,  257,  262,  257,
      267,  268,  269,    0,  270,    0,    0,    0,  257,  257,
      257,  257,    0,  257,    0,  271,  257,  272,    0,  273,
      275,  276,  257,  257,  277,  279,  257,  257,  280,  257,
      274,  274,    0,  274,  274,  274,  274,  274,  274,  274,
      281,  274,  274,  274,  274,  274,  274,  282,  274,  284,
      275,  276,  286,  283,  277,  279,  283,  287,  280,  274,
      274,  274,  274,  274,  283,  288,  289,  290,  283,  291,
      281,  290,  292,  293,  294,  295,  296,  282,  297,  284,
      298,  299,  286,  283,  298,  300,  283,  287,  303,  304,

      274,  274,  274,  305,  283,  288,  289,  290,  283,  291,
      306,  290,  292,  293,  294,  295,  296,  302,  297,  301,
      298,  299,  308,  307,  298,  300,  309,  301,  303,  304,
      274,  274,  302,  305,  310,  311,  312,  313,  314,  315,
      306,    0,    0,  316,  317,  319,  320,  302,  321,  301,
      322,  323,  308,  307,  324,  325,  309,  301,  307,  326,
      324,  327,  302,  328,  310,  311,  312,  313,  314,  315,
      330,  307,  307,  316,  317,  319,  320,    0,  321,    0,
      322,  323,    0,  307,  324,  325,    0,    0,  307,  326,
      324,  327,  332,  328,  333,  336,    0,  337,  329,  338,

      330,  307,  307,  318,  318,    0,  318,  318,  318,  318,
      318,  318,  318,  329,  318,  318,  318,  318,  318,  318,
      331,  318,  332,  334,  333,  336,  331,  337,  329,  338,
      339,  340,  318,  318,  318,  318,  318,  341,  342,  334,
      343,  344,  345,  329,  346,  347,  318,  349,  350,    0,
      331,  351,  352,  334,  353,  355,  331,  354,  356,    0,
      339,  340,  348,  318,  318,  318,  354,  341,  342,  334,
      343,  344,  345,  357,  346,  347,  318,  349,  350,  348,
      348,  351,  352,  358,  353,  355,  359,  354,  356,  349,
      360,  349,  348,  318,  318,  349,  354,  361,  362,  363,

      367,  369,  370,  357,    0,    0,  373,  349,    0,  348,
      348,  374,    0,  358,  375,  376,  359,  377,  379,  349,
      360,  349,    0,  381,    0,  349,  383,  361,  362,  363,
      367,  369,  370,  371,  371,  371,  373,  385,  371,  371,
      371,  374,  371,  380,  375,  376,  387,  377,  379,  388,
      389,  390,  371,  381,  371,    0,  383,    0,  380,  391,
        0,    0,    0,  371,  371,  371,  392,  385,  371,  371,
      371,  394,  371,  380,    0,  395,  387,  396,  397,  388,
      389,  390,  371,  398,  371,  372,  372,  372,  380,  391,
      372,  372,  372,  399,  372,  400,  392,  401,  401,  402,

      404,  394,  405,  406,  372,  395,  372,  396,  397,  407,
        0,    0,    0,  398,    0,  372,  372,  372,    0,    0,
      372,  372,  372,  399,  372,  400,  410,  401,  401,  402,
      404,  411,  405,  406,  372,  412,  372,  403,  403,  407,
      403,  403,  403,  403,  403,  403,  403,  413,  403,  403,
      403,  403,  403,  403,  414,  403,  410,  415,  417,  418,
      419,  411,  420,  422,  423,  412,  403,  403,  403,  403,
      403,  425,  426,  427,  428,  429,  430,  413,  425,  431,
      433,  434,  435,  436,  414,  437,  438,  415,  417,  418,
      419,  440,  420,  422,  423,  442,    0,  403,  403,  403,

        0,  425,  426,  427,  428,  429,  430,    0,  425,  431,
      433,  434,  435,  436,    0,  437,  438,    0,  441,  444,
        0,  440,  445,    0,  446,  442,  441,  403,  403,  408,
      408,    0,  408,  408,  408,  408,  408,  408,  408,  439,
      408,  408,  408,  408,  408,  408,  443,  408,  441,  444,
      439,  447,  445,  443,  446,  448,  441,  449,  408,  408,
      408,  408,  408,  450,  451,  452,  453,  456,  457,  439,
      458,  461,  462,  460,  463,  464,  443,  465,  466,  467,
      439,  447,  460,  443,  470,  448,  471,  449,  476,  408,
      408,  408,    0,  450,  451,  452,  453,  456,  457,    0,

      458,  461,  462,  460,  463,  464,    0,  465,  466,  467,
      477,  474,  460,  478,  470,  474,  471,  479,  476,  408,
      408,  409,  409,    0,  409,  409,  409,  409,  409,  409,
      409,    0,  409,  409,  409,  409,  409,  409,  473,  409,
      477,  474,    0,  478,  459,  474,  475,  479,  473,  481,
      409,  409,  409,  409,  409,  468,  459,  482,  483,  468,
      468,  409,  459,  475,  484,  468,  485,  486,  473,  487,
      468,  488,  468,  489,  459,  490,  475,  491,  473,  481,
      492,  409,  409,  409,    0,  468,  459,  482,  483,  468,
      468,  409,  459,  475,  484,  468,  485,  486,    0,  487,

      468,  488,  468,  489,  493,  490,  494,  491,  495,  496,
      492,  409,  409,  416,  416,    0,  416,  416,  416,  416,
      416,  416,  416,  497,  416,  416,  416,  416,  416,  416,
      498,  416,  499,  500,  493,  501,  494,  504,  495,  496,
      502,  505,  416,  416,  416,  416,  416,  503,  503,  416,
      506,  416,  507,  497,  502,  508,  509,  510,  512,  513,
      498,  514,  499,  500,  515,  501,  516,  504,  517,    0,
      502,  505,  521,  416,  416,  416,    0,  503,  503,  416,
      506,  416,  507,    0,  502,  508,  509,  510,  512,  513,
        0,  514,    0,    0,  515,  518,  516,  519,  517,  518,

      522,  519,  521,  416,  416,  432,  432,    0,  432,  432,
      432,  432,  432,  432,  432,  523,  432,  432,  432,  432,
      432,  432,  520,  432,  524,  518,  520,  519,  525,  518,
      522,  519,  526,  523,  432,  432,  432,  432,  432,  527,
      529,  520,  531,  532,  533,  523,  534,  535,  536,  537,
      538,  539,  520,  540,  524,  541,  520,  543,  525,  544,
        0,  545,  526,  523,  546,  432,  432,  432,    0,  527,
      529,  520,  531,  532,  533,    0,  534,  535,  536,  537,
      538,  539,    0,  540,  542,  541,  547,  543,  549,  544,
      542,  545,  550,  551,  546,  432,  432,  454,  454,    0,

      454,  454,  454,  454,  454,  454,  454,  552,  454,  454,
      454,  454,  454,  454,  542,  454,  547,  553,  549,  554,
      542,  555,  550,  551,  556,  556,  454,  454,  454,  454,
      454,  557,  558,  559,  560,  561,  563,  552,  564,  565,
      566,  568,  569,  570,  572,  573,  579,  553,  580,  554,
      581,  555,  582,  583,  556,  556,  585,  454,  454,  454,
        0,  557,  558,  559,  560,  561,  563,    0,  564,  565,
      566,  568,  569,  570,  572,  573,  579,    0,  580,  586,
      581,  587,  582,  583,  588,  589,  585,  454,  454,  511,
      511,    0,  511,  511,  511,  511,  511,  511,  511,    0,

      511,  511,  511,  511,  511,  511,  584,  511,  590,  586,
      591,  587,  592,  594,  588,  589,  593,  595,  511,  511,
      511,  511,  511,  584,  596,  511,  597,  511,  598,  511,
      511,  599,  601,  593,  603,  600,  584,  607,  590,  608,
      591,  600,  592,  594,  609,  610,  593,  595,    0,  511,
      511,  511,    0,  584,  596,  511,  597,  511,  598,  511,
      511,  599,  601,  593,  603,  600,    0,  607,  612,  608,
      614,  600,  615,    0,  609,  610,    0,  611,  611,  511,
      511,  528,  528,    0,  528,  528,  528,  528,  528,  528,
      528,    0,  528,  528,  528,  528,  528,  528,  612,  528,

      614,  606,  615,  604,  605,  616,  604,  611,  611,  617,
      528,  528,  528,  528,  528,  604,  605,  606,  613,  618,
      620,  604,  622,  623,  613,  624,  625,  629,  630,  631,
      634,  606,  635,  604,  605,  616,  604,    0,  637,  617,
      638,  528,  528,  528,    0,  604,  605,  606,  613,  618,
      620,  604,  622,  623,  613,  624,  625,  629,  630,  631,
      634,    0,  635,  632,  632,  639,    0,  632,  637,  632,
      638,  528,  528,  562,  562,    0,  562,  562,  562,  562,
      562,  562,  562,  632,  562,  562,  562,  562,  562,  562,
      640,  562,  642,  632,  632,  639,  636,  632,    0,  632,

      645,  646,  562,  562,  562,  562,  562,  647,  633,  633,
      636,  648,  633,  632,  633,  651,  650,  652,  653,  654,
      640,  655,  642,  656,  650,  657,  636,  658,  633,  650,
      645,  646,  659,  562,  562,  562,  661,  647,  633,  633,
      636,  648,  633,    0,  633,  651,  650,  652,  653,  654,
        0,  655,  662,  656,  650,  657,    0,  658,  633,  650,
      663,  664,  659,  562,  562,  626,  661,  665,  626,  667,
      626,  626,  668,  626,  669,  626,  626,  670,  672,  673,
      626,  674,  662,  626,  675,  676,  626,    0,  677,  678,
      663,  664,    0,    0,  679,  626,  680,  665,  626,  667,

      626,  626,  668,  626,  669,  626,  626,  670,  672,  673,
      626,  674,  681,  626,  675,  676,  626,  627,  677,  678,
      627,  682,  627,  627,  679,  627,  680,  627,  627,  683,
      684,  685,  627,  686,  689,  627,  687,  687,  627,    0,
      687,  690,  681,    0,  691,  692,  693,  627,  687,    0,
      627,  682,  627,  627,    0,  627,    0,  627,  627,  683,
      684,  685,  627,  686,  689,  627,  687,  687,  627,  643,
      687,  690,  643,  643,  691,  692,  693,  694,  687,  643,
      695,  696,  697,  688,  688,  699,  643,  688,  643,  698,
      698,  700,  643,  643,    0,  688,  701,    0,    0,  643,

      702,  703,  643,  643,    0,  704,  705,  694,  706,  643,
      695,  696,  697,  688,  688,  699,  643,  688,  643,  698,
      698,  700,  643,  643,  644,  688,  701,  644,  644,  707,
      702,  703,  708,  709,  644,  704,  705,  710,  706,  711,
      712,  644,  713,  644,  714,  715,  716,  644,  644,    0,
        0,  717,    0,    0,  644,    0,    0,  644,  644,  707,
        0,    0,  708,  709,  644,    0,  718,  710,  719,  711,
      712,  644,  713,  644,  714,  715,  716,  644,  644,  660,
      660,  717,  660,  660,  660,  660,  660,  660,  660,  720,
      660,  660,  660,  660,  660,  660,  718,  660,  719,  721,

      722,    0,  723,  724,  725,  726,  727,  728,  660,  660,
      660,  660,  660,  729,  730,  731,  732,  660,  660,  720,
      733,  734,  735,  738,  739,  740,  741,  742,  743,  721,
      722,  660,  723,  724,  725,  726,  727,  728,  744,  660,
      660,  660,    0,  729,  730,  731,  732,  660,  660,    0,
      733,  734,  735,  738,  739,  740,  741,  742,  743,    0,
      747,  660,  748,  749,  750,    0,  752,  753,  744,  660,
      660,  736,  736,    0,  736,  736,  736,  736,  736,  736,
      736,  760,  736,  736,  736,  736,  736,  736,  754,  736,
      747,  754,  748,  749,  750,  751,  752,  753,  761,    0,

      736,  736,  736,  736,  736,  755,  756,  751,  755,  756,
      762,  760,  757,  751,  757,  757,    0,  763,  754,  759,
      756,  754,  759,  764,  766,  751,  758,  759,  761,  758,
        0,  736,  736,  736,  767,  755,  756,  751,  755,  756,
      762,  768,  757,  751,  757,  757,  758,  763,  769,  759,
      756,  770,  759,  764,  766,  765,  758,  759,  771,  758,
      765,  736,  736,  772,  767,  773,  774,  775,  777,  778,
        0,  768,  781,    0,  782,  783,  758,    0,  769,  784,
      785,  770,    0,  788,  789,  765,  790,    0,  771,  784,
      765,  791,  792,  772,    0,  773,  774,  775,  777,  778,

      779,  787,  781,  779,  782,  783,  779,  779,  793,  784,
      785,  787,  779,  788,  789,  779,  790,  787,  779,  784,
      794,  791,  792,  779,  779,    0,  795,  796,    0,  798,
      779,  787,    0,  779,  801,  802,  779,  779,  793,  804,
        0,  787,  779,    0,  805,  779,  806,  787,  779,    0,
      794,  809,  810,  779,  779,  780,  795,  796,  780,  798,
      811,  780,  780,  812,  801,  802,  813,  780,  814,  804,
      780,  815,  814,  780,  805,  815,  806,  816,  780,  780,
        0,  809,  810,    0,    0,  780,    0,    0,  780,    0,
      811,  780,  780,  812,    0,    0,  813,  780,  814,  818,

      780,  815,  814,  780,  819,  815,  820,  816,  780,  780,
      786,  786,    0,  786,  786,  786,  786,  786,  786,  786,
      821,  786,  786,  786,  786,  786,  786,  822,  786,  818,
      823,  824,  825,  826,  819,  827,  820,  828,  829,  786,
      786,  786,  786,  786,  830,  831,  832,  833,  834,  835,
      821,  836,  837,  838,  839,  840,  841,  822,  842,  843,
      823,  824,  825,  826,  844,  827,  845,  828,  829,  846,
      786,  786,  786,  847,  830,  831,  832,  833,  834,  835,
      848,  836,  837,  838,  839,  840,  841,  849,  842,  843,
      850,  851,  852,  853,  844,  854,  845,  855,  856,  846,

      786,  786,  857,  847,  858,  859,  860,  861,    0,    0,
      848,    0,    0,    0,    0,    0,    0,  849,  863,    0,
      850,  851,  852,  853,    0,  854,    0,  855,  856,  864,
      865,  866,  857,  867,  858,  859,  860,  861,  862,  862,
        0,  862,  862,  862,  862,  862,  862,  862,  863,  862,
      862,  862,  862,  862,  862,  870,  862,  871,  872,  864,
      865,  866,  868,  867,  868,  873,  868,  862,  862,  862,
      862,  862,  874,  879,  880,  862,  872,  883,  882,  884,
      885,  886,  887,  888,  862,  870,  889,  871,  872,  882,
      884,  890,  868,  891,  868,  873,  868,  893,  862,  862,

      862,    0,  874,  879,  880,  862,  872,  883,  882,  884,
      885,  886,  887,  888,  862,    0,  889,    0,    0,  882,
      884,  890,  895,  891,  896,  897,  898,  893,  862,  862,
      869,  869,    0,  869,  869,  869,  869,  869,  869,  869,
      892,  869,  869,  869,  869,  869,  869,  894,  869,  899,
      900,  892,  895,  901,  896,  897,  898,  902,  894,  869,
      869,  869,  869,  869,  903,  904,  905,  906,  907,  908,
      892,  909,  910,  911,  912,  913,  914,  894,  915,  899,
      900,  892,  916,  901,  917,  918,  919,  902,  894,  920,
      869,  869,  869,    0,  903,  904,  905,  906,  907,  908,

        0,  909,  910,  911,  912,  913,  914,    0,  915,  921,
        0,  924,  916,  925,  917,  918,  919,  925,  926,  920,
      869,  869,  878,  878,    0,  878,  878,  878,  878,  878,
      878,  878,  927,  878,  878,  878,  878,  878,  878,  921,
      878,  924,  928,  925,  929,  930,  931,  925,  926,  932,
      934,  878,  878,  878,  878,  878,  933,  935,  936,  937,
      933,  938,  927,  939,  940,  941,  943,  944,  945,  946,
      947,  949,  928,  950,  929,  930,  931,  951,  952,  932,
      934,  953,  878,  878,  878,  954,  933,  935,  936,  937,
      933,  938,    0,  939,  940,  941,  943,  944,  945,  946,

      947,  949,    0,  950,    0,  958,  959,  951,  952,  960,
      961,  953,  878,  878,  962,  954,  955,  955,  976,  955,
      955,  955,  955,  955,  955,  955,  966,  955,  955,  955,
      955,  955,  955,  968,  955,  958,  959,  967,  969,  960,
      961,  970,  971,  972,  962,  955,  955,  955,  955,  955,
      973,  974,  967,  975,  977,  978,  966,  979,  980,  981,
      982,  983,  985,  968,  986,  987,  976,  967,  969,  955,
      988,  970,  971,  972,  989,  990,  955,  955,  955,    0,
      973,  974,  967,  975,  977,  978,    0,  979,  980,  981,
      982,  983,  985,  991,  986,  987,  976,    0,  992,  955,

      988,  993,  994,  995,  989,  990,  955,  955,  956,  956,
      996,  997,  998,  956, 1000, 1001,  956, 1002, 1003, 1004,
     1005,  956, 1006,  991,  956, 1007, 1008,  956,  992,    0,
     1009,  993,  994,  995, 1010, 1011,    0, 1012,  956,  956,
      996,  997,  998,  956, 1000, 1001,  956, 1002, 1003, 1004,
     1005,  956, 1006, 1013,  956, 1007, 1008,  956,  957,  957,
     1009, 1014, 1015,  957, 1010, 1011,  957, 1012, 1016, 1017,
     1018,  957, 1019, 1020,  957, 1021, 1022,  957, 1023, 1025,
     1028, 1029, 1032, 1013, 1035, 1037, 1038,    0,  957,  957,
        0, 1014, 1015,  957, 1044, 1045,  957, 1030, 1016, 1017,

     1018,  957, 1019, 1020,  957, 1021, 1022,  957, 1023, 1025,
     1028, 1029, 1032, 1030, 1035, 1037, 1038, 1041, 1042, 1046,
     1043, 1047, 1049, 1051, 1044, 1045, 1048, 1030, 1053, 1041,
     1042, 1054, 1055, 1048, 1056, 1057, 1041, 1042, 1043, 1058,
     1059, 1060, 1061, 1030, 1062, 1064, 1065, 1041, 1042, 1046,
     1043, 1047, 1049, 1051, 1066, 1067, 1048, 1069, 1053, 1041,
     1042, 1054, 1055, 1048, 1056, 1057, 1041, 1042, 1043, 1058,
     1059, 1060, 1061, 1063, 1062, 1064, 1065, 1070, 1071, 1063,
     1072, 1073, 1074, 1075, 1066, 1067, 1076, 1069, 1077, 1078,
     1079, 1080, 1070, 1082, 1083, 1084, 1088, 1074, 1089, 1090,

     1081, 1091, 1092, 1063, 1087, 1093, 1094, 1070, 1071, 1063,
     1072, 1073, 1074, 1075, 1081, 1087, 1076, 1095, 1077, 1078,
     1079, 1080, 1070, 1082, 1083, 1084, 1088, 1074, 1089, 1090,
     1081, 1091, 1092, 1097, 1087, 1093, 1094, 1096, 1098, 1099,
     1100, 1101, 1102, 1103, 1081, 1087, 1104, 1095, 1096, 1105,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1121, 1097, 1122, 1123, 1124, 1096, 1098, 1099,
     1100, 1101, 1102, 1103, 1115,    0, 1104,    0, 1096, 1105,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1121, 1125, 1122, 1123, 1124, 1126, 1127, 1130,

     1134, 1137, 1130, 1138, 1115, 1120, 1139, 1120, 1140, 1120,
     1141, 1142, 1143, 1145, 1148, 1120, 1149, 1150, 1151, 1120,
     1152, 1153, 1120, 1125, 1154, 1120, 1155, 1126, 1127, 1130,
     1134, 1137, 1130, 1138, 1156, 1120, 1139, 1120, 1140, 1120,
     1141, 1142, 1143, 1145, 1148, 1120, 1149, 1150, 1151, 1120,
     1152, 1153, 1120, 1157, 1154, 1120, 1155, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1156, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172,    0,    0, 1175,    0,    0,    0,    0,
        0,    0,    0, 1157,    0,    0,    0, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1176, 1165, 1166, 1167, 1168, 1169,

     1170, 1171, 1172, 1173, 1173, 1175, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1177, 1173, 1173, 1173, 1173, 1173, 1173,
     1178, 1173, 1179, 1180, 1176, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1173, 1173, 1173, 1173, 1173, 1188, 1190, 1191,
     1192, 1194, 1188, 1177, 1195, 1189, 1196, 1197, 1198, 1199,
     1178, 1200, 1179, 1180, 1202, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1189, 1173, 1173, 1173, 1203, 1188, 1190, 1191,
     1192, 1194, 1188, 1204, 1195, 1189, 1196, 1197, 1198, 1199,
        0, 1200,    0,    0, 1202,    0,    0,    0,    0,    0,
        0, 1209, 1189, 1173, 1173, 1210, 1203, 1212, 1213, 1214,

     1215, 1216, 1217, 1204, 1205, 1205,    0, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1218, 1205, 1205, 1205, 1205, 1205,
     1205, 1209, 1205, 1219, 1222, 1210, 1223, 1212, 1213, 1214,
     1215, 1216, 1217, 1205, 1205, 1205, 1205, 1205, 1221, 1221,
     1224, 1225, 1226, 1227, 1218, 1228, 1229, 1230, 1231, 1233,
     1233, 1234, 1235, 1219, 1222, 1236, 1223, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1205, 1205, 1205,    0, 1221, 1221,
     1224, 1225, 1226, 1227,    0, 1228, 1229, 1230, 1231, 1233,
     1233, 1234, 1235, 1244,    0, 1236, 1245, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1205, 1205, 1232, 1232,    0, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1246, 1232, 1232, 1232,
     1232, 1232, 1232, 1244, 1232, 1247, 1245, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1232, 1232, 1232, 1232, 1232,
     1256, 1257, 1258, 1259, 1260, 1261, 1246, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1247, 1270, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1271, 1232, 1232, 1232, 1272,
     1256, 1257, 1258, 1259, 1260, 1261, 1273, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1274, 1270, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1271, 1232, 1232, 1283, 1272,
     1284, 1285, 1286,    0,    0, 1290, 1273,    0, 1291,    0,

     1292, 1293, 1294, 1291, 1295, 1274, 1297, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1296, 1299, 1300, 1283, 1296,
     1284, 1285, 1286, 1288, 1288, 1290, 1301, 1288, 1291, 1288,
     1292, 1293, 1294, 1291, 1295, 1302, 1297, 1298, 1304, 1305,
     1288, 1288, 1298, 1288,    0, 1296, 1299, 1300,    0, 1296,
        0, 1303, 1306, 1288, 1288, 1303, 1301, 1288, 1307, 1288,
     1308,    0,    0, 1309,    0, 1302, 1310, 1298, 1304, 1305,
     1288, 1288, 1298, 1288, 1289, 1289, 1311, 1312, 1289, 1316,
     1289, 1303, 1306, 1313, 1317, 1303, 1318, 1319, 1307, 1322,
     1308, 1289, 1289, 1309, 1289, 1323, 1310, 1324, 1313, 1321,

     1321, 1313, 1325, 1326, 1289, 1289, 1311, 1312, 1289, 1316,
     1289, 1328, 1329, 1313, 1317, 1330, 1318, 1319, 1331, 1322,
     1332, 1289, 1289, 1333, 1289, 1323, 1334, 1324, 1313, 1321,
     1321, 1313, 1325, 1326, 1335, 1336, 1337,    0,    0, 1344,
        0, 1328, 1329,    0,    0, 1330,    0, 1345, 1331,    0,
     1332,    0,    0, 1333, 1347,    0, 1334, 1352, 1353, 1354,
     1355, 1356, 1355, 1357, 1335, 1336, 1337, 1340, 1340, 1344,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1345, 1340, 1340,
     1340, 1340, 1340, 1340, 1347, 1340, 1358, 1352, 1353, 1354,
     1355, 1356, 1355, 1357, 1359, 1360, 1340, 1340, 1340, 1340,

     1340, 1361, 1362, 1363, 1365, 1366, 1367, 1368, 1369, 1370,
     1371, 1372, 1373, 1374, 1374, 1375, 1358, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1359, 1360, 1379, 1340, 1340, 1340,
     1383, 1361, 1362, 1363, 1365, 1366, 1367, 1368, 1369, 1370,
     1371, 1372, 1373, 1374, 1374, 1375, 1384, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1385, 1386, 1379, 1340, 1340, 1387,
     1383, 1389, 1387, 1390, 1392, 1393, 1395, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1384, 1406, 1407, 1408,
     1409,    0,    0,    0, 1385, 1386,    0,    0,    0, 1387,
        0, 1389, 1387, 1390, 1392, 1393, 1395, 1397, 1398, 1399,

     1400, 1401, 1402, 1403, 1404, 1405, 1411, 1406, 1407, 1408,
     1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1421, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1411, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1410,    0,    0, 1434,    0,
        0, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1421, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1439, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1410, 1423, 1423, 1434, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1440, 1423, 1423, 1423,
     1423, 1423, 1423, 1441, 1423, 1442, 1439, 1443, 1445, 1446,

     1447, 1448, 1444, 1449, 1450, 1423, 1423, 1423, 1423, 1423,
     1444, 1454, 1455, 1456, 1457, 1459, 1440, 1460, 1462, 1464,
     1465, 1466, 1467, 1441, 1468, 1442, 1469, 1443, 1445, 1446,
     1447, 1448, 1444, 1449, 1450, 1470, 1423, 1423, 1423, 1471,
     1444, 1454, 1455, 1456, 1457, 1459, 1472, 1460, 1462, 1464,
     1465, 1466, 1467, 1473, 1468, 1474, 1469,    0,    0,    0,
        0,    0,    0,    0,    0, 1470, 1423, 1423, 1476, 1471,
        0, 1478, 1479, 1480, 1481, 1482, 1472, 1483, 1484, 1485,
     1486, 1490, 1491, 1473, 1492, 1474, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1494, 1496, 1497, 1476, 1498,

     1475, 1478, 1479, 1480, 1481, 1482, 1499, 1483, 1484, 1485,
     1486, 1490, 1491, 1501, 1492, 1502, 1504, 1506, 1507, 1508,
     1509, 1511,    0,    0, 1513, 1494, 1496, 1497,    0, 1498,
     1475,    0, 1518,    0,    0,    0, 1499,    0,    0, 1522,
        0,    0, 1525, 1501,    0, 1502, 1504, 1506, 1507, 1508,
     1509, 1511, 1512, 1512, 1513, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1518, 1512, 1512, 1512, 1512, 1512, 1512, 1522,
     1512, 1521, 1525, 1526, 1514, 1527, 1528, 1521, 1514, 1529,
     1514, 1512, 1512, 1512, 1512, 1512, 1514, 1515, 1530, 1531,
     1532, 1515, 1533, 1515, 1535, 1536, 1537, 1538, 1539, 1515,

     1540, 1521, 1541, 1526, 1514, 1527, 1528, 1521, 1514, 1529,
     1514, 1542, 1512, 1512, 1512, 1543, 1514, 1515, 1530, 1531,
     1532, 1515, 1533, 1515, 1535, 1536, 1537, 1538, 1539, 1515,
     1540, 1544, 1541, 1545, 1546, 1547, 1548, 1549, 1550, 1552,
     1553, 1542, 1512, 1512, 1554, 1543, 1555, 1556, 1557, 1544,
     1558, 1545, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
     1567, 1544, 1568, 1545, 1546, 1547, 1548, 1549, 1550, 1552,
     1553, 1569, 1570, 1571, 1554, 1572, 1555, 1556, 1557, 1544,
     1558, 1545, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
     1567, 1573, 1568, 1574, 1575, 1576, 1577, 1578, 1579, 1580,

     1581, 1569, 1570, 1571, 1582, 1572, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1594,    0,    0, 1597,
        0, 1573,    0, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
     1581,    0,    0,    0, 1582,    0, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1594, 1596, 1596, 1597,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1598, 1596, 1596,
     1596, 1596, 1596, 1596, 1599, 1596, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1608, 1609, 1596, 1596, 1596, 1596,
     1596, 1610, 1611, 1612, 1613, 1614, 1615, 1598, 1616, 1617,
     1618, 1619, 1620, 1621, 1599, 1622, 1600, 1601, 1602, 1603,

     1604, 1605, 1606, 1607, 1608, 1609, 1623, 1596, 1596, 1596,
     1625, 1610, 1611, 1612, 1613, 1614, 1615, 1627, 1616, 1617,
     1618, 1619, 1620, 1621, 1628, 1622, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1623, 1596, 1596, 1639,
     1625, 1640, 1641, 1642, 1643, 1644, 1645, 1627, 1646, 1647,
     1648, 1649, 1650, 1651, 1628, 1652, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1653, 1654, 1655, 1639,
     1656, 1640, 1641, 1642, 1643, 1644, 1645, 1657, 1646, 1647,
     1648, 1649, 1650, 1651, 1658, 1652, 1659, 1660, 1661, 1662,
     1665, 1666, 1667, 1668, 1669, 1670, 1653, 1654, 1655, 1671,

     1656, 1672, 1677, 1673, 1678, 1679, 1680, 1657, 1673, 1681,
     1683, 1684, 1685, 1688, 1658, 1689, 1659, 1660, 1661, 1662,
     1665, 1666, 1667, 1668, 1669, 1670, 1692, 1693, 1696, 1671,
     1697, 1672, 1677, 1673, 1678, 1679, 1680, 1698, 1673, 1681,
     1683, 1684, 1685, 1688, 1699, 1689, 1700, 1701,    0,    0,
     1703,    0,    0,    0,    0,    0, 1692, 1693, 1696,    0,
     1697,    0,    0,    0,    0, 1705,    0, 1698, 1708, 1709,
     1710, 1711, 1712, 1714, 1699, 1715, 1700, 1701, 1702, 1702,
     1703, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1716, 1702,
     1702, 1702, 1702, 1702, 1702, 1705, 1702, 1717, 1708, 1709,

     1710, 1711, 1712, 1714, 1718, 1715, 1722, 1702, 1702, 1702,
     1702, 1702, 1723, 1724, 1725, 1726, 1727, 1728, 1716, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1717, 1737, 1738,
     1739, 1740, 1744, 1746, 1718, 1747, 1722, 1748, 1702, 1702,
     1702, 1749, 1723, 1724, 1725, 1726, 1727, 1728, 1750, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1751, 1737, 1738,
     1739, 1740, 1744, 1746, 1752, 1747, 1753, 1748, 1702, 1702,
        0, 1749,    0,    0,    0,    0,    0, 1755, 1750, 1756,
     1757, 1758, 1759, 1761, 1762,    0,    0, 1751, 1768,    0,
        0, 1769, 1770, 1771, 1752, 1772, 1753, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1755, 1774, 1756,
     1757, 1758, 1759, 1761, 1762, 1765, 1766, 1775, 1768, 1765,
     1766, 1769, 1770, 1771, 1776, 1772, 1777, 1765, 1766, 1778,
     1780, 1781, 1782, 1783,    0,    0, 1785,    0, 1774,    0,
        0,    0,    0,    0, 1786, 1765, 1766, 1775,    0, 1765,
     1766, 1787,    0, 1788, 1776, 1789, 1777, 1765, 1766, 1778,
     1780, 1781, 1782, 1783, 1784, 1784, 1785, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1786, 1784, 1784, 1784, 1784, 1784,
     1784, 1787, 1784, 1788, 1791, 1789, 1792, 1793, 1794, 1795,
     1796, 1797, 1798, 1784, 1784, 1784, 1784, 1784, 1800, 1801,

     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1812, 1823,
     1824, 1825, 1826, 1828, 1791, 1830, 1792, 1793, 1794, 1795,
     1796, 1797, 1798, 1833, 1784, 1784, 1784,    0, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1812, 1823,
     1824, 1825, 1826, 1828,    0, 1830, 1834, 1835, 1836, 1837,
     1839, 1840, 1841, 1833, 1784, 1784, 1790, 1790,    0, 1790,
     1790, 1790, 1790, 1790, 1790, 1790, 1842, 1790, 1790, 1790,
     1790, 1790, 1790, 1843, 1790, 1844, 1834, 1835, 1836, 1837,
     1839, 1840, 1841, 1846, 1847, 1790, 1790, 1790, 1790, 1790,
     1848, 1849, 1850, 1851, 1853, 1854, 1842, 1855, 1857, 1856,

     1858, 1859, 1862, 1843, 1863, 1844, 1865, 1866, 1867, 1868,
     1869, 1850, 1851, 1846, 1847, 1856, 1790, 1790, 1790,    0,
     1848, 1849, 1850, 1851, 1853, 1854,    0, 1855, 1857, 1856,
     1858, 1859, 1862,    0, 1863, 1870, 1865, 1866, 1867, 1868,
     1869, 1850, 1851, 1871,    0, 1856, 1790, 1790, 1827, 1827,
        0, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1860, 1827,
     1827, 1827, 1827, 1827, 1827, 1870, 1827, 1872, 1873, 1874,
     1875, 1876, 1877, 1871, 1860, 1878, 1879, 1827, 1827, 1827,
     1827, 1827, 1880, 1881, 1882, 1883, 1884, 1885, 1860, 1886,
     1890, 1891, 1892, 1893, 1894, 1896, 1897, 1872, 1873, 1874,

     1875, 1876, 1877, 1898, 1860, 1878, 1879, 1899, 1827, 1827,
     1827, 1900, 1880, 1881, 1882, 1883, 1884, 1885, 1902, 1886,
     1890, 1891, 1892, 1893, 1894, 1896, 1897, 1903, 1904, 1905,
     1906, 1907,    0, 1898, 1909,    0,    0, 1899, 1827, 1827,
        0, 1900, 1910,    0,    0,    0,    0,    0, 1902, 1911,
        0, 1912, 1913, 1915, 1916, 1917, 1918, 1903, 1904, 1905,
     1906, 1907, 1908, 1908, 1909, 1908, 1908, 1908, 1908, 1908,
     1908, 1908, 1910, 1908, 1908, 1908, 1908, 1908, 1908, 1911,
     1908, 1912, 1913, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1908, 1908, 1908, 1908, 1908, 1923, 1924, 1925, 1926,

     1927, 1928, 1929, 1930, 1931, 1932, 1934, 1936, 1937,    0,
     1938, 1934, 1939, 1940,    0, 1942, 1944, 1919, 1920, 1921,
     1922, 1934, 1908, 1908, 1908, 1934, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1934, 1936, 1937, 1935,
     1938, 1934, 1939, 1940, 1935, 1942, 1944, 1945, 1946, 1947,
     1948, 1934, 1908, 1908, 1935, 1934, 1949, 1951, 1935, 1953,
     1954, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1961, 1935,
     1965, 1966, 1967, 1968, 1935, 1969, 1970, 1945, 1946, 1947,
     1948, 1971, 1972, 1973, 1935, 1974, 1949, 1951, 1935, 1953,
     1954, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1961, 1975,

     1965, 1966, 1967, 1968, 1976, 1969, 1970, 1977, 1978, 1979,
     1980, 1971, 1972, 1973, 1981, 1974, 1982, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1975,
     1995, 1996, 1997, 1999, 1976, 2000, 2001, 1977, 1978, 1979,
     1980, 2002, 2003, 2004, 1981, 2005, 1982, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 2006,
     1995, 1996, 1997, 1999, 2007, 2000, 2001, 2008, 2009, 2011,
     2012, 2002, 2003, 2004, 2014, 2005, 2015, 2017, 2019, 2020,
     2021, 2023, 2024, 2025, 2026, 2027,    0, 2030,    0, 2006,
        0, 2034,    0,    0, 2007,    0, 2037, 2008, 2009, 2011,

     2012, 2038, 2040, 2041, 2014, 2042, 2015, 2017, 2019, 2020,
     2021, 2023, 2024, 2025, 2026, 2027, 2028, 2030, 2028, 2028,
     2029, 2034, 2029, 2029, 2043, 2028, 2037, 2044, 2046, 2029,
     2049, 2038, 2040, 2041, 2028, 2042, 2052, 2053, 2029, 2055,
     2028, 2057, 2058, 2054, 2029, 2059, 2028, 2061, 2028, 2028,
     2029, 2062, 2029, 2029, 2043, 2028, 2063, 2044, 2046, 2029,
     2049, 2054, 2064, 2065, 2028, 2066, 2052, 2053, 2029, 2055,
     2028, 2057, 2058, 2054, 2029, 2059, 2067, 2061, 2068, 2069,
     2070, 2062, 2071, 2072, 2073, 2074, 2063, 2075, 2075, 2076,
     2077, 2054, 2064, 2065, 2078, 2066, 2079, 2080, 2081, 2082,

     2083, 2084, 2086, 2088, 2090, 2092, 2067, 2089, 2068, 2069,
     2070, 2089, 2071, 2072, 2073, 2074, 2094, 2075, 2075, 2076,
     2077, 2095, 2097, 2098, 2078, 2099, 2079, 2080, 2081, 2082,
     2083, 2084, 2086, 2088, 2090, 2092, 2100, 2089, 2101, 2103,
     2100, 2089,    0, 2105,    0,    0, 2094,    0,    0,    0,
        0, 2095, 2097, 2098,    0, 2099,    0,    0, 2106,    0,
     2108, 2109, 2110, 2112, 2113, 2114, 2100, 2116, 2101, 2103,
     2100, 2102, 2102, 2105, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2117, 2102, 2102, 2102, 2102, 2102, 2102, 2106, 2102,
     2108, 2109, 2110, 2112, 2113, 2114, 2118, 2116, 2119, 2120,

     2102, 2102, 2102, 2102, 2102, 2121, 2122, 2123, 2125, 2124,
     2126, 2117, 2127, 2129, 2134, 2136, 2137, 2138, 2140, 2142,
     2143, 2144, 2146, 2148, 2150, 2149, 2118, 2124, 2119, 2120,
     2149, 2102, 2102, 2102,    0, 2121, 2122, 2123, 2125, 2124,
     2126,    0, 2127, 2129, 2134, 2136, 2137, 2138, 2140, 2142,
     2143, 2144, 2146, 2148, 2150, 2149, 2152, 2124,    0,    0,
     2149, 2102, 2102, 2104, 2104,    0, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2153, 2104, 2104, 2104, 2104, 2104, 2104,
     2130, 2104, 2131, 2151, 2154, 2155, 2152, 2156, 2151, 2130,
     2157, 2131, 2104, 2104, 2104, 2104, 2104, 2130, 2158, 2131,

     2159, 2160, 2130, 2153, 2131, 2161, 2162, 2164, 2165, 2166,
     2130, 2167, 2131, 2151, 2154, 2155, 2168, 2156, 2151, 2130,
     2157, 2131, 2170, 2104, 2104, 2104,    0, 2130, 2158, 2131,
     2159, 2160, 2130,    0, 2131, 2161, 2162, 2164, 2165, 2166,
        0, 2167, 2172,    0, 2173, 2174, 2168, 2176, 2177, 2178,
     2181, 2182, 2170, 2104, 2104, 2107, 2107,    0, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2183, 2107, 2107, 2107, 2107,
     2107, 2107, 2172, 2107, 2173, 2174, 2184, 2176, 2177, 2178,
     2181, 2182, 2185, 2186, 2107, 2107, 2107, 2107, 2107, 2187,
     2188, 2189, 2190, 2191, 2192, 2183, 2193, 2195, 2196, 2197,

     2199, 2200, 2201, 2202, 2203, 2204, 2184, 2205, 2207, 2208,
     2209, 2211, 2185, 2186, 2212, 2107, 2107, 2107,    0, 2187,
     2188, 2189, 2190, 2191, 2192,    0, 2193, 2195, 2196, 2197,
     2199, 2200, 2201, 2202, 2203, 2204, 2213, 2205, 2207, 2208,
     2209, 2211, 2214, 2215, 2212, 2107, 2107, 2145, 2145,    0,
     2145, 2145, 2145, 2145, 2145, 2145, 2145, 2216, 2145, 2145,
     2145, 2145, 2145, 2145, 2217, 2145, 2213, 2218, 2219, 2220,
     2221, 2222, 2214, 2215, 2223, 2224, 2145, 2145, 2145, 2145,
     2145, 2225, 2226, 2227, 2228, 2229, 2230, 2216, 2231, 2232,
     2233, 2234, 2235, 2236, 2217, 2237, 2238, 2218, 2219, 2220,

     2221, 2222, 2239, 2240, 2223, 2224, 2241, 2145, 2145, 2145,
        0, 2225, 2226, 2227, 2228, 2229, 2230,    0, 2231, 2232,
     2233, 2234, 2235, 2236,    0, 2237, 2238,    0, 2242, 2243,
     2244, 2245, 2239, 2240, 2246, 2247, 2241, 2145, 2145, 2206,
     2206,    0, 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2248,
     2206, 2206, 2206, 2206, 2206, 2206, 2249, 2206, 2242, 2243,
     2244, 2245, 2250, 2251, 2246, 2247, 2252, 2253, 2206, 2206,
     2206, 2206, 2206, 2254, 2256, 2257, 2258, 2259, 2260, 2248,
     2261, 2262, 2263, 2264, 2265, 2266, 2249, 2267, 2268, 2269,
     2270, 2271, 2250, 2251, 2272, 2274, 2252, 2253, 2275, 2206,

     2206, 2206, 2277, 2254, 2256, 2257, 2258, 2259, 2260, 2279,
     2261, 2262, 2263, 2264, 2265, 2266, 2280, 2267, 2268, 2269,
     2270, 2271, 2281, 2282, 2272, 2274, 2283, 2284, 2275, 2206,
     2206, 2286, 2277, 2288, 2289, 2290, 2291, 2293, 2295, 2279,
     2296, 2299, 2300, 2301, 2302, 2303, 2280, 2304, 2305, 2307,
     2308, 2309, 2281, 2282, 2310, 2311, 2283, 2284, 2312, 2313,
     2314, 2286, 2315, 2288, 2289, 2290, 2291, 2293, 2295, 2316,
     2296, 2299, 2300, 2301, 2302, 2303, 2317, 2304, 2305, 2307,
     2308, 2309, 2318, 2319, 2310, 2311, 2320, 2321, 2312, 2313,
     2314, 2322, 2315, 2323, 2324, 2325, 2326, 2327, 2328, 2316,

     2330, 2331, 2334, 2336, 2337, 2341, 2317, 2342, 2343, 2345,
     2347, 2348, 2318, 2319, 2349, 2350, 2320, 2321, 2351, 2352,
     2353, 2322, 2355, 2323, 2324, 2325, 2326, 2327, 2328, 2356,
     2330, 2331, 2334, 2336, 2337, 2341, 2357, 2342, 2343, 2345,
     2347, 2348, 2358, 2360, 2349, 2350, 2363, 2365, 2351, 2352,
     2353, 2366, 2355, 2367, 2368, 2369, 2370, 2371, 2373, 2356,
     2372, 2372, 2374, 2375, 2376, 2377, 2357, 2378, 2379, 2380,
     2381, 2382, 2358, 2360, 2384, 2383, 2363, 2365, 2383, 2385,
     2386, 2366, 2387, 2367, 2368, 2369, 2370, 2371, 2373, 2388,
     2372, 2372, 2374, 2375, 2376, 2377, 2389, 2378, 2379, 2380,

     2381, 2382, 2390, 2391, 2384, 2383, 2392, 2393, 2383, 2385,
     2386, 2394, 2387, 2395, 2396, 2397, 2395, 2398, 2399, 2388,
     2400, 2401, 2402, 2406, 2407, 2408, 2389, 2409, 2410, 2411,
     2412, 2414, 2390, 2391, 2415, 2416, 2392, 2393, 2417, 2418,
     2419, 2394, 2420, 2395, 2396, 2397, 2395, 2398, 2399, 2421,
     2400, 2401, 2402, 2406, 2407, 2408, 2422, 2409, 2410, 2411,
     2412, 2414, 2423, 2424, 2415, 2416, 2425, 2426, 2417, 2418,
     2419, 2427, 2420, 2430, 2431, 2428, 2432, 2435, 2436, 2421,
     2437, 2428, 2438, 2433, 2439, 2440, 2422, 2441, 2442, 2433,
     2444, 2447, 2423, 2424, 2428, 2449, 2425, 2426, 2452, 2453,

     2454, 2427, 2433, 2430, 2431, 2428, 2432, 2435, 2436, 2457,
     2437, 2428, 2438, 2433, 2439, 2440, 2458, 2441, 2442, 2433,
     2444, 2447, 2459, 2460, 2428, 2449, 2461, 2466, 2452, 2453,
     2454, 2467, 2433, 2468, 2469, 2470, 2471, 2472, 2473, 2457,
     2475, 2476, 2477, 2478, 2479, 2480, 2458, 2481, 2482, 2484,
     2486, 2487, 2459, 2460, 2488, 2489, 2461, 2466, 2490, 2491,
     2492, 2467, 2493, 2468, 2469, 2470, 2471, 2472, 2473, 2495,
     2475, 2476, 2477, 2478, 2479, 2480, 2497, 2481, 2482, 2484,
     2486, 2487, 2499, 2500, 2488, 2489, 2501, 2502, 2490, 2491,
     2492,    0, 2493,    0,    0,    0,    0,    0, 2504, 2495,

        0,    0,    0,    0,    0, 2505, 2497, 2506, 2507, 2510,
     2511, 2512, 2499, 2500, 2513, 2514, 2501, 2502, 2503, 2503,
        0, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2504, 2503,
     2503, 2503, 2503, 2503, 2503, 2505, 2503, 2506, 2507, 2510,
     2511, 2512, 2515, 2516, 2513, 2514, 2517, 2503, 2503, 2503,
     2503, 2503, 2518, 2519, 2521, 2522, 2523, 2524, 2525, 2526,
     2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2537, 2538,
     2539, 2541, 2515, 2516, 2542, 2543, 2517, 2544, 2503, 2503,
     2503, 2546, 2518, 2519, 2521, 2522, 2523, 2524, 2525, 2526,
     2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2537, 2538,

     2539, 2541, 2548, 2549, 2542, 2543, 2550, 2544, 2503, 2503,
     2551, 2546, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2572, 2573, 2548, 2549, 2574, 2575, 2550, 2577, 2578, 2579,
     2551, 2580, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2572, 2573, 2581, 2582, 2574, 2575, 2585, 2577, 2578, 2579,
     2586, 2580, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594,
     2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2602, 2603,
     2604, 2607, 2581, 2582, 2606, 2606, 2585, 2608, 2610, 2613,

     2586,    0, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594,
     2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2602, 2603,
     2604, 2607, 2615, 2616, 2606, 2606, 2621, 2608, 2610, 2613,
     2614, 2614,    0, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
        0, 2614, 2614, 2614, 2614, 2614, 2614,    0, 2614,    0,
        0,    0, 2615, 2616, 2623, 2624, 2621, 2627, 2633, 2614,
     2614, 2614, 2614, 2614, 2617, 2617, 2617, 2617, 2617, 2617,
     2617, 2617, 2617, 2617, 2618, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2623, 2624, 2634, 2627, 2633, 2635,
     2614, 2614, 2614, 2636, 2638, 2640, 2642, 2643, 2617, 2644,

     2645, 2648, 2649, 2651, 2653, 2655, 2656, 2657, 2618,    0,
        0, 2658,    0,    0,    0,    0, 2634,    0,    0, 2635,
     2614, 2614,    0, 2636, 2638, 2640, 2642, 2643, 2617, 2644,
     2645, 2648, 2649, 2651, 2653, 2655, 2656, 2657, 2618, 2650,
     2650, 2658, 2650, 2650, 2650, 2650, 2650, 2650, 2650, 2662,
     2650, 2650, 2650, 2650, 2650, 2650, 2663, 2650, 2664, 2665,
     2666, 2667, 2669, 2670, 2671, 2672, 2674, 2675, 2650, 2650,
     2650, 2650, 2650, 2676, 2677, 2678, 2679, 2680, 2681, 2662,
     2682, 2683, 2685, 2686, 2687, 2688, 2663, 2691, 2664, 2665,
     2666, 2667, 2669, 2670, 2671, 2672, 2674, 2675, 2692, 2650,

     2650, 2650,    0, 2676, 2677, 2678, 2679, 2680, 2681,    0,
     2682, 2683, 2685, 2686, 2687, 2688,    0, 2691, 2693,    0,
     2694, 2696, 2697, 2698, 2699, 2700, 2701, 2703, 2692, 2650,
     2650, 2652, 2652,    0, 2652, 2652, 2652, 2652, 2652, 2652,
     2652, 2705, 2652, 2652, 2652, 2652, 2652, 2652, 2693, 2652,
     2694, 2696, 2697, 2698, 2699, 2700, 2701, 2703, 2707, 2708,
     2652, 2652, 2652, 2652, 2652, 2711, 2714, 2715, 2717, 2719,
     2720, 2705, 2721, 2723, 2724, 2725, 2726, 2730, 2732, 2733,
     2734, 2735, 2739, 2740, 2742, 2743, 2745, 2747, 2707, 2708,
     2748, 2652, 2652, 2652,    0, 2711, 2714, 2715, 2717, 2719,

     2720,    0, 2721, 2723, 2724, 2725, 2726, 2730, 2732, 2733,
     2734, 2735, 2739, 2740, 2742, 2743, 2745, 2747,    0, 2750,
     2748, 2652, 2652, 2737, 2737,    0, 2737, 2737, 2737, 2737,
     2737, 2737, 2737, 2751, 2737, 2737, 2737, 2737, 2737, 2737,
     2741, 2737, 2746, 2752, 2753, 2754, 2755, 2756, 2741, 2750,
     2746, 2757, 2737, 2737, 2737, 2737, 2737, 2758, 2741, 2759,
     2746, 2760, 2762, 2751, 2763, 2764, 2765, 2766, 2768, 2769,
     2741, 2770, 2746, 2752, 2753, 2754, 2755, 2756, 2741, 2771,
     2746, 2757, 2773, 2737, 2737, 2737, 2774, 2758, 2741, 2759,
     2746, 2760, 2762, 2775, 2763, 2764, 2765, 2766, 2768, 2769,

     2776, 2770, 2778, 2780, 2781, 2782, 2783, 2785, 2786, 2771,
     2787, 2788, 2773, 2737, 2737, 2789, 2774, 2790, 2791, 2792,
     2793, 2794, 2795, 2775, 2796, 2797, 2798, 2799, 2800, 2801,
     2776, 2802, 2778, 2780, 2781, 2782, 2783, 2785, 2786, 2803,
     2787, 2788, 2804, 2808, 2809, 2789, 2810, 2790, 2791, 2792,
     2793, 2794, 2795, 2811, 2796, 2797, 2798, 2799, 2800, 2801,
     2815, 2802, 2817, 2818, 2819, 2820, 2821, 2822,    0, 2803,
     2824,    0, 2804, 2808, 2809,    0, 2810,    0, 2825,    0,
        0,    0,    0, 2811,    0, 2826,    0, 2827, 2828, 2830,
     2815, 2831, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2823,

     2824, 2823, 2823, 2823, 2823, 2823, 2823, 2823, 2825, 2823,
     2823, 2823, 2823, 2823, 2823, 2826, 2823, 2827, 2828, 2830,
     2835, 2831, 2840, 2841, 2843, 2845, 2847, 2823, 2823, 2823,
     2823, 2823,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2823,    0,    0,    0,    0,    0,    0,    0,    0,
     2835,    0, 2840, 2841, 2843, 2845, 2847, 2849, 2823, 2823,
     2823, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846,
     2846, 2823, 2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848,
     2848, 2848, 2851, 2854, 2856, 2857, 2858, 2849, 2823, 2823,
     2859, 2860, 2861, 2863, 2864, 2860, 2865, 2866, 2867, 2868,

     2869, 2870, 2871, 2873, 2874, 2870,    0,    0, 2875,    0,
        0,    0, 2851, 2854, 2856, 2857, 2858,    0,    0,    0,
     2859, 2860, 2861, 2863, 2864, 2860, 2865, 2866, 2867, 2868,
     2869, 2870, 2871, 2873, 2874, 2870, 2872, 2872, 2875, 2872,
     2872, 2872, 2872, 2872, 2872, 2872, 2876, 2872, 2872, 2872,
     2872, 2872, 2872, 2877, 2872, 2880, 2881, 2884, 2886, 2887,
     2888, 2889, 2891, 2893, 2895, 2872, 2872, 2872, 2872, 2872,
     2896, 2897, 2898, 2899, 2900, 2901, 2876, 2902, 2903, 2904,
     2905, 2906, 2907, 2877, 2908, 2880, 2881, 2884, 2886, 2887,
     2888, 2889, 2891, 2893, 2895, 2909, 2872, 2872, 2872,    0,

     2896, 2897, 2898, 2899, 2900, 2901,    0, 2902, 2903, 2904,
     2905, 2906, 2907,    0, 2908, 2910,    0, 2911, 2912, 2914,
     2915, 2916, 2917, 2918, 2919, 2909, 2872, 2872, 2890, 2890,
        0, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2920, 2890,
     2890, 2890, 2890, 2890, 2890, 2910, 2890, 2911, 2912, 2914,
     2915, 2916, 2917, 2918, 2919, 2921, 2922, 2890, 2890, 2890,
     2890, 2890, 2923, 2924, 2925, 2926, 2927, 2928, 2920, 2929,
     2930, 2890, 2931, 2933, 2934, 2935, 2936, 2937, 2940, 2941,
     2942, 2943, 2948, 2952, 2954, 2921, 2922, 2958, 2890, 2890,
     2890,    0, 2923, 2924, 2925, 2926, 2927, 2928,    0, 2929,

     2930, 2890, 2931, 2933, 2934, 2935, 2936, 2937, 2940, 2941,
     2942, 2943, 2948, 2952, 2954,    0, 2959, 2958, 2890, 2890,
     2892, 2892,    0, 2892, 2892, 2892, 2892, 2892, 2892, 2892,
     2960, 2892, 2892, 2892, 2892, 2892, 2892, 2956, 2892, 2962,
     2964, 2965, 2966, 2967, 2969, 2956, 2959, 2962, 2971, 2892,
     2892, 2892, 2892, 2892, 2972, 2973, 2974, 2975, 2976, 2977,
     2960, 2978, 2979, 2892, 2980, 2982, 2983, 2956, 2985, 2962,
     2964, 2965, 2966, 2967, 2969, 2956, 2986, 2962, 2971, 2987,
     2892, 2892, 2892,    0, 2972, 2973, 2974, 2975, 2976, 2977,
        0, 2978, 2979, 2892, 2980, 2982, 2983,    0, 2985, 2989,

        0, 2990, 2992, 2993, 2996, 2997, 2986, 2998, 2999, 2987,
     2892, 2892, 2944, 2944,    0, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 3000, 2944, 2944, 2944, 2944, 2944, 2944, 2989,
     2944, 2990, 2992, 2993, 2996, 2997, 3001, 2998, 2999, 3002,
     3003, 2944, 2944, 2944, 2944, 2944, 3006, 3007, 3008, 3009,
     3010, 3013, 3000, 3002, 3014, 3019, 3020, 3021, 3022, 3023,
     3027, 3028, 3029, 3009, 3030, 3031, 3001, 3033, 3033, 3002,
     3003, 3034, 2944, 2944, 2944,    0, 3006, 3007, 3008, 3009,
     3010, 3013,    0, 3002, 3014, 3019, 3020, 3021, 3022, 3023,
     3027, 3028, 3029, 3009, 3030, 3031, 3035, 3033, 3033, 3036,

     3038, 3034, 2944, 2944, 2963, 2963,    0, 2963, 2963, 2963,
     2963, 2963, 2963, 2963, 3039, 2963, 2963, 2963, 2963, 2963,
     2963, 3040, 2963, 3041, 3042, 3045, 3035, 3044, 3044, 3036,
     3038, 3046, 3047, 2963, 2963, 2963, 2963, 2963, 3048, 3049,
     3051, 3052, 3053, 3056, 3039, 3054, 3059, 3056, 3062, 3060,
     3067, 3040, 3062, 3041, 3042, 3045, 3068, 3044, 3044, 3054,
     3069, 3046, 3047, 3060, 2963, 2963, 2963,    0, 3048, 3049,
     3051, 3052, 3053, 3056,    0, 3054, 3059, 3056, 3062, 3060,
     3067,    0, 3062, 3071,    0,    0, 3068, 3057, 3072, 3054,
     3069, 3057, 3073, 3060, 2963, 2963, 3011, 3011,    0, 3011,

     3011, 3011, 3011, 3011, 3011, 3011, 3057, 3011, 3011, 3011,
     3011, 3011, 3011, 3071, 3011, 3063, 3074, 3057, 3072, 3063,
     3075, 3057, 3073, 3076, 3077, 3011, 3011, 3011, 3011, 3011,
     3078, 3079, 3082, 3083, 3063, 3087, 3057, 3088, 3090, 3091,
     3092, 3093, 3094, 3096, 3097, 3063, 3074, 3098, 3099, 3063,
     3075, 3100, 3101, 3076, 3077, 3102, 3011, 3011, 3011,    0,
     3078, 3079, 3082, 3083, 3063, 3087,    0, 3088, 3090, 3091,
     3092, 3093, 3094, 3096, 3097, 3103,    0, 3098, 3099, 3104,
     3105, 3100, 3101, 3106, 3107, 3102, 3011, 3011, 3012, 3012,
        0, 3012, 3012, 3012, 3012, 3012, 3012, 3012, 3108, 3012,

     3012, 3012, 3012, 3012, 3012, 3103, 3012, 3109, 3110, 3104,
     3105, 3111, 3115, 3106, 3107, 3116, 3118, 3012, 3012, 3012,
     3012, 3012, 3121, 3122, 3117, 3123, 3124, 3127, 3108, 3117,
     3123, 3128, 3129, 3131, 3132, 3133, 3135, 3109, 3110, 3117,
     3123, 3111, 3115, 3117, 3123, 3116, 3118, 3136, 3012, 3012,
     3012,    0, 3121, 3122, 3117, 3123, 3124, 3127,    0, 3117,
     3123, 3128, 3129, 3131, 3132, 3133, 3135, 3137,    0, 3117,
     3123, 3138, 3139, 3117, 3123, 3140, 3142, 3136, 3012, 3012,
     3043, 3043,    0, 3043, 3043, 3043, 3043, 3043, 3043, 3043,
     3143, 3043, 3043, 3043, 3043, 3043, 3043, 3137, 3043, 3144,

     3145, 3138, 3139, 3147, 3149, 3140, 3142, 3150, 3151, 3043,
     3043, 3043, 3043, 3043, 3153, 3154, 3155, 3156, 3157, 3159,
     3143, 3156, 3160, 3161, 3162, 3164, 3166, 3163, 3167, 3144,
     3145, 3163, 3168, 3147, 3149, 3170, 3171, 3150, 3151, 3173,
     3043, 3043, 3043,    0, 3153, 3154, 3155, 3156, 3157, 3159,
        0, 3156, 3160, 3161, 3162, 3164, 3166, 3163, 3167, 3174,
        0, 3163, 3168, 3175, 3176, 3170, 3171, 3177, 3177, 3173,
     3043, 3043, 3061, 3061,    0, 3061, 3061, 3061, 3061, 3061,
     3061, 3061, 3180, 3061, 3061, 3061, 3061, 3061, 3061, 3174,
     3061, 3181, 3182, 3175, 3176, 3184, 3185, 3177, 3177, 3186,

     3187, 3061, 3061, 3061, 3061, 3061, 3188, 3188, 3191, 3192,
     3193, 3198, 3180, 3199, 3201, 3202, 3203, 3205, 3206, 3204,
     3208, 3181, 3182, 3204, 3209, 3184, 3185, 3210, 3212, 3186,
     3187, 3213, 3061, 3061, 3061,    0, 3188, 3188, 3191, 3192,
     3193, 3198,    0, 3199, 3201, 3202, 3203, 3205, 3206, 3204,
     3208, 3211,    0, 3204, 3209, 3211,    0, 3210, 3212, 3214,
        0, 3213, 3061, 3061, 3064, 3064,    0, 3064, 3064, 3064,
     3064, 3064, 3064, 3064, 3216, 3064, 3064, 3064, 3064, 3064,
     3064, 3211, 3064, 3217, 3218, 3211, 3200, 3207, 3220, 3214,
     3200, 3207, 3221, 3064, 3064, 3064, 3064, 3064, 3200, 3207,

     3222, 3223, 3224, 3225, 3216, 3226, 3227, 3228, 3229, 3200,
     3207, 3232, 3233, 3217, 3218, 3234, 3200, 3207, 3220, 3235,
     3200, 3207, 3221, 3236, 3064, 3064, 3064,    0, 3200, 3207,
     3222, 3223, 3224, 3225,    0, 3226, 3227, 3228, 3229, 3200,
     3207, 3232, 3233, 3237,    0, 3234, 3238, 3239, 3240, 3235,
     3241, 3242, 3243, 3236, 3064, 3064, 3070, 3070,    0, 3070,
     3070, 3070, 3070, 3070, 3070, 3070, 3244, 3070, 3070, 3070,
     3070, 3070, 3070, 3237, 3070, 3245, 3238, 3239, 3240, 3247,
     3241, 3242, 3243, 3248, 3249, 3070, 3070, 3070, 3070, 3070,
     3250, 3252, 3253, 3255, 3256, 3257, 3244, 3258, 3259, 3260,

     3262, 3263, 3264, 3265, 3266, 3245, 3267, 3268, 3269, 3247,
     3270, 3272, 3273, 3248, 3249, 3275, 3070, 3070, 3070,    0,
     3250, 3252, 3253, 3255, 3256, 3257,    0, 3258, 3259, 3260,
     3262, 3263, 3264, 3265, 3266, 3279, 3267, 3268, 3269, 3287,
     3270, 3272, 3273, 3288, 3290, 3275, 3070, 3070, 3086, 3086,
        0, 3086, 3086, 3086, 3086, 3086, 3086, 3086, 3291, 3086,
     3086, 3086, 3086, 3086, 3086, 3279, 3086, 3292, 3293, 3287,
     3295, 3296, 3298, 3288, 3290, 3299, 3300, 3086, 3086, 3086,
     3086, 3086, 3301, 3303, 3304, 3306, 3307, 3308, 3291, 3309,
     3310, 3313, 3314, 3315, 3316, 3317, 3318, 3292, 3293, 3319,

     3295, 3296, 3298, 3322, 3323, 3299, 3300, 3324, 3086, 3086,
     3086,    0, 3301, 3303, 3304, 3306, 3307, 3308,    0, 3309,
     3310, 3313, 3314, 3315, 3316, 3317, 3318, 3325,    0, 3319,
     3326, 3327, 3328, 3322, 3323, 3329, 3330, 3324, 3086, 3086,
     3165, 3165,    0, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
     3331, 3165, 3165, 3165, 3165, 3165, 3165, 3325, 3165, 3333,
     3326, 3327, 3328, 3334, 3335, 3329, 3330, 3336, 3337, 3165,
     3165, 3165, 3165, 3165, 3338, 3339, 3340, 3341, 3342, 3344,
     3331, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3333,
     3353, 3354, 3355, 3334, 3335, 3356, 3357, 3336, 3337, 3358,

     3165, 3165, 3165,    0, 3338, 3339, 3340, 3341, 3342, 3344,
        0, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3359,
     3353, 3354, 3355, 3360, 3361, 3356, 3357, 3362, 3363, 3358,
     3165, 3165, 3195, 3195,    0, 3195, 3195, 3195, 3195, 3195,
     3195, 3195, 3364, 3195, 3195, 3195, 3195, 3195, 3195, 3359,
     3195, 3365, 3366, 3360, 3361, 3367, 3368, 3362, 3363, 3369,
     3370, 3195, 3195, 3195, 3195, 3195, 3371, 3372, 3373, 3374,
     3375, 3376, 3364, 3377, 3378, 3379, 3380, 3381, 3382, 3383,
     3384, 3365, 3366, 3385, 3386, 3367, 3368, 3387, 3388, 3369,
     3370, 3389, 3195, 3195, 3195,    0, 3371, 3372, 3373, 3374,

     3375, 3376,    0, 3377, 3378, 3379, 3380, 3381, 3382, 3383,
     3384, 3391,    0, 3385, 3386, 3392, 3393, 3387, 3388, 3394,
     3397, 3389, 3195, 3195, 3219, 3219,    0, 3219, 3219, 3219,
     3219, 3219, 3219, 3219, 3398, 3219, 3219, 3219, 3219, 3219,
     3219, 3391, 3219, 3399, 3400, 3392, 3393, 3402, 3403, 3394,
     3397, 3404, 3406, 3219, 3219, 3219, 3219, 3219, 3410, 3411,
     3412, 3414, 3415, 3416, 3398, 3417, 3418, 3419, 3421, 3422,
     3423, 3424, 3425, 3399, 3400, 3432, 3434, 3402, 3403, 3435,
     3439, 3404, 3406, 3441, 3219, 3219, 3219,    0, 3410, 3411,
     3412, 3414, 3415, 3416,    0, 3417, 3418, 3419, 3421, 3422,

     3423, 3424, 3425, 3442,    0, 3432, 3434, 3443, 3444, 3435,
     3439, 3445, 3447, 3441, 3219, 3219, 3231, 3231,    0, 3231,
     3231, 3231, 3231, 3231, 3231, 3231, 3448, 3231, 3231, 3231,
     3231, 3231, 3231, 3442, 3231, 3449, 3450, 3443, 3444, 3453,
     3454, 3445, 3447, 3455, 3457, 3231, 3231, 3231, 3231, 3231,
     3458, 3459, 3460, 3463, 3464, 3465, 3448, 3466, 3467, 3468,
     3469, 3470, 3471, 3472, 3467, 3449, 3450, 3473, 3471, 3453,
     3454, 3474, 3476, 3455, 3457, 3477, 3231, 3231, 3231,    0,
     3458, 3459, 3460, 3463, 3464, 3465,    0, 3466, 3467, 3468,
     3469, 3470, 3471, 3472, 3467, 3481,    0, 3473, 3471, 3482,

     3483, 3474, 3476, 3484, 3486, 3477, 3231, 3231, 3251, 3251,
        0, 3251, 3251, 3251, 3251, 3251, 3251, 3251, 3487, 3251,
     3251, 3251, 3251, 3251, 3251, 3481, 3251, 3488, 3491, 3482,
     3483, 3492, 3493, 3484, 3486, 3495, 3496, 3251, 3251, 3251,
     3251, 3251, 3497, 3498, 3499, 3500, 3501, 3502, 3487, 3503,
     3504, 3505, 3506, 3507, 3508, 3509, 3510, 3488, 3491, 3511,
     3512, 3492, 3493, 3513, 3518, 3495, 3496, 3519, 3251, 3251,
     3251,    0, 3497, 3498, 3499, 3500, 3501, 3502,    0, 3503,
     3504, 3505, 3506, 3507, 3508, 3509, 3510, 3520,    0, 3511,
     3512, 3521, 3522, 3513, 3518,    0, 3524, 3519, 3251, 3251,

     3286, 3286,    0, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3525, 3286, 3286, 3286, 3286, 3286, 3286, 3520, 3286, 3523,
     3526, 3521, 3522, 3527, 3528, 3523, 3524, 3529, 3530, 3286,
     3286, 3286, 3286, 3286, 3530, 3531, 3532, 3533, 3534, 3535,
     3525, 3536, 3536, 3538, 3541, 3541, 3543, 3546, 3547, 3523,
     3526, 3548, 3550, 3527, 3528, 3523,    0, 3529, 3530, 3556,
     3286, 3286, 3286,    0, 3530, 3531, 3532, 3533, 3534, 3535,
        0, 3536, 3536, 3538, 3541, 3541, 3543, 3546, 3547, 3555,
        0, 3548, 3550, 3555,    0, 3554, 3554, 3558,    0, 3556,
     3286, 3286, 3297, 3297,    0, 3297, 3297, 3297, 3297, 3297,

     3297, 3297, 3555, 3297, 3297, 3297, 3297, 3297, 3297, 3555,
     3297, 3560, 3566, 3555, 3549, 3554, 3554, 3558, 3549, 3568,
        0, 3297, 3297, 3297, 3297, 3297, 3549, 3559, 3564, 3564,
     3569, 3559, 3555, 3570, 3571, 3572, 3573, 3549, 3574, 3559,
     3575, 3560, 3566, 3576, 3549,    0, 3577, 3578, 3549, 3568,
     3559, 3580, 3297, 3297, 3297,    0, 3549, 3559, 3564, 3564,
     3569, 3559,    0, 3570, 3571, 3572, 3573, 3549, 3574, 3559,
     3575, 3565,    0, 3576, 3582, 3565, 3577, 3578, 3583, 3584,
     3559, 3580, 3297, 3297, 3409, 3409,    0, 3409, 3409, 3409,
     3409, 3409, 3409, 3409, 3565, 3409, 3409, 3409, 3409, 3409,

     3409, 3565, 3409, 3585, 3582, 3565, 3587, 3589, 3583, 3584,
     3586, 3590, 3591, 3409, 3409, 3409, 3409, 3409, 3586, 3590,
     3593, 3595, 3598, 3599, 3565, 3600, 3603, 3604, 3607, 3611,
     3613, 3614, 3615, 3585, 3616, 3617, 3587, 3589, 3618, 3619,
     3586, 3590, 3591, 3620, 3409, 3409, 3409,    0, 3586, 3590,
     3593, 3595, 3598, 3599,    0, 3600, 3603, 3604, 3607, 3611,
     3613, 3614, 3615, 3621, 3616, 3617, 3622, 3623, 3618, 3619,
     3624, 3625, 3626, 3620, 3409, 3409, 3420, 3420,    0, 3420,
     3420, 3420, 3420, 3420, 3420, 3420, 3627, 3420, 3420, 3420,
     3420, 3420, 3420, 3621, 3420, 3628, 3622, 3623, 3629, 3630,

     3624, 3625, 3626, 3631, 3632, 3420, 3420, 3420, 3420, 3420,
     3633, 3634, 3637, 3640, 3641, 3642, 3627, 3643, 3644, 3645,
     3646, 3649, 3650, 3651, 3651, 3628, 3654, 3655, 3629, 3630,
     3658, 3659, 3660, 3631, 3632, 3661, 3420, 3420, 3420,    0,
     3633, 3634, 3637, 3640, 3641, 3642,    0, 3643, 3644, 3645,
     3646, 3649, 3650, 3651, 3651, 3662, 3654, 3655, 3665, 3666,
     3658, 3659, 3660, 3667, 3667, 3661, 3420, 3420, 3437, 3437,
        0, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3670, 3437,
     3437, 3437, 3437, 3437, 3437, 3662, 3437, 3671, 3665, 3666,
     3674, 3675, 3676, 3667, 3667, 3677, 3678, 3437, 3437, 3437,

     3437, 3437, 3679, 3680, 3681, 3682, 3683, 3684, 3670, 3689,
     3690, 3691, 3692, 3693, 3694, 3695, 3696, 3671, 3697, 3698,
     3674, 3675, 3676, 3699, 3700, 3677, 3678, 3701, 3437, 3437,
     3437,    0, 3679, 3680, 3681, 3682, 3683, 3684,    0, 3689,
     3690, 3691, 3692, 3693, 3694, 3695, 3696, 3702, 3697, 3698,
     3703, 3704, 3707, 3699, 3700, 3708, 3709, 3701, 3437, 3437,
     3440, 3440,    0, 3440, 3440, 3440, 3440, 3440, 3440, 3440,
     3710, 3440, 3440, 3440, 3440, 3440, 3440, 3702, 3440, 3711,
     3703, 3704, 3707, 3712, 3714, 3708, 3709, 3715, 3716, 3440,
     3440, 3440, 3440, 3440, 3717, 3718, 3719, 3720, 3722, 3723,

     3710, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3711,
     3732, 3734, 3735, 3712, 3714, 3736, 3737, 3715, 3716, 3742,
     3440, 3440, 3440,    0, 3717, 3718, 3719, 3720, 3722, 3723,
        0, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3743,
     3732, 3734, 3735, 3744, 3747, 3736, 3737, 3748, 3749, 3742,
     3440, 3440, 3456, 3456,    0, 3456, 3456, 3456, 3456, 3456,
     3456, 3456, 3750, 3456, 3456, 3456, 3456, 3456, 3456, 3743,
     3456, 3755, 3756, 3744, 3747, 3757, 3759, 3748, 3749, 3760,
     3761, 3456, 3456, 3456, 3456, 3456, 3762, 3763, 3764, 3765,
     3766, 3767, 3750, 3768, 3769, 3770, 3771, 3772, 3773, 3775,

     3777, 3755, 3756, 3779, 3781, 3757, 3759, 3782, 3783, 3760,
     3761, 3784, 3456, 3456, 3456,    0, 3762, 3763, 3764, 3765,
     3766, 3767,    0, 3768, 3769, 3770, 3771, 3772, 3773, 3775,
     3777, 3785,    0, 3779, 3781, 3786, 3787, 3782, 3783, 3788,
     3789, 3784, 3456, 3456, 3461, 3461,    0, 3461, 3461, 3461,
     3461, 3461, 3461, 3461, 3790, 3461, 3461, 3461, 3461, 3461,
     3461, 3785, 3461, 3791, 3792, 3786, 3787, 3794, 3796, 3788,
     3789, 3798, 3793, 3461, 3461, 3461, 3461, 3461, 3793, 3799,
     3800, 3801, 3802, 3804, 3790, 3806, 3807, 3801, 3808, 3809,
     3810, 3793, 3811, 3791, 3792, 3812, 3814, 3794, 3796,    0,

     3801, 3798, 3793, 3818, 3461, 3461, 3461,    0, 3793, 3799,
     3800, 3801, 3802, 3804,    0, 3806, 3807, 3801, 3808, 3809,
     3810, 3793, 3811, 3813,    0, 3812, 3814, 3822, 3826, 3813,
     3801,    0, 3831, 3818, 3461, 3461, 3462, 3462,    0, 3462,
     3462, 3462, 3462, 3462, 3462, 3462, 3832, 3462, 3462, 3462,
     3462, 3462, 3462, 3813, 3462, 3821, 3833, 3822, 3826, 3813,
     3836, 3821, 3831, 3837, 3838, 3462, 3462, 3462, 3462, 3462,
     3839, 3840, 3841, 3842, 3844, 3846, 3832, 3847, 3848, 3849,
     3850, 3851, 3852, 3853, 3854, 3821, 3833, 3855, 3856, 3857,
     3836, 3821, 3858, 3837, 3838, 3859, 3462, 3462, 3462,    0,

     3839, 3840, 3841, 3842, 3844, 3846,    0, 3847, 3848, 3849,
     3850, 3851, 3852, 3853, 3854, 3860,    0, 3855, 3856, 3857,
     3861, 3862, 3858, 3863, 3865, 3859, 3462, 3462, 3517, 3517,
        0, 3517, 3517, 3517, 3517, 3517, 3517, 3517, 3866, 3517,
     3517, 3517, 3517, 3517, 3517, 3860, 3517, 3864, 3867, 3868,
     3861, 3862, 3869, 3863, 3865, 3864, 3870, 3517, 3517, 3517,
     3517, 3517, 3871, 3872, 3874, 3864, 3873, 3875, 3866, 3876,
     3879, 3880, 3881, 3882, 3873, 3884, 3885, 3864, 3867, 3868,
     3887, 3888, 3869, 3889, 3873, 3864, 3870, 3891, 3517, 3517,
     3517,    0, 3871, 3872, 3874, 3864, 3873, 3875,    0, 3876,

     3879, 3880, 3881, 3882, 3873, 3884, 3885, 3892,    0, 3894,
     3887, 3888, 3897, 3889, 3873, 3898, 3901, 3891, 3517, 3517,
     3561, 3561,    0, 3561, 3561, 3561, 3561, 3561, 3561, 3561,
     3902, 3561, 3561, 3561, 3561, 3561, 3561, 3892, 3561, 3894,
     3903, 3904, 3897, 3905, 3906, 3898, 3901, 3909, 3911, 3561,
     3561, 3561, 3561, 3561, 3912, 3914, 3915, 3916, 3917, 3918,
     3902, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927,
     3903, 3904, 3928, 3905, 3906, 3930, 3931, 3909, 3911, 3932,
     3561, 3561, 3561,    0, 3912, 3914, 3915, 3916, 3917, 3918,
        0, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927,

        0, 3933, 3928, 3934, 3935, 3930, 3931, 3936, 3937, 3932,
     3561, 3561, 3562, 3562,    0, 3562, 3562, 3562, 3562, 3562,
     3562, 3562, 3938, 3562, 3562, 3562, 3562, 3562, 3562, 3939,
     3562, 3933, 3941, 3934, 3935, 3942, 3943, 3936, 3937, 3944,
     3945, 3562, 3562, 3562, 3562, 3562, 3946, 3947, 3950, 3952,
     3953, 3954, 3938, 3957, 3959, 3960, 3961, 3962, 3963, 3939,
     3964, 3965, 3941, 3966, 3967, 3942, 3943, 3968, 3969, 3944,
     3945, 3970, 3562, 3562, 3562,    0, 3946, 3947, 3950, 3952,
     3953, 3954,    0, 3957, 3959, 3960, 3961, 3962, 3963,    0,
     3964, 3965,    0, 3966, 3967, 3971, 3972, 3968, 3969, 3973,

     3974, 3970, 3562, 3562, 3563, 3563,    0, 3563, 3563, 3563,
     3563, 3563, 3563, 3563, 3975, 3563, 3563, 3563, 3563, 3563,
     3563, 3976, 3563, 3977, 3978, 3971, 3972, 3979, 3980, 3973,
     3974, 3981, 3982, 3563, 3563, 3563, 3563, 3563, 3987, 3988,
     3991, 3992, 3993, 3994, 3975, 3995, 3997, 3998, 3999, 4000,
     4001, 3976, 4002, 3977, 3978, 4004, 4005, 3979, 3980, 4006,
     4008, 3981, 3982, 4009, 3563, 3563, 3563,    0, 3987, 3988,
     3991, 3992, 3993, 3994,    0, 3995, 3997, 3998, 3999, 4000,
     4001,    0, 4002, 4010,    0, 4004, 4005, 4011, 4012, 4006,
     4008, 4013, 4015, 4009, 3563, 3563, 3567, 3567,    0, 3567,

     3567, 3567, 3567, 3567, 3567, 3567, 4016, 3567, 3567, 3567,
     3567, 3567, 3567, 4010, 3567, 4017, 4018, 4011, 4012, 4021,
     4022, 4013, 4015, 4025, 4026, 3567, 3567, 3567, 3567, 3567,
     4027, 4028, 4029, 4030, 4032, 4034, 4016, 4035, 4036, 4037,
     4038, 4039, 4040, 4042, 4044, 4017, 4018, 4045, 4046, 4021,
     4022, 4047, 4048, 4025, 4026, 4051, 3567, 3567, 3567,    0,
     4027, 4028, 4029, 4030, 4032, 4034,    0, 4035, 4036, 4037,
     4038, 4039, 4040, 4042, 4044, 4052,    0, 4045, 4046, 4053,
     4054, 4047, 4048, 4057, 4058, 4051, 3567, 3567, 3664, 3664,
        0, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 4059, 3664,

     3664, 3664, 3664, 3664, 3664, 4052, 3664, 4060, 4062, 4053,
     4054, 4063, 4064, 4057, 4058, 4067, 4068, 3664, 3664, 3664,
     3664, 3664, 4069, 4070, 4072, 4075, 4076, 4077, 4059, 4078,
     4080, 4081, 4084, 4085, 4086, 4087, 4089, 4060, 4062, 4090,
     4093, 4063, 4064, 4094, 4095, 4067, 4068, 4096, 3664, 3664,
     3664,    0, 4069, 4070, 4072, 4075, 4076, 4077,    0, 4078,
     4080, 4081, 4084, 4085, 4086, 4087, 4089, 4097,    0, 4090,
     4093, 4098, 4103, 4094, 4095, 4104, 4105, 4096, 3664, 3664,
     3673, 3673,    0, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     4106, 3673, 3673, 3673, 3673, 3673, 3673, 4097, 3673, 4107,

     4108, 4098, 4103, 4109, 4110, 4104, 4105, 4111, 4112, 3673,
     3673, 3673, 3673, 3673, 4113, 4114, 4115, 4116, 4117, 4118,
     4106, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4107,
     4108, 4129, 4130, 4109, 4110, 4131, 4132, 4111, 4112, 4135,
     3673, 3673, 3673,    0, 4113, 4114, 4115, 4116, 4117, 4118,
        0, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4136,
        0, 4129, 4130, 4137, 4138, 4131, 4132, 4141,    0, 4135,
     3673, 3673, 3686, 3686,    0, 3686, 3686, 3686, 3686, 3686,
     3686, 3686, 4143, 3686, 3686, 3686, 3686, 3686, 3686, 4136,
     3686, 4144, 4142, 4137, 4138, 4145, 4146, 4141, 4142, 4147,

     4148, 3686, 3686, 3686, 3686, 3686, 4149, 4150, 4151, 4152,
     4153, 4154, 4143, 4155, 4156, 4152, 4157, 4158, 4159, 4160,
     4161, 4144, 4142, 4162, 4163, 4145, 4146, 4164, 4142, 4147,
     4148, 4165, 3686, 3686, 3686,    0, 4149, 4150, 4151, 4152,
     4153, 4154,    0, 4155, 4156, 4152, 4157, 4158, 4159, 4160,
     4161, 4166,    0, 4162, 4163, 4167, 4169, 4164, 4170, 4171,
     4173, 4165, 3686, 3686, 3721, 3721,    0, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 4174, 3721, 3721, 3721, 3721, 3721,
     3721, 4166, 3721, 4175, 4176, 4167, 4169, 4177, 4170, 4171,
     4173, 4178, 4181, 3721, 3721, 3721, 3721, 3721, 4182, 4183,

     4184, 4185, 4186, 4187, 4174, 4188, 4189, 4192, 4193, 4194,
     4195, 4196, 4197, 4175, 4176, 4198, 4199, 4177, 4201, 4202,
     4204, 4178, 4181, 4205, 3721, 3721, 3721,    0, 4182, 4183,
     4184, 4185, 4186, 4187,    0, 4188, 4189, 4192, 4193, 4194,
     4195, 4196, 4197, 4206,    0, 4198, 4199, 4207, 4201, 4202,
     4204, 4208, 4209, 4205, 3721, 3721, 3746, 3746,    0, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 4210, 3746, 3746, 3746,
     3746, 3746, 3746, 4206, 3746, 4211, 4211, 4207, 4212, 4213,
     4214, 4208, 4209, 4215, 4216, 3746, 3746, 3746, 3746, 3746,
     4217, 4218, 4219, 4220, 4221, 4221, 4210, 4222, 4223, 4224,

     4225, 4226, 4227, 4228, 4229, 4211, 4211, 4230, 4212, 4213,
     4214, 4231, 4232, 4215, 4216, 4233, 3746, 3746, 3746,    0,
     4217, 4218, 4219, 4220, 4221, 4221,    0, 4222, 4223, 4224,
     4225, 4226, 4227, 4228, 4229, 4234,    0, 4230, 4235, 4236,
     4237, 4231, 4232, 4238, 4241, 4233, 3746, 3746, 3805, 3805,
        0, 3805, 3805, 3805, 3805, 3805, 3805, 3805, 4242, 3805,
     3805, 3805, 3805, 3805, 3805, 4234, 3805, 4243, 4235, 4236,
     4237, 4244, 4245, 4238, 4241, 4246, 4247, 3805, 3805, 3805,
     3805, 3805, 4248, 4249, 4252, 4253, 4254, 4255, 4242, 4256,
     4257, 4258, 4259, 4260, 4261, 4262, 4264, 4243, 4265, 4266,

     4267, 4244, 4245, 4268, 4269, 4246, 4247, 4270, 3805, 3805,
     3805,    0, 4248, 4249, 4252, 4253, 4254, 4255,    0, 4256,
     4257, 4258, 4259, 4260, 4261, 4262, 4264, 4271, 4265, 4266,
     4267, 4273, 4274, 4268, 4269, 4275, 4276, 4270, 3805, 3805,
     3823, 3823,    0, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
     4277, 3823, 3823, 3823, 3823, 3823, 3823, 4271, 3823, 4278,
     4279, 4273, 4274, 4280, 4282, 4275, 4276, 4284, 4286, 3823,
     3823, 3823, 3823, 3823, 4289, 4291, 4292, 4293, 4294, 4289,
     4277, 4295, 4296, 4297, 4300, 4301, 4298, 4302, 4303, 4278,
     4279, 4298, 4304, 4280, 4282, 4305, 4306, 4284, 4286, 4308,

     3823, 3823, 3823,    0, 4289, 4291, 4292, 4293, 4294, 4289,
        0, 4295, 4296, 4297, 4300, 4301, 4298, 4302, 4303, 4310,
        0, 4298, 4304, 4311,    0, 4305, 4306,    0, 4313, 4308,
     3823, 3823, 3824, 3824,    0, 3824, 3824, 3824, 3824, 3824,
     3824, 3824, 4315, 3824, 3824, 3824, 3824, 3824, 3824, 4310,
     3824, 4316, 4312, 4311, 4307, 4307, 4317, 4307, 4313, 4307,
     4314, 3824, 3824, 3824, 3824, 3824, 4307, 4312, 4309, 4309,
     4318, 4309, 4315, 4309, 4307, 4314, 4319, 4322, 4323, 4324,
     4309, 4316, 4312, 4325, 4307, 4307, 4317, 4307, 4309, 4307,
     4314, 4326, 3824, 3824, 3824,    0, 4307, 4312, 4309, 4309,

     4318, 4309,    0, 4309, 4307, 4314, 4319, 4322, 4323, 4324,
     4309, 4327,    0, 4325, 4328, 4331, 4332, 4333, 4309, 4334,
     4335, 4326, 3824, 3824, 3827, 3827,    0, 3827, 3827, 3827,
     3827, 3827, 3827, 3827, 4336, 3827, 3827, 3827, 3827, 3827,
     3827, 4327, 3827, 4337, 4328, 4331, 4332, 4333, 4338, 4334,
     4335, 4339, 4340, 3827, 3827, 3827, 3827, 3827, 4341, 4342,
     4343, 4344, 4345, 4346, 4336, 4347, 4348, 4349, 4350, 4351,
     4352, 4354, 4355, 4337, 4356, 4358, 4359, 4361, 4338, 4362,
     4363, 4339, 4340, 4365, 3827, 3827, 3827,    0, 4341, 4342,
     4343, 4344, 4345, 4346,    0, 4347, 4348, 4349, 4350, 4351,

     4352, 4354, 4355, 4366, 4356, 4358, 4359, 4361, 4367, 4362,
     4363, 4368, 4369, 4365, 3827, 3827, 3835, 3835,    0, 3835,
     3835, 3835, 3835, 3835, 3835, 3835, 4372, 3835, 3835, 3835,
     3835, 3835, 3835, 4366, 3835, 4373, 4374, 4375, 4367, 4376,
     4379, 4368, 4369, 4380, 4381, 3835, 3835, 3835, 3835, 3835,
     4382, 4383, 4384, 4385, 4386, 4389, 4372, 4390, 4391, 4392,
     4396, 4397, 4400, 4400, 4402, 4373, 4374, 4375, 4403, 4376,
     4379, 4406, 4406, 4380, 4381, 4407, 3835, 3835, 3835,    0,
     4382, 4383, 4384, 4385, 4386, 4389,    0, 4390, 4391, 4392,
     4396, 4397, 4400, 4400, 4402, 4408,    0, 4409, 4403, 4410,

     4411, 4406, 4406, 4412, 4413, 4407, 3835, 3835, 3890, 3890,
        0, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 4414, 3890,
     3890, 3890, 3890, 3890, 3890, 4408, 3890, 4409, 4415, 4410,
     4411, 4416, 4417, 4412, 4413, 4418, 4431, 3890, 3890, 3890,
     3890, 3890, 4419, 4419, 4422, 4422, 4425, 4425, 4414, 4428,
     4428, 4433, 4435, 4436, 4437, 4439, 4440, 4441, 4415, 4451,
     4452, 4416, 4417, 4453, 4455, 4418, 4431, 4456, 3890, 3890,
     3890,    0, 4419, 4419, 4422, 4422, 4425, 4425,    0, 4428,
     4428, 4433, 4435, 4436, 4437, 4439, 4440, 4441,    0, 4451,
     4452, 4458, 4459, 4453, 4455, 4460, 4461, 4456, 3890, 3890,

     3893, 3893,    0, 3893, 3893, 3893, 3893, 3893, 3893, 3893,
     4462, 3893, 3893, 3893, 3893, 3893, 3893, 4463, 3893, 4464,
     4465, 4458, 4459, 4466, 4467, 4460, 4461, 4468, 4469, 3893,
     3893, 3893, 3893, 3893, 4470, 4471, 4472, 4474, 4479, 4481,
     4462, 4480, 4483, 4484, 4482, 4485, 4486, 4463, 4487, 4464,
     4465, 4488, 4489, 4466, 4467, 4490, 4480, 4468, 4469, 4482,
     3893, 3893, 3893,    0, 4470, 4471, 4472, 4474, 4479, 4481,
     4491, 4480, 4483, 4484, 4482, 4485, 4486, 4492, 4487, 4493,
     4494, 4488, 4489, 4495, 4497, 4490, 4480, 4499, 4500, 4482,
     3893, 3893, 3895, 3895, 4501, 3895, 4502, 3895, 4503, 4504,

     4491, 4505, 4506,    0, 3895,    0,    0, 4492,    0, 4493,
     4494, 3895, 3895, 4495, 4497,    0, 3895, 4499, 4500,    0,
        0,    0, 3895, 3895, 4501, 3895, 4502, 3895, 4503, 4504,
        0, 4505, 4506,    0, 3895,    0,    0,    0,    0,    0,
        0, 3895, 3895,    0,    0,    0, 3895, 3899, 3899,    0,
     3899,    0, 3899,    0,    0,    0,    0,    0,    0, 3899,
        0,    0,    0,    0,    0,    0, 3899, 3899,    0,    0,
        0, 3899,    0,    0,    0,    0,    0, 3899, 3899,    0,
     3899,    0, 3899,    0,    0,    0,    0,    0,    0, 3899,
        0,    0,    0,    0,    0,    0, 3899, 3899,    0,    0,

        0, 3899, 3940, 3940,    0, 3940, 3940, 3940, 3940, 3940,
     3940, 3940,    0, 3940, 3940, 3940, 3940, 3940, 3940,    0,
     3940,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3940, 3940, 3940, 3940, 3940,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3940, 3940, 3940,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3940, 3940, 4014, 4014,    0, 4014, 4014, 4014,

     4014, 4014, 4014, 4014,    0, 4014, 4014, 4014, 4014, 4014,
     4014,    0, 4014,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4014, 4014, 4014, 4014, 4014,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4014, 4014, 4014,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4014, 4014, 4043, 4043,    0, 4043,
     4043, 4043, 4043, 4043, 4043, 4043,    0, 4043, 4043, 4043,

     4043, 4043, 4043,    0, 4043,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4043, 4043, 4043, 4043, 4043,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4043, 4043, 4043,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4043, 4043, 4065, 4065,
        0, 4065, 4065, 4065, 4065, 4065, 4065, 4065,    0, 4065,
     4065, 4065, 4065, 4065, 4065,    0, 4065,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 4065, 4065, 4065,
     4065, 4065,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4065, 4065,
     4065,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4065, 4065,
     4066, 4066,    0, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
        0, 4066, 4066, 4066, 4066, 4066, 4066,    0, 4066,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4066,

     4066, 4066, 4066, 4066,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4066, 4066, 4066,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4066, 4066, 4071, 4071,    0, 4071, 4071, 4071, 4071, 4071,
     4071, 4071,    0, 4071, 4071, 4071, 4071, 4071, 4071,    0,
     4071,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4071, 4071, 4071, 4071, 4071,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4071, 4071, 4071,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4071, 4071, 4190, 4190,    0, 4190, 4190, 4190,
     4190, 4190, 4190, 4190,    0, 4190, 4190, 4190, 4190, 4190,
     4190,    0, 4190,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4190, 4190, 4190, 4190, 4190,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4190, 4190, 4190,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4190, 4190, 4272, 4272,    0, 4272,
     4272, 4272, 4272, 4272, 4272, 4272,    0, 4272, 4272, 4272,
     4272, 4272, 4272,    0, 4272,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4272, 4272, 4272, 4272, 4272,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4272, 4272, 4272,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4272, 4272, 4283, 4283,
        0, 4283, 4283, 4283, 4283, 4283, 4283, 4283,    0, 4283,
     4283, 4283, 4283, 4283, 4283,    0, 4283,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4283, 4283, 4283,
     4283, 4283,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4283, 4283,

     4283,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4283, 4283,
     4288, 4288,    0, 4288, 4288, 4288, 4288, 4288, 4288, 4288,
        0, 4288, 4288, 4288, 4288, 4288, 4288,    0, 4288,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4288,
     4288, 4288, 4288, 4288,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4288,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4288, 4288, 4288,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4288,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4288, 4288, 4360, 4360,    0, 4360, 4360, 4360, 4360, 4360,
     4360, 4360,    0, 4360, 4360, 4360, 4360, 4360, 4360,    0,
     4360,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4360, 4360, 4360, 4360, 4360,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4360, 4360, 4360,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4360, 4360, 4378, 4378,    0, 4378, 4378, 4378,
     4378, 4378, 4378, 4378,    0, 4378, 4378, 4378, 4378, 4378,
     4378,    0, 4378,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4378, 4378, 4378, 4378, 4378,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4378, 4378, 4378,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 4378, 4378, 4401, 4401,    0, 4401,
     4401, 4401, 4401, 4401, 4401, 4401,    0, 4401, 4401, 4401,
     4401, 4401, 4401,    0, 4401,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4401, 4401, 4401, 4401, 4401,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4401, 4401, 4401,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4401, 4401, 4405, 4405,

        0, 4405, 4405, 4405, 4405, 4405, 4405, 4405,    0, 4405,
     4405, 4405, 4405, 4405, 4405,    0, 4405,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4405, 4405, 4405,
     4405, 4405,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4405, 4405,
     4405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4405, 4405,
     4476, 4476,    0, 4476, 4476, 4476, 4476, 4476, 4476, 4476,

        0, 4476, 4476, 4476, 4476, 4476, 4476,    0, 4476,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4476,
     4476, 4476, 4476, 4476,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4476,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4476, 4476, 4476,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4476,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4476, 4476, 4510, 4510, 4510, 4510, 4510, 4511, 4511, 4512,
     4512, 4512, 4512, 4512, 4514,    0, 4514, 4514, 4514, 4515,

     4515, 4515, 4516, 4516, 4516, 4517,    0, 4517, 4517, 4517,
     4518,    0, 4518, 4518, 4518, 4519,    0, 4519, 4519, 4519,
     4520, 4520, 4520, 4520, 4520, 4521,    0, 4521, 4521, 4521,
     4522,    0, 4522, 4522, 4522, 4523,    0, 4523, 4523, 4523,
     4524,    0, 4524, 4524, 4524, 4525,    0, 4525, 4525, 4525,
     4526,    0, 4526, 4526, 4526, 4527,    0, 4527, 4527, 4527,
     4528,    0, 4528, 4528, 4528, 4529,    0, 4529, 4529, 4529,
     4530,    0, 4530, 4530, 4530, 4531,    0, 4531, 4531, 4531,
     4532,    0, 4532, 4532, 4532, 4533,    0, 4533, 4533, 4533,
     4534,    0, 4534, 4534, 4534, 4535,    0, 4535, 4535, 4535,

     4536,    0, 4536, 4536, 4536, 4537,    0, 4537, 4537, 4537,
     4538,    0, 4538, 4538, 4538, 4539,    0, 4539, 4539, 4539,
     4540,    0, 4540, 4540, 4540, 4541,    0, 4541, 4541, 4541,
     4542,    0, 4542, 4542, 4542, 4543,    0, 4543, 4543, 4543,
     4544,    0, 4544, 4544, 4544, 4545,    0, 4545, 4545, 4545,
     4546,    0, 4546, 4546, 4546, 4547,    0, 4547, 4547, 4547,
     4548,    0, 4548, 4548, 4548, 4549,    0, 4549, 4549, 4549,
     4550,    0, 4550, 4550, 4550, 4551,    0, 4551, 4551, 4551,
     4552,    0, 4552, 4552, 4552, 4553,    0, 4553, 4553, 4553,
     4554,    0, 4554, 4554, 4554, 4555,    0, 4555, 4555, 4555,

     4556,    0, 4556, 4556, 4556, 4557,    0, 4557, 4557, 4557,
     4558,    0, 4558, 4558, 4558, 4559,    0, 4559, 4559, 4559,
     4560,    0, 4560, 4560, 4560, 4561,    0, 4561, 4561, 4561,
     4562,    0, 4562, 4562, 4562, 4563,    0, 4563, 4563, 4563,
     4564,    0, 4564, 4564, 4564, 4565,    0, 4565, 4565, 4565,
     4566,    0, 4566, 4566, 4566, 4567,    0, 4567, 4567, 4567,
     4568,    0, 4568, 4568, 4568, 4569,    0, 4569, 4569, 4569,
     4570,    0, 4570, 4570, 4570, 4571,    0, 4571, 4571, 4571,
     4572,    0, 4572, 4572, 4572, 4573,    0, 4573, 4573, 4573,
     4574,    0, 4574, 4574, 4574, 4575,    0, 4575, 4575, 4575,

     4576,    0, 4576, 4576, 4576, 4577,    0, 4577, 4577, 4577,
     4578,    0, 4578, 4578, 4578, 4579,    0, 4579, 4579, 4579,
     4580,    0, 4580, 4580, 4580, 4581,    0, 4581, 4581, 4581,
     4582,    0, 4582, 4582, 4582, 4583,    0, 4583, 4583, 4583,
     4584,    0, 4584, 4584, 4584, 4585,    0, 4585, 4585, 4585,
     4586,    0, 4586, 4586, 4586, 4587,    0, 4587, 4587, 4587,
     4588,    0, 4588, 4588, 4588, 4589,    0, 4589, 4589, 4589,
     4590,    0, 4590, 4590, 4590, 4591,    0, 4591, 4591, 4591,
     4592,    0, 4592, 4592, 4592, 4593,    0, 4593, 4593, 4593,
     4594,    0, 4594, 4594, 4594, 4595,    0, 4595, 4595, 4595,

     4596,    0, 4596, 4596, 4596, 4597,    0, 4597, 4597, 4597,
     4598,    0, 4598, 4598, 4598, 4599,    0, 4599, 4599, 4599,
     4600,    0, 4600, 4600, 4600, 4601,    0, 4601, 4601, 4601,
     4602,    0, 4602, 4602, 4602, 4603,    0, 4603, 4603, 4603,
     4604,    0, 4604, 4604, 4604, 4605,    0, 4605, 4605, 4605,
     4606,    0, 4606, 4606, 4606, 4607,    0, 4607, 4607, 4607,
     4608,    0, 4608, 4608, 4608, 4609,    0, 4609, 4609, 4609,
     4610,    0, 4610, 4610, 4610, 4611,    0, 4611, 4611, 4611,
     4612,    0, 4612, 4612, 4612, 4613,    0, 4613, 4613, 4613,
     4614,    0, 4614, 4614, 4614, 4615,    0, 4615, 4615, 4615,

     4616,    0, 4616, 4616, 4616, 4617,    0, 4617, 4617, 4617,
     4618,    0, 4618, 4618, 4618, 4619,    0, 4619, 4619, 4619,
     4620,    0, 4620, 4620, 4620, 4621,    0, 4621, 4621, 4621,
     4622,    0, 4622, 4622, 4622, 4623,    0, 4623, 4623, 4623,
     4624,    0, 4624, 4624, 4624, 4625,    0, 4625, 4625, 4625,
     4626,    0, 4626, 4626, 4626, 4627,    0, 4627, 4627, 4627,
     4628,    0, 4628, 4628, 4628, 4629,    0, 4629, 4629, 4629,
     4630,    0, 4630, 4630, 4630, 4631,    0, 4631, 4631, 4631,
     4632,    0, 4632, 4632, 4632, 4633,    0, 4633, 4633, 4633,
     4634,    0, 4634, 4634, 4634, 4635,    0, 4635, 4635, 4635,

     4636,    0, 4636, 4636, 4636, 4637,    0, 4637, 4637, 4637,
     4638,    0, 4638, 4638, 4638, 4639,    0, 4639, 4639, 4639,
     4640,    0, 4640, 4640, 4640, 4641,    0, 4641, 4641, 4641,
     4642,    0, 4642, 4642, 4642, 4643,    0, 4643, 4643, 4643,
     4644,    0, 4644, 4644, 4644, 4645,    0, 4645, 4645, 4645,
     4646,    0, 4646, 4646, 4646, 4647,    0, 4647, 4647, 4647,
     4648,    0, 4648, 4648, 4648, 4649,    0, 4649, 4649, 4649,
     4650,    0, 4650, 4650, 4650, 4651,    0, 4651, 4651, 4651,
     4652,    0, 4652, 4652, 4652, 4653,    0, 4653, 4653, 4653,
     4654,    0, 4654, 4654, 4654, 4655,    0, 4655, 4655, 4655,

     4656,    0, 4656, 4656, 4656, 4657,    0, 4657, 4657, 4657,
     4658,    0, 4658, 4658, 4658, 4659,    0, 4659, 4659, 4659,
     4660,    0, 4660, 4660, 4660, 4661,    0, 4661, 4661, 4661,
     4662,    0, 4662, 4662, 4662, 4663,    0, 4663, 4663, 4663,
     4664,    0, 4664, 4664, 4664, 4665,    0, 4665, 4665, 4665,
     4666,    0, 4666, 4666, 4666, 4667,    0, 4667, 4667, 4667,
     4668,    0, 4668, 4668, 4668, 4669,    0, 4669, 4669, 4669,
     4670,    0, 4670, 4670, 4670, 4671,    0, 4671, 4671, 4671,
     4672,    0, 4672, 4672, 4672, 4673,    0, 4673, 4673, 4673,
     4674,    0, 4674, 4674, 4674, 4675,    0, 4675, 4675, 4675,

     4676,    0, 4676, 4676, 4676, 4677,    0, 4677, 4677, 4677,
     4678,    0, 4678, 4678, 4678, 4679,    0, 4679, 4679, 4679,
     4680,    0, 4680, 4680, 4680, 4681,    0, 4681, 4681, 4681,
     4682,    0, 4682, 4682, 4682, 4683,    0, 4683, 4683, 4683,
     4684,    0, 4684, 4684, 4684, 4685,    0, 4685, 4685, 4685,
     4686,    0, 4686, 4686, 4686, 4687,    0, 4687, 4687, 4687,
     4688,    0, 4688, 4688, 4688, 4689,    0, 4689, 4689, 4689,
     4690,    0, 4690, 4690, 4690, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,

     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509,
     4509, 4509, 4509, 4509, 4509, 4509, 4509, 4509
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
#define INITIAL 0
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 8 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"

	#include <string>
	#include <iostream>
	#include <iomanip>
    #include "../../util/SGF_Debug.h"
	#include "cmdScanner.h"
	
	/* import the parser's token type into a local typedef */
	
	typedef CmdCompiler::Parser::token token;
	typedef CmdCompiler::Parser::token_type token_type;
    /* By default yylex returns int, we use token_type. Unfortunately yyterminate
    * by default returns 0, which is not of token_type. */
    #define yyterminate() return token::END

	//To use in lexer to parse trigger redirection
	
      // used to keep track of location
   	/* The following paragraph suffices to track locations accurately. Each time
 	* yylex is invoked, the begin position is moved onto the end position. */

	#define YY_USER_ACTION yylloc->columns(yyleng);
	/* This disables inclusion of unistd.h, which is not available under Visual C++
 	* on Win32. The C++ scanner uses STL streams instead. */

	#define YY_NO_UNISTD_H


/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 40 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* change the name of the scanner class. results in "ExampleFlexLexer" */
#line 4999 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler/cmdscanner.scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 53 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"


 /* code to place at the beginning of yylex() */



    // reset location
    yylloc->step();



#line 5138 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler/cmdscanner.scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4510 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 13976 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_FX: " << yylval->doubleVal  <<endl; 
	return token::KEY_FX;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloatX(); /*sscanf(yytext,"S%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_SX: " << yylval->doubleVal  <<endl; 
	return token::KEY_SX;}
	YY_BREAK
case 3:
#line 72 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
case 4:
#line 73 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
case 5:
YY_RULE_SETUP
#line 73 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloat();
				  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer NUMBER= "<< *yytext <<" lenght: "<< yyleng <<" doubleval: "<< setiosflags(ios::fixed) <<setprecision(4) << yylval->doubleVal <<endl;
				 return token::NUMBER;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloat();
				  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer NUMBER= "<< *yytext <<" lenght: "<< yyleng <<" doubleval: "<< setiosflags(ios::fixed) <<setprecision(4) << yylval->doubleVal <<endl;
				 return token::NUMBER;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING 3= "<<  yylval->stringVal->c_str() <<endl;
return token::QUOTESTRING; }			  
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING 2= "<<  yylval->stringVal->c_str() <<endl;
return token::QUOTESTRING; }			  
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string(yytext, yyleng);
			  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING= "<< yylval->stringVal->c_str() <<endl; 
			  return token::QUOTESTRING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<< yytext[0] <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  *yytext <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
            return token_type (yytext[0]);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
            return token_type (yytext[0]);  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 112 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 114 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 118 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }		 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }         
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 128 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }    
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 130 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }      
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_XOR" <<endl; 
	return token::CMD_XOR; }
	YY_BREAK
/* =============  FUNCTIONS ========================= */
case 31:
YY_RULE_SETUP
#line 139 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("acos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("asin"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("atan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 146 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("animelem"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 149 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("abs"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 151 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("animelemtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 153 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("animelemno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("animexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 160 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("cos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ceil"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("const240p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("const480p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("const720p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 172 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("const"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_CONST;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("exp"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 181 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("floor"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_FVAR: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_FVAR;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 187 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("gethitvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ifelse"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IFELSE: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IFELSE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ishelper"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str() <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 198 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ln"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 200 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("log"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_LOG: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_LOG;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 206 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numprojid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 208 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numtarget"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER; }                             
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 210 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numexplod");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER; }                              
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 212 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numhelper");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER; }                              
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 216 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("projguardedtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 219 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJHIT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJHIT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 221 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJHIT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJHIT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 224 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJGUARDED: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJGUARDED;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 226 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJGUARDED: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJGUARDED;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 228 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("projhittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 230 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJCONTACT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJCONTACT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 232 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJCONTACT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJCONTACT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 234 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("projcontacttime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 236 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("projcanceltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 238 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("playeridexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 242 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("selfanimexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 244 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sysfvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 246 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sin"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 249 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sysvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_SYSVAR" <<endl; 
	return token::FUNC_SYSVAR;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 255 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("tan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 258 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("timemod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 261 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("teammode"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}   
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 264 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("var"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_VAR" <<endl; 
	return token::FUNC_VAR;}
	YY_BREAK
/* =============  ESPECIAL COMMANDS ========================= */
case 76:
YY_RULE_SETUP
#line 269 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("command.buffer.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str() <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 272 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("command.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str() <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 275 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("command"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str() <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 278 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("statetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATETYPE" <<endl; 
	return token::KEY_STATETYPE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 281 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("physics");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_PHYSICS" <<endl; 
	return token::KEY_PHYSICS; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("state"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: CMD_STATE" <<endl; 
	return token::CMD_STATE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 289 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("statedef");	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: CMD_STATEDEF" <<endl; 
		  return token::CMD_STATEDEF;}			  
	YY_BREAK
/* =============  KEY_IDENTIFIER ========================= */
case 83:
YY_RULE_SETUP
#line 294 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("accel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 297 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 299 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 301 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("anim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_ANIM: "<< yylval->stringVal->c_str() <<endl; 
	return token::KEY_ANIM;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 303 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("attack"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 307 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("affectteam"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 311 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 313 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 316 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 319 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 322 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 325 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 328 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 331 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{  yylval->stringVal = new string("air.gethit.airrecover.up");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 334 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.down"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 336 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 338 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover.ground.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 340 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover.groundlevel");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 342 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 344 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 346 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.gethit.trip.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 349 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump.num"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 351 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 354 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 357 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 360 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 363 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 366 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airjuggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 368 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 371 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("alive");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 374 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("animtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 376 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("attack.dist");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 379 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("attr"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 382 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("authorname"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 385 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("backedgebodydist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 387 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("backedgedist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                         
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 390 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("bindtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 393 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("buffer.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 396 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("buffer"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 402 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("color");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 405 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("ctrl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 407 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("crouch.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 409 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("crouch.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 412 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("crouch"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 415 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("canrecover");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                                             
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 419 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("defence"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 422 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.bounce.offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 424 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.bounce.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 426 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.bounce.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 428 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 430 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("drawgame");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; } 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 433 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("draw.offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 436 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("draw"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; } 
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 439 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("facing");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 441 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.defence_up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 443 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.defence_mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 446 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.xvelocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 449 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.yvelocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 451 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 453 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("forcestand"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 455 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("forcenofall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 457 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("facep2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 459 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("floatpersistindex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}	
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 461 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("frontedgebodydist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 463 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("frontedgedist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 465 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fvalue"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 468 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 473 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("gametime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }    
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 475 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("ground.back");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 477 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 480 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 483 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 486 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guardflag"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 489 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.pausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 492 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guardsound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 495 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 498 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 501 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 504 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 507 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 510 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("getpower "); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 513 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("givepower"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 517 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 520 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 523 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 526 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 528 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 531 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 535 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 538 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("head.pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 542 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("head"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 544 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitonce"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 547 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitcountpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 550 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitdefpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 553 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 555 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitfall");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 557 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitflag");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 559 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 561 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitpausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 563 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitshakeover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 565 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitsound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 567 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 570 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("id"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 573 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("inguarddist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 576 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("intpersistindex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 579 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ignorehitpause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 582 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("interval"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 585 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ishometeam");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                           
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 589 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("juggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 592 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("jump.changeanim.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 595 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("jump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 597 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("jump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 599 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("jump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 601 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("jump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 604 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 607 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("KO.echo"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 610 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ko"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 614 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("liedown.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 616 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("liedown"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 618 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("lifemax");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 620 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("life"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                   
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 622 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("loseko");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 624 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("losetime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 626 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("lose");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 631 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("matchno");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 633 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("matchover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                              
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 635 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("maxdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 637 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("mindist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 639 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("mid.pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 641 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("mid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 643 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movehitpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 645 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("moveguarded");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                            
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 647 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movehit");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 649 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movereversed");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                           
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 651 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movecontact"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 653 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 656 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 661 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 663 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("nochainID"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 665 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("numenemy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 667 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numhits"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 669 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("numpartner"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 671 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("numproj");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 674 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("pausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 677 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("persistent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 680 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("postype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 682 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 685 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("priority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 688 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("proj"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 691 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("proj.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 693 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("proj.doscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 695 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1id"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                  
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 697 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 699 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2bodydist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 702 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 704 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2life"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 706 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 708 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                             
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 710 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p3name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                            
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 712 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p4name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 714 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 717 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 720 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 723 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1getp2facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 726 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 729 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p1stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 732 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2getp1state"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 734 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("palno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 736 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("pi"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                     
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 738 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("prevstateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                            
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 740 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("powermax"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 743 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("power"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 746 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("p2statetype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 748 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("p2bodytype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 750 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2movetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 755 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("random");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 758 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("removetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 761 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("run.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 764 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("run.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 767 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("run"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 770 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("runjump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 772 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("roundno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 774 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("roundsexisted"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                         
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 776 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("roundstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 779 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("rootdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 782 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("runjump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 784 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("runjump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 786 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("runjump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 791 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("screenpos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 794 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("shadowoffset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 796 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("simul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 799 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sinadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 801 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("single"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 803 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("snap"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 805 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 807 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 810 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("spacing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 813 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sparkxy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 816 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("statetime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 818 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("stand.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 820 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("stand.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 823 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("stand"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 826 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 828 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger1"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 830 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 832 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger3"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 834 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger4"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 836 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger5"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 838 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger6"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 840 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger7"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 842 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger8"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 844 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trigger9"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 847 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("triggerall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGERALL: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGERALL;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 850 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal<<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 852 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("teamside"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                              
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 854 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("tickspersecond"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                        
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 856 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("timemode"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                              
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 858 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("turns"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                              
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 862 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("uniqhitcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 865 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("under"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 872 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("value2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 875 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("value"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 877 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("volume"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 881 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("walk.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 884 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("walk.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 887 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("walk"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 889 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("waveform"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 891 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("win"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                    
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 893 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("winko"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                 
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 896 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("wintime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                    
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 898 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("winperfect"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}                                 
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 902 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("xscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 906 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 908 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("yscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: "<< yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
/* =============  KEYWORD ========================= */
case 317:
YY_RULE_SETUP
#line 914 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitvelx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }                               
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 916 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("hitvely"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }                               
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 921 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2distx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 923 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2disty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 926 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("p2bodydisty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 929 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("p2bodydistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 933 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("parentdisty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 936 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("parentdistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 940 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("posx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 942 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("posy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 945 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("rootdistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 947 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("rootdisty");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 952 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("screenposx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 955 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("screenposy");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 960 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 962 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("vely"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 964 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("vel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}			  
	YY_BREAK
/* =============  CONSTPARAM ========================= */
case 334:
YY_RULE_SETUP
#line 971 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{yylval->stringVal = new string("data.life");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 973 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.power"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 975 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.attack"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 977 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.defence"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;} 
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 979 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.fall.defence_up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 981 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.fall.defence_mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 983 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.liedown.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 985 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.airjuggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 987 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 989 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.guard.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 991 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.KO.echo"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 993 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.IntPersistIndex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 995 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.FloatPersistIndex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 997 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("data.volume"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1003 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.xscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1005 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.yscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1007 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.ground.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1009 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.ground.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1011 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.air.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1013 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.air.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 1015 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1017 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1019 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.proj.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 1021 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.proj.doscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 1023 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.head.pos.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 1025 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.head.pos.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 1027 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.mid.pos.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1029 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.mid.pos.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 1031 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.shadowoffset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 1033 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.draw.offset.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1035 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("size.draw.offset.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 1039 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.walk.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 1041 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.walk.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 1043 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.run.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 1045 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.run.fwd.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 1047 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.run.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 1049 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.run.back.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 1051 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.jump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 1053 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.runjump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 1055 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.jump.neu.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 1057 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.jump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 1059 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.jump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 1061 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.runjump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 1063 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.runjump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 1065 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.airjump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 1067 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.airjump.neu.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 1069 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.airjump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 1071 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.airjump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 1073 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.groundrecover.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 1075 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.groundrecover.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 1077 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.mul.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 1079 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.mul.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 1081 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.add.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 1083 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.add.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 1085 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 1087 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 1089 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 1091 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.down"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 1094 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.airjump.num"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 1096 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.airjump.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 1098 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 1100 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.stand.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 1102 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.crouch.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 1104 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.stand.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 1106 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.crouch.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 1108 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.jump.changeanim.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 1110 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 1112 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundrecover.ground.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 1114 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundrecover.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 1116 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.airrecover.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 1118 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.airrecover.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 1120 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.trip.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 1122 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.offset.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 1124 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.offset.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 1126 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 1128 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 1130 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movement.down.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
/* =============  HITDEFATTR AND PARAMS ========================= */
case 411:
YY_RULE_SETUP
#line 1134 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitdefattr"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_HITDEF: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_HITDEF;}
	YY_BREAK
/* =============  GETHITVAR PARAM ========================= */
case 412:
YY_RULE_SETUP
#line 1141 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 1143 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 1145 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 1147 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("chainid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 1149 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("damage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 1151 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fallcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 1153 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.damage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 1155 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.xvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 1157 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.yvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 1159 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.recover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 1161 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.recovertime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 1163 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 1165 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 1167 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.envshake.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 1169 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.envshake.freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 1171 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.envshake.ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 1173 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.envshake.phase"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 1175 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("groundtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 1177 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guarded"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 1179 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitshaketime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "GETHIT_PARAM" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 1181 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 1183 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 1185 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("isbound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 1187 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("recovertime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 1189 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 1191 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("xoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 1193 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("zoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 1195 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("xvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 1197 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("xveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 1199 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("yoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 1201 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("yvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 1203 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("yveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/* =============  STATE CONTROLLERS ========================= */
case 444:
YY_RULE_SETUP
#line 1210 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("afterimage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 1213 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("afterimagetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 1218 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("allpalfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 1221 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("angleadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 1224 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("angledraw"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 1227 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("anglemul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 1230 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("angleset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 1233 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("appendtoclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 1236 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("assertspecial"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 1239 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("attackdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 1242 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("attackmulset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 1245 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("bgpalfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 1248 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("bindtoparent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 1251 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("bindtoroot"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 1254 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("bindtotarget"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 1257 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("changeanim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 1260 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("changeanim2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 1263 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("changestate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 1266 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("clearclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 1269 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ctrlset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 1272 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("defencemulset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 1275 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("destroyself"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 1278 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("displaytoclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 1281 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envcolor"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 1284 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envshake"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 1287 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("explod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 1290 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("explodbindtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 1293 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("forcefeedback"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 1296 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fallenvshake"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 1299 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("gamemakeanim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 1302 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("gravity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 1305 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 1308 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitby"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 1311 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitdef"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 1314 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitfalldamage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 1317 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitfallset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 1320 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitfallvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 1323 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitoverride"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 1326 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("hitvelset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 1329 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("lifeadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 1332 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("lifeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 1335 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("makedust"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 1338 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("modifyexplod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 1341 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("movehitreset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 1344 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("nothitby"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 1347 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("null"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 1350 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 1353 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("palfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 1355 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("parentdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 1358 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("parentvaradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 1361 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("parentvarset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 1364 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("pause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 1367 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("playerpush"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 1370 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("playsnd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 1373 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("posadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 1376 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("posfreeze"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 1379 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("posset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 1382 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("poweradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 1385 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("powerset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 1388 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("projectile"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 1391 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("removeexplod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 1394 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("reversaldef"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 1397 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("screenbound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 1400 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("selfstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 1403 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: " <<  yylval->stringVal->c_str() <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 1406 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("statetypeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 1409 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("sndpan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 1412 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("stopsnd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 1415 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("superpause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 1418 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetbind"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 1421 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetdrop"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 1424 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetfacing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 1427 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetlifeadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 1430 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetpoweradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 1433 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 1436 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 1439 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("targetvelset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 1442 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("trans"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 1445 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("turn"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 1448 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("varadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 1451 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("varrandom");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 1454 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("varrangeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 1457 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("varset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 1460 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("veladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 1463 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velmul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 1466 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("velset");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: " <<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER; }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 1468 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("width"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 1471 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("zoom"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 1474 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("unknown"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER;}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 1476 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("debug"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER;}
	YY_BREAK
/* =============  STATE CONTROLLERS ========================= */
/*================   TRIGGER REDIRECTION   ===================
The complete list of redirection keywords is the following:

-) parent
    Redirects the trigger to the player's parent. (Player must be a helper.)
-) root
    Redirects the trigger to the root.
-) helper
    Redirects the trigger to the first helper found. See the related trigger "NumHelper" in the trigger documentation.
-) helper(ID)
    ID should be a well-formed expression that evaluates to a positive integer. The trigger is then redirected to a helper with the corresponding ID number.
-) target
    Redirects the trigger to the first target found.
-) target(ID)
    ID should be a well-formed expression that evaluates to a non- negative integer. The trigger is then redirected to a target with the corresponding targetID. The targetID is specified in the "ID" parameter of a HitDef controller.
-) partner
    Redirects the trigger to the player's partner. Normal helpers and neutral players are not considered opponents. See the related trigger "numpartner" in the trigger documentation.
-) enemy
    Redirects the trigger to the first opponent found. Normal helpers and neutral players are not considered opponents. See the related trigger "numenemy" in the trigger documentation.
-) enemy(n)
    n should be a well-formed expression that evaluates to a non- negative integer. The trigger is redirected to the n'th opponent.
-) enemyNear
    Redirects the trigger to the nearest opponent.
-) enemyNear(n)
    n should be a well-formed expression that evaluates to a non- negative integer. The trigger is redirected to the n'th-nearest opponent.
-) playerID(ID)
    n should be a well-formed expression that evaluates to a non- negative integer. The trigger is redirected to the player with unique ID equal to ID. See the "ID" and "PlayerExistID" triggers in the trigger documentation.

If the trigger is redirected to an invalid destination (for instance, if it is retargeted to a helper when none exist), then an error is returned. See the section on SC values.

Note: multiple redirection (e.g., root,target,time) is not currently supported.

	*/
case 534:
YY_RULE_SETUP
#line 1515 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("enemynear"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str()  <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER;}
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 1518 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{  yylval->stringVal = new string("helper"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER;}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 1521 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{  yylval->stringVal = new string("target"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER;}
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 1524 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("enemy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER; }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 1527 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("partner"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER; }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 1530 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{  yylval->stringVal = new string("playerid");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER; }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 1533 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("root"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER; }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 1536 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("parent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "TRIGGER_REDIRECTION_IDENTIFIER: " << yylval->stringVal->c_str() <<endl; 
	return token::TRIGGER_REDIRECTION_IDENTIFIER; }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 1540 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer IDENTIFIER= "<<  yylval->stringVal->c_str() <<endl;
return token::IDENTIFIER; }
	YY_BREAK
/*  HIT DEF PARAMETERS ==================  */
/*    yaccel ok  */
/*     hitflag ok  */
/*	  affectteam  ok  */
/*    animtype ok gethitparam  */
case 543:
YY_RULE_SETUP
#line 1557 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 1560 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("fall.animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    damage ok gethitparam  */
/*    sparkno ok   */
/*    guard.sparkno ok   */
case 545:
YY_RULE_SETUP
#line 1570 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 1572 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 1575 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 1578 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airguard.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 1581 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("ground.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 1584 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 1587 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 1590 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("guard.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 1593 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airguard.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 1596 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("airguard.ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 1599 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.juggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    p2stateno ok     */
/*    fall ok    */
/*    fall.recover ok gethitparam             */
/*    fall.recovertime ok gethitparam         */
/*    fall.damage ok gethitparam              */
case 556:
YY_RULE_SETUP
#line 1607 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("air.fall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 1609 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 1612 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 1615 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("down.bounce"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    id ok    */
/*    chainID  ok gethitparam          */
/*    fall.kill OK   */
case 560:
YY_RULE_SETUP
#line 1622 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("palfx.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 1625 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("palfx.mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 1628 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("palfx.add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 1631 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envshake.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 1634 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envshake.freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 1637 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envshake.ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 1640 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylval->stringVal = new string("envshake.phase "); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    fall.envshake.time OK   */
/*    fall.envshake.freq OK   */
/*    fall.envshake.ampl OK   */
/*    fall.envshake.phase OK   */
/*  TRIGGERS   
	
	AILevel
Abs - done - FUNC_IDENTIFIER
Acos - done - FUNC_IDENTIFIER
Alive - done - KEY_IDENTIFIER
Anim - done - KEY_ANIM
AnimElem - done -  FUNC_IDENTIFIER
AnimElemNo - done - FUNC_IDENTIFIER
AnimElemTime - done - FUNC_IDENTIFIER
AnimExist - done - FUNC_IDENTIFIER
AnimTime - done - KEY_IDENTIFIER
Asin - done - FUNC_IDENTIFIER
Atan - done - FUNC_IDENTIFIER
AuthorName - done - KEY_IDENTIFIER

B
-----------------------
BackEdgeBodyDist - done - KEY_IDENTIFIER
BackEdgeDist - done - KEY_IDENTIFIER

C
-----------------------
CanRecover - done  - KEY_IDENTIFIER
Ceil - done - FUNC_IDENTIFIER
Command - done - KEY_IDENTIFIER
Const - done - FUNC_CONST
Const240p - FUNC_IDENTIFIER
Const480p - FUNC_IDENTIFIER
Const720p - FUNC_IDENTIFIER
Cos - done - FUNC_IDENTIFIER
Ctrl - done - KEY_IDENTIFIER

D
-----------------------
DrawGame - KEY_IDENTIFIER

E
-----------------------
E - NOT DEFINED - WILL COMPILE LIKE IDENTIFIER
Exp - done - FUNC_IDENTIFIER

F
-----------------------
FVar - done - FUNC_FVAR
Facing - done - KEY_IDENTIFIER
Floor - done - FUNC_IDENTIFIER
FrontEdgeBodyDist - done - KEY_IDENTIFIER
FrontEdgeDist - done - KEY_IDENTIFIER

G
-----------------------
GameTime - done - KEY_IDENTIFIER
GetHitVar - DONE - FUNC_GETHITVAR

H
-----------------------
HitCount - done - KEY_IDENTIFIER
HitDefAttr - DONE - KEY_HITDEF
HitFall - done - KEY_IDENTIFIER
HitOver - done - KEY_IDENTIFIER
HitPauseTime - done - KEY_IDENTIFIER
HitShakeOver - done - KEY_IDENTIFIER
HitVel - done - KEY_IDENTIFIER

I
-----------------------
ID - done - KEY_IDENTIFIER
IfElse - done - FUNC_IFELSE
InGuardDist - done - KEY_IDENTIFIER
IsHelper - done - FUNC_IDENTIFIER
IsHomeTeam - DONE - KEY_IDENTIFIER

L
-----------------------
Life - done - KEY_IDENTIFIER
LifeMax - done - KEY_IDENTIFIER
Ln - done - FUNC_IDENTIFIER
Log - done - FUNC_LOG
Lose DONE -  - KEY_IDENTIFIER

M
-----------------------
MatchNo - done - KEY_IDENTIFIER
MatchOver - done - KEY_IDENTIFIER
MoveContact - DONE - KEY_IDENTIFIER
MoveGuarded - done - KEY_IDENTIFIER
MoveHit - DONE - KEY_IDENTIFIER
MoveReversed - DONE - KEY_IDENTIFIER
MoveType - done - KEY_IDENTIFIER

N
-----------------------
Name - done - KEY_IDENTIFIER
NumEnemy - DONE - KEY_IDENTIFIER
NumExplod - done - FUNC_IDENTIFIER
NumHelper - DONE - FUNC_IDENTIFIER
NumPartner - DONE - KEY_IDENTIFIER
NumProj - DONE - KEY_IDENTIFIER
NumProjID - DONE - FUNC_IDENTIFIER
NumTarget - DONE - FUNC_IDENTIFIER

P
-----------------------
P1Name - done - KEY_IDENTIFIER
P2BodyDist - done - KEY_IDENTIFIER
P2Dist - done - KEY_IDENTIFIER
P2Life - done - KEY_IDENTIFIER
P2MoveType - done - KEY_IDENTIFIER
P2Name - done - KEY_IDENTIFIER
P2StateNo - done - KEY_IDENTIFIER
P2StateType - done - KEY_IDENTIFIER
P3Name - done - KEY_IDENTIFIER
P4Name - done - KEY_IDENTIFIER
PalNo - done - KEY_IDENTIFIER
ParentDist - done - KEY_IDENTIFIER
Pi - done - KEY_IDENTIFIER
PlayerIDExist - done - FUNC_IDENTIFIER
Pos - done - KEY_IDENTIFIER
Power - done - KEY_IDENTIFIER
PowerMax - done - KEY_IDENTIFIER
PrevStateNo - done - KEY_IDENTIFIER
ProjCancelTime - DONE - FUNC_IDENTIFIER
ProjContact - DONE - FUNC_PROJCONTACT
ProjContactTime - DONE - FUNC_IDENTIFIER
ProjGuarded - DONE - FUNC_IDENTIFIER
ProjGuardedTime - DONE - FUNC_IDENTIFIER
ProjHit - DONE -FUNC_IDENTIFIER
ProjHitTime - DONE - FUNC_IDENTIFIER

R
-----------------------
Random - done - KEY_IDENTIFIER
RootDist - done - KEY_IDENTIFIER
RoundNo - done - KEY_IDENTIFIER
RoundState - done - KEY_IDENTIFIER
RoundsExisted - done - KEY_IDENTIFIER

S
-----------------------
ScreenPos - done - KEY_IDENTIFIER
SelfAnimExist - done - FUNC_IDENTIFIER
Sin - done - FUNC_IDENTIFIER
StateNo - DONE - KEY_IDENTIFIER
StateType - done - KEY_STATETYPE
SysFVar - donE - FUNC_IDENTIFIER
SysVar - done - FUNC_SYSVAR

T
-----------------------
Tan - done - FUNC_IDENTIFIER
TeamMode - DONE - FUNC_IDENTIFIER
TeamSide - DONE - KEY_IDENTIFIER
TicksPerSecond - DONE - KEY_IDENTIFIER
Time - DONE - KEY_IDENTIFIER
TimeMod - DONE - FUNC_IDENTIFIER

U
-----------------------
UniqHitCount - DONE - KEY_IDENTIFIER

V
-----------------------
Var - done - FUNC_VAR
Vel - done - KEYWORD

W
-----------------------
Win - DONE - KEY_IDENTIFIER


Keywords

"vel" - DONE - KEYWORD
"velx" - DONE - KEYWORD
"vely" - DONE - KEYWORD
"hitvelx" - DONE - KEYWORD
"hitvely" - DONE - KEYWORD
"screenposy" - DONE - KEYWORD
"screenposx" - DONE - KEYWORD
"posy" - DONE - KEYWORD
"posx" - DONE - KEYWORD
"p2bodydistx" - DONE - KEYWORD
"p2bodydisty" - DONE - KEYWORD
"parentdistx" - DONE - KEYWORD
"parentdisty" - DONE - KEYWORD
"p2distx" - DONE - KEYWORD
"p2disty" - DONE - KEYWORD
"rootdistx" - DONE - KEYWORD
"rootdisty" - DONE - KEYWORD
	*/
/* gobble up white-spaces */
case 567:
YY_RULE_SETUP
#line 1842 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{
    //SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer blank= "<< *yytext <<endl;
    yylloc->step();
}
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 1847 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "COMMENT" <<endl; 
	return token::COMMENT; }        
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 1850 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ yylloc->lines(yyleng); yylloc->step();
				SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer EOL= "<< "EOL" <<endl;
				return token::EOL;
				}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 1856 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_ASSIGN" <<endl; 
	return token::CMD_ASSIGN; }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 1858 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_NOTEQ" <<endl; 
	return token::CMD_NOTEQ; }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 1860 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_GREATERTHANEQ" <<endl; 
	return token::CMD_GREATERTHANEQ; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 1862 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LESSTHANEQ" <<endl; 
	return token::CMD_LESSTHANEQ; }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 1864 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGAND" <<endl; 
	return token::CMD_LOGAND; }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 1866 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGOR" <<endl; 
	return token::CMD_LOGOR; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 1868 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_SQUARE" <<endl; 
	return token::CMD_SQUARE; }
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 1870 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGXOR" <<endl; 
	return token::CMD_LOGXOR; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 1874 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{ ; }
	YY_BREAK
/* discard all other characters */
case 579:
YY_RULE_SETUP
#line 1878 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
{
    yylloc->step();
    SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Unknow caracter= "<< *yytext <<endl;
  
}			  
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 1883 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 8956 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler/cmdscanner.scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4510 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4510 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4509);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1883 "D:\\Projetos\\c++\\GameEngine\\sgf\\Gamecore\\compiler\\CMDCompiler\\cmdscanner.l"

	/*** END EXAMPLE - Change the example lexer rules above ***/
	/*** Additional Code bellow ***/
namespace CmdCompiler {

CScanner::CScanner(std::istream* in,
		 std::ostream* out)
    : CmdFlexLexer(in, out)
{
}

CScanner::~CScanner()
{
}

void CScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

float CScanner::toFloat() {
char *tempNumber=new char[yyleng+1];
for (int i = 0; i < yyleng ; i++)
{
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<i<<"] = " << yytext[i] << endl;
tempNumber[i]=yytext[i];

}
tempNumber[yyleng]='\0';
float rez = 0, fact =1;
if (*tempNumber == '-') {
tempNumber++;
fact = -1;
}
int point_seen =0;
for (int j =0; j < yyleng; j++) {
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<j<<"] = " << tempNumber[j] << endl;
	if (tempNumber[j] == '.'){
	point_seen =1;
	}else{
	int d = tempNumber[j] - '0';
	if (d >=0 && d <=9) {
		if (point_seen) fact /= 10.0f;
		rez = rez * 10.0f + (float)d;
		//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer rez = " << rez << endl;

		}
	}
}
//delete tempNumber;
return rez * fact;
}

float CScanner::toFloatX() {
char *tempNumber=new char[yyleng+2];
for (int i = 0; i < yyleng ; i++)
{
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<i<<"] = " << yytext[i] << endl;
tempNumber[i]=yytext[i];

}
tempNumber[yyleng]='\0';
float rez = 0, fact =1;
if (*tempNumber == '-') {
tempNumber++;
fact = -1;
}
int point_seen =0;
for (int j =0; j < yyleng; j++) {
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<j<<"] = " << tempNumber[j] << endl;
	if (tempNumber[j] == '.'){
	point_seen =1;
	}else{
	int d = tempNumber[j] - '0';
	if (d >=0 && d <=9) {
		if (point_seen) fact /= 10.0f;
		rez = rez * 10.0f + (float)d;
		//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer rez = " << rez << endl;

		}
	}
}
//delete tempNumber;
return rez * fact;
}

void CScanner::destroyComment()
{
char c;

   c= yyinput();
   while (c != '\n' && c != 0)
   {	
	c=yyinput();

   }
   
 
}


}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
/*
int CmdFlexLexer::yylex()
{
    std::cerr << "in CmdFlexLexer::yylex() !" << endl;
    return 0;
}  
*/
/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */
/*
int CmdFlexLexer::Cmdwrap()
{
    return 1;
}
*/
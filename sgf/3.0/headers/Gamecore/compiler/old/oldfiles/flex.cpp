#line 2 "flex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 379
#define YY_END_OF_BUFFER 380
static yyconst short int yy_accept[1962] =
    {   0,
        0,    0,  380,  379,    4,    5,   21,  379,   19,   26,
       12,   13,   10,    8,    6,    9,  379,   11,    3,   15,
       14,   32,   29,   31,   17,   18,   28,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  318,
      319,  320,   27,   25,    4,   30,    0,   16,   22,   20,
        2,    0,    3,   33,   34,    0,   24,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   97,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  135,    0,    0,
        0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  177,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   23,    1,    0,   98,    0,
      372,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,    0,    0,    0,    0,    0,

        0,    0,    0,  119,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      143,    0,    0,    0,    0,    0,  373,    0,    0,    0,
        0,  333,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  180,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  201,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      206,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  212,    0,    0,    0,  215,    0,    0,    0,

        0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
      335,    0,  101,    0,  107,    0,  108,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,
      117,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  359,    0,    0,    0,    0,  336,    0,    0,  124,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  140,    0,  144,    0,
        0,    0,    0,  154,    0,  276,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  330,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  220,    0,    0,  307,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  350,  353,    0,  351,  354,
      352,    0,    0,    0,    0,  100,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  376,    0,  115,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  263,    0,    0,    0,
      356,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
        0,    0,  174,    0,    0,  281,    0,    0,    0,    0,
      181,  182,    0,    0,    0,  183,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      231,    0,  377,    0,  316,    0,    0,    0,  213,  214,
        0,    0,    0,    0,    0,  315,  216,    0,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  343,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  255,   90,  120,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  337,    0,    0,    0,    0,    0,    0,  261,
        0,  262,    0,  264,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,    0,    0,   89,  221,    0,    0,
        0,    0,  145,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  277,  162,    0,    0,  167,    0,  169,    0,  172,
      173,  227,    0,    0,    0,    0,  228,    0,    0,    0,
        0,    0,    0,  284,    0,  286,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  192,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  374,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
      331,    0,    0,    0,    0,    0,    0,    0,  205,    0,
        0,    0,    0,    0,    0,    0,    0,  317,  308,    0,
      311,  312,  313,    0,  314,    0,    0,    0,    0,  355,
        0,    0,    0,  341,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  242,
        0,    0,    0,    0,  357,    0,    0,    0,  114,  250,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  260,    0,  358,    0,
        0,    0,    0,  129,  130,    0,    0,  346,    0,    0,
        0,    0,    0,    0,    0,  270,  141,  271,    0,    0,
        0,  147,    0,    0,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    0,    0,  159,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
        0,    0,  283,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  190,    0,    0,    0,    0,  195,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  323,    0,    0,  202,
        0,    0,  297,    0,  204,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  229,  210,    0,    0,    0,
        0,    0,    0,    0,  217,  338,  339,    0,    0,  233,
      234,    0,  236,  237,  102,    0,  106,  340,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  348,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,  254,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  329,
        0,    0,    0,  230,    0,    0,  125,    0,    0,  325,

      127,    0,    0,    0,    0,    0,    0,    0,    0,  133,
      134,    0,    0,    0,    0,  137,    0,  324,  146,  272,
        0,    0,    0,    0,    0,    0,    0,    0,  152,  275,
      155,    0,    0,    0,    0,    0,    0,  165,  166,    0,
        0,    0,    0,  222,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  287,  184,  288,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  207,  208,    0,

       95,    0,    0,    0,    0,    0,  334,    0,    0,   88,
      235,    0,    0,  105,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   35,    0,    0,
        0,    0,    0,    0,    0,    0,  366,    0,  364,  361,
      362,  344,    0,  327,    0,    0,    0,    0,  126,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      269,    0,    0,  375,    0,  148,    0,    0,    0,    0,
        0,    0,    0,  156,  157,    0,  160,  161,    0,    0,
      170,    0,  224,    0,    0,    0,    0,    0,    0,    0,

        0,  285,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  293,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      347,    0,  203,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  309,    0,    0,    0,  219,
      103,    0,    0,    0,  240,    0,  109,    0,    0,    0,
      244,    0,  112,  246,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  328,    0,    0,    0,    0,
      342,    0,  128,    0,    0,  266,  267,    0,    0,    0,

        0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,    0,  168,    0,    0,    0,
        0,    0,    0,    0,  321,    0,  282,    0,    0,    0,
      289,    0,    0,    0,    0,    0,  193,  194,    0,  197,
        0,    0,    0,  332,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  298,
      299,  300,    0,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,    0,    0,    0,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  247,  248,    0,    0,
       36,    0,    0,    0,    0,    0,    0,    0,    0,   44,

        0,  252,    0,    0,  360,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  268,    0,    0,    0,    0,
      138,    0,  149,  150,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  225,    0,    0,    0,    0,    0,    0,
      179,    0,  186,  188,  191,  349,    0,  291,    0,  292,
      198,  199,    0,    0,    0,    0,    0,    0,    0,   53,
        0,    0,    0,    0,   47,   48,  295,    0,    0,    0,
        0,    0,  304,    0,    0,    0,    0,  310,    0,    0,
        0,    0,    0,  104,    0,    0,  241,    0,  111,  243,
      245,    0,    0,   37,    0,    0,    0,    0,   43,    0,

       41,    0,    0,    0,    0,  363,  257,    0,    0,    0,
      259,    0,    0,    0,  131,  132,  345,    0,  273,    0,
      274,    0,    0,    0,    0,  153,  163,  164,  223,    0,
      175,  176,  279,  280,    0,    0,    0,    0,  290,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  296,    0,  301,    0,    0,  305,  306,    0,  211,
        0,    0,    0,    0,    0,    0,  239,    0,    0,    0,
        0,    0,    0,    0,    0,  251,    0,    0,    0,    0,
      258,    0,  123,    0,   91,  265,    0,    0,    0,    0,
        0,    0,  226,  178,    0,    0,    0,  196,  200,   51,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      326,  302,    0,    0,    0,    0,    0,    0,    0,  232,
        0,    0,  249,   40,    0,    0,    0,    0,    0,    0,
      256,    0,    0,    0,    0,  322,   92,    0,    0,    0,
        0,  185,    0,    0,   52,    0,    0,    0,    0,    0,
       59,   60,    0,    0,    0,  303,  209,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,   82,  187,  189,    0,    0,    0,    0,   57,
       58,    0,    0,    0,    0,    0,    0,    0,   70,    0,

        0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  365,    0,    0,
        0,    0,   54,    0,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  238,    0,
        0,    0,    0,   39,    0,    0,  370,    0,    0,    0,
      122,    0,    0,    0,    0,   50,    0,   56,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,  253,  369,  368,    0,  367,    0,    0,    0,
        0,   62,   63,    0,    0,    0,    0,   76,    0,    0,
        0,    0,   66,   67,    0,    0,    0,    0,    0,    0,

        0,  371,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   73,   71,   68,   69,    0,    0,    0,   64,    0,
        0,   45,    0,   80,    0,    0,    0,    0,    0,    0,
       72,    0,    0,   65,   38,    0,    0,    0,    0,   55,
        0,    0,    0,    0,    0,   46,    0,    0,    0,    0,
       79,   77,    0,   75,   81,    0,   83,   78,   74,   84,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   17,   17,   17,   17,   17,   22,   23,   24,
       25,   26,    1,    1,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       27,    1,   28,   29,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,    1,   57,    1,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[1963] =
    {   0,
        0,    0, 2015, 2016,   57, 2016, 1989, 2007, 2016, 2004,
     2016, 2016, 2000, 2016, 2016, 2016,   45, 2016,   52, 2016,
     2016, 1985, 2016, 1984, 1974, 2016, 1978, 2016,   42,   58,
       63,   48,   36,   97,   71,   64,   87, 1955,   65,   81,
       89, 1969,  132,  112,  148,  127, 1960,   76,   29,   85,
       96, 1958, 1945, 2016,  142, 2016, 1995, 2016, 2016, 2016,
      187,  192,  199, 2016, 2016, 1969, 2016, 1950, 1953, 1963,
     1946, 1947,   96, 1948,  117, 1947,  116,  129, 1942, 1958,
     1944, 1945, 1944, 1948, 1955, 1950,  142, 1936,  118,  123,
     1934, 1951, 1929, 1934,  204,  131, 1947, 1933, 1929,  195,

     1945, 1932, 1924,  157, 1942, 1930,  165, 2016, 1936, 1926,
      190, 1931, 1931, 1923, 1930, 2016,  192,  187,  197, 1923,
     1921, 1913,  158, 1926, 1917,  201, 1916, 1915,  204, 1910,
     1902, 2016, 1925,   76,  203, 1911,  214,  208, 1906, 1911,
      195, 1913, 1917,  145, 1899,  223, 1903, 1899,  188, 1916,
      227,  158, 1898, 1899,   43,  214, 1902, 1891,  227, 1906,
     1906, 1907, 1903, 1903, 1901, 2016,  255, 1886, 2016, 1886,
     2016, 1899,  227, 1881, 1886, 1889, 1888, 1886, 1893, 1883,
     1891, 1881, 1893, 1885, 1881, 1890, 1886, 1871, 1876,  219,
     1886, 1871, 1872, 1865, 2016, 1871, 1881, 1880, 1875, 1859,

     1862, 1854, 1857, 1863,  230, 1862, 1899, 1857, 1868, 1857,
     1852, 1854,  236, 1862, 1858, 1843, 1843, 1845, 1846, 1841,
      254, 1848, 1844, 1837, 1852,  244, 1849, 1848, 1849, 1833,
     2016, 1847, 1846, 1847, 1840, 1843, 2016, 1842, 1838, 1833,
      245, 1825, 1842, 1827, 1832, 1831, 1824, 1837, 1817, 1835,
     1834,  276, 1829, 1814, 1813, 1812, 1805,  290, 1824, 1806,
     1817, 1822, 1810, 1809, 1818, 1802, 1807, 1815, 1813,  261,
     1813, 1813, 1800, 1812, 1798, 1812, 1792, 1795, 1805,  245,
     2016, 1802, 1795, 1796, 1801, 1791, 1797, 1789, 1797, 1796,
     1783, 1778,  279,  298, 1793, 1777,  284, 1790, 1783, 1791,

     1787, 1780, 1785, 1789, 2016, 1771, 1767, 1762, 1781, 1784,
     2016, 1779,  263, 1769, 2016, 1764, 2016, 1778, 1765, 1774,
     1766, 1757, 1771, 2016, 1761, 1767, 1755, 1754, 1770, 1750,
      267, 1762, 1783, 1753, 1748, 1753, 1757, 1755, 1747, 1745,
     1746,  303,  302, 1741, 1753, 1752, 2016, 1736, 1734, 2016,
      281, 1745, 1744, 1738, 1747, 1745, 1734, 1744, 1722, 1731,
     1740, 1743, 1739, 1720, 1740, 1732, 1730, 1733, 1718, 1718,
     1734, 1716, 1721, 1719, 1719, 1710,  306, 1714,  264, 1724,
     1719, 1720,  313, 2016, 1716, 2016,  257, 1719,  304, 1722,
     1717, 1708, 1716, 1700, 1712, 1695, 1703, 1714, 1701, 1700,

     1708, 1693, 1695, 1685, 1694, 1686, 1691, 1690, 1690, 1698,
     1693, 1692,  313,  278, 1696, 1681, 1693, 1679, 1677,  331,
     1680, 1672, 1671, 1674, 1687, 1686, 1684,  233, 1684, 1668,
     1701, 1680, 1683, 1674, 1664, 1663, 1675,  338, 1661, 1656,
     1676, 1671,  310, 1656,  317, 1655, 1666, 2016, 2016, 1654,
     1663, 1665, 1665, 1667, 1662,  303, 1662, 1644, 1661, 1658,
     1656, 1653, 1645, 1654, 1649, 2016, 1656, 1651, 2016, 1654,
     2016, 1656, 1644, 1645, 1635, 2016, 1638,  336,  323,  333,
     1645, 1628, 1636, 1628, 1641, 1638, 1628, 1639, 1632, 1635,
     1636, 2016, 1624, 2016, 1632, 1627, 1630,  358, 1631, 1618,

     1631, 1630, 1629, 1625, 1639, 1620,  367, 1611, 1611, 1623,
     1614, 1617, 2016, 1615, 1613, 1614, 1613, 1616, 1607, 1595,
     1594, 1609, 1607, 1593, 1636, 1605, 2016, 1587, 1601, 1594,
     2016, 1600, 1583, 1602, 1589, 1589, 1595, 1594, 1580, 1577,
     1580, 1590, 1589, 1585, 1588, 1590, 1585, 1615, 1573, 1578,
     1565,  329, 1560, 1569, 1562, 1573, 1576, 1575, 1554, 1558,
     1572, 1560, 1563, 1556, 1558, 1554, 1551, 1565, 1544, 1548,
     1562, 1561, 1560, 1544, 1558, 1557, 1557, 1551,  334, 2016,
     1537, 1546, 2016, 1538, 1536, 2016, 1536, 1551, 1535, 1538,
     2016, 2016, 1547, 1545, 1529,  355, 1528,  351, 1544, 1525,

     1536, 1531, 1538, 1537, 1522, 1531,  331, 1525, 1524, 1517,
     1532, 1518,  392, 1514, 1519, 1518, 1522, 1525,  359, 1522,
     1514, 1511, 1525, 1507, 1504, 1508, 1513, 1505, 1519, 1504,
     2016, 1513, 2016, 1508, 1527, 1511, 1500, 1493, 2016, 2016,
     1508, 1499, 1501, 1489, 1493, 2016, 2016, 1489, 1493, 1501,
     1492, 1499, 2016, 1489, 1494, 1495, 1493, 1494, 1479, 1475,
     1490, 1489, 1484, 1479, 1475, 1470, 1470,  347, 1474, 1480,
      180,  366,  278,  337,  375,  341,  350,  341,  362, 2016,
      381,  376,  394,  362,  374,  374,  388,  382,  387,  398,
      379,  382,  396,  399,  410, 2016, 2016,  412,  400,  406,

      413,  410,  398,  399,  401,  401,  406,  418,  422,  422,
      427,  425, 2016,  419,  418,  410,  408,  414,  431, 2016,
      424, 2016,  423,  437,  427,  422,  422,  431,  438,  470,
     2016,  437,  442,  446,  443,  429, 2016, 2016,  446,  427,
      432,  446, 2016,  442,  437,  442,  436,  454,  446,  460,
      442,  449,  442,  449,  464,  454,  456,  453,  450,  461,
      465, 2016, 2016,  469,  500, 2016,  455, 2016,  471, 2016,
     2016, 2016,  470,  463,  459,  475, 2016,  461,  478,  463,
      465,  476,  482, 2016,  482, 2016,  484,  489,  486,  492,
      480,  481,  476,  496,  478, 2016,  481,  496,  501,  484,

      489,  500,  505,  497,  507, 2016,  488,  502,  492,  494,
      508,  505,  497,  508,  498,  499,  510, 2016,  516,  509,
     2016,  520,  511,  502,  507,  525,  529,  513, 2016,  530,
      529,  531,  532,  522,  535,  522,  521, 2016, 2016,  540,
     2016, 2016, 2016,  523, 2016,  527,  542,  545,  547, 2016,
      549,  553,  543, 2016,  532,  553,  557,  547,  540,  548,
      543,  558,  559,  550,  550,  558,  547,  568,  565, 2016,
      570,  557,  572,  552, 2016,  561,  556,  568, 2016, 2016,
      573,  561,  560,  575,  570,  568,  583,  565,  601,  582,
      588,  578,  578,  573,  573,  589,  590,  587,  584,  576,

      587,  597,  588,  597,  598,  590,  586,  602,  599,  599,
      604,  594,  604,  607,  608,  613, 2016,  590, 2016,  601,
      597,  598,  614,  616,  603,  617,  618, 2016,  600,  621,
      618,  624,  617,  612,  626, 2016, 2016, 2016,  623,  628,
      614, 2016,  631,  613,  619,  622,  625,  622,  639,  640,
      621,  622,  633,  644,  636,  642,  647,  644,  630,  631,
      643,  650,  641,  642,  643,  660,  655,  664,  661, 2016,
      663,  647, 2016,  643,  666,  647,  652,  653,  671,  655,
      667,  659,  658,  659,  656,  669,  662, 2016,  659,  683,
      670,  671,  674,  668,  688,  672,  671,  691,  678,  693,

      691,  681,  696,  695,  696,  687, 2016,  683,  697, 2016,
      688,  704, 2016,  685, 2016,  698,  690,  708,  701,  696,
      692,  708,  709,  710,  698, 2016, 2016,  730,  719,  708,
      719,  700,  713,  722, 2016, 2016, 2016,  721,  724, 2016,
     2016,  707, 2016, 2016,  718,  713, 2016, 2016,  731,  730,
      717,  725,  726,  738,  723,  728,  726,  740,  737,  746,
      732, 2016,  739,  749,  746,  740,  752,  736,  739,  751,
      753,  753,  741,  739,  740,  757,  748, 2016, 2016,  750,
      764,  747,  755,  753,  764,  758,  759,  752,  765, 2016,
      754,  754,  772, 2016,  772,  777, 2016,  761,  764, 2016,

      765,  762,  765,  783,  780,  781,  778,  768,  774, 2016,
     2016,  770,  771,  783,  781, 2016,  794, 2016, 2016, 2016,
      778,  781,  797,  795,  795,  796,  817,  785, 2016, 2016,
     2016,  800,  787,  801,  803,  788,  790, 2016, 2016,  794,
      796,  787,  793, 2016,  813,  795,  798,  798,  800,  805,
      815,  802,  817, 2016, 2016, 2016,  818,  819,  824,  814,
      823,  819,  820,  814,  827,  858,  824,  814,  814,  817,
      832,  833,  821,  855,  840,  819,  822,  840,  838,  861,
      837,  844,  848,  849,  846,  843, 2016,  848,  836,  836,
      842,  842,  855,  853,  837,  860,  850, 2016, 2016,  844,

      877,  857,  855,  858,  853,  888, 2016,  871,  870, 2016,
     2016,  861,  868, 2016,  866,  876,  860,  862,  877,  868,
      875,  880,  866,  880,  870,  876,  870,  889,  871,  890,
      880,  910,  876,  893,  893,  896,  885, 2016,  890,  889,
      891,  892,  902,  902,  900,  900, 2016,  887, 2016, 2016,
     2016, 2016,  909, 2016,  898,  910,  911,  900, 2016,  911,
      912,  900,  900,  907,  901,  910,  919,  915,  903,  917,
     2016,  911,  909, 2016,  916, 2016,  918,  928,  927,  915,
      915,  934,  917, 2016, 2016,  920, 2016, 2016,  919,  935,
     2016,  925, 2016,  923,  942,  935,  925,  945,  927,  924,

      941, 2016,  936,  939,  949,  949,  950,  943,  944,  946,
      955,  937,  944,  960,  952,  993,  944, 2016,  964,  968,
      968,  987,  959,  990,  968,  961,  993,  964,  968,  969,
     2016,  962,  964,  980,  980,  982,  971,  979,  984,  985,
      971,  991,  988,  982,  974, 2016,  991,  996,  978,  979,
     2016,  987,  992,  993, 2016,  998, 2016, 1000,  986,  993,
     2016, 1003, 2016, 1020, 1006,  997, 1006, 1004, 1013, 1013,
     1002, 1035, 1003, 1014, 1000, 1010, 1020, 1007, 1021, 1016,
     1009, 1025, 1030, 1027, 1022, 2016, 1033, 1020, 1027, 1028,
     2016, 1020, 2016, 1030, 1039, 2016, 2016, 1036, 1029, 1038,

     1031, 1044, 1026, 2016, 1032, 1028, 1045, 1031, 1046, 1043,
     1035, 1034, 1054, 1051, 2016, 1083, 2016, 1053, 1039, 1048,
     1054, 1088, 1059, 1059, 2016, 1056, 2016, 1051, 1047, 1048,
     2016, 1065, 1065, 1066, 1057, 1067, 2016, 2016, 1054, 2016,
     1071, 1052, 1069, 2016, 1078, 1062, 1070, 1067, 1079, 1068,
     1065, 1071, 1086, 1065, 1084, 1086, 1067, 1088, 1085, 2016,
     2016, 2016, 1081, 1095, 1079, 1093, 1095, 1095, 1098, 2016,
     1088, 1083, 1095, 1084, 1085, 1106, 2016, 1099, 1104, 1094,
     1110, 1092, 1088, 1094, 1095, 1096, 2016, 2016, 1116, 1111,
     2016, 1114, 1115, 1116, 1103, 1104, 1109, 1111, 1111, 2016,

     1122, 2016, 1119, 1120, 2016, 1119, 1113, 1127, 1130, 1130,
     1116, 1123, 1118, 1119, 1132, 2016, 1135, 1123, 1137, 1122,
     2016, 1140, 2016, 2016, 1136, 1126, 1129, 1133, 1148, 1147,
     1147, 1128, 2016, 2016, 1142, 1147, 1132, 1154, 1139, 1141,
     2016, 1152, 1142, 1143, 2016, 2016, 1160, 2016, 1160, 2016,
     2016, 2016, 1147, 1164, 1153, 1184, 1164, 1186, 1157, 2016,
     1154, 1154, 1160, 1161, 2016, 2016, 2016, 1157, 1164, 1172,
     1176, 1180, 2016, 1178, 1163, 1169, 1165, 2016, 1168, 1174,
     1174, 1177, 1177, 2016, 1189, 1180, 2016, 1189, 2016, 2016,
     2016, 1176, 1183, 2016, 1190, 1179, 1182, 1190, 2016, 1215,

     2016, 1181, 1186, 1190, 1199, 1185, 2016, 1195, 1182, 1188,
     2016, 1200, 1190, 1206, 2016, 2016, 2016, 1193, 2016, 1194,
     2016, 1204, 1194, 1202, 1214, 2016, 2016, 2016, 2016, 1198,
     2016, 2016, 2016, 2016, 1199, 1207, 1212, 1213, 2016, 1219,
     1204, 1214, 1212, 1223, 1222, 1227, 1211, 1246, 1212, 1215,
     1229, 2016, 1229, 2016, 1233, 1234, 2016, 2016, 1225, 2016,
     1230, 1225, 1257, 1232, 1239, 1230, 2016, 1237, 1243, 1243,
     1244, 1231, 1250, 1233, 1233, 2016, 1252, 1250, 1271, 1248,
     2016, 1254, 2016, 1240, 2016, 2016, 1255, 1241, 1241, 1260,
     1260, 1260, 2016, 2016, 1261, 1255, 1256, 2016, 2016, 2016,

     1250, 1262, 1253, 1272, 1256, 1290, 1252, 1277, 1276, 1274,
     2016, 2016, 1277, 1278, 1262, 1299, 1283, 1265, 1302, 2016,
     1287, 1271, 2016, 2016, 1277, 1283, 1275, 1274, 1286, 1281,
     2016, 1296, 1285, 1290, 1281, 2016, 2016, 1290, 1296, 1320,
     1294, 2016, 1302, 1303, 2016, 1290, 1305, 1308, 1298, 1290,
     2016, 2016, 1314, 1317, 1300, 2016, 2016, 1307, 1319, 1321,
     1300, 1311, 1324, 1309, 1308, 1326, 1312, 1321, 1325, 1322,
     1335, 1324, 1329, 1321, 1332, 1332, 1337, 1324, 2016, 1329,
     1361, 1341, 2016, 2016, 2016, 1328, 1329, 1339, 1337, 2016,
     2016, 1341, 1341, 1349, 1339, 1355, 1334, 1353, 2016, 1356,

     1356, 1345, 1361, 1340, 1360, 2016, 1360, 1346, 1353, 1354,
     1364, 1352, 1355, 1354, 1368, 1373, 1362, 2016, 1356, 1392,
     1372, 1361, 2016, 1395, 2016, 1361, 1397, 1378, 1364, 1400,
     1383, 1383, 1367, 1378, 1405, 1406, 1389, 1389, 2016, 1394,
     1386, 1381, 1393, 2016, 1394, 1387, 2016, 1383, 1382, 1397,
     2016, 1395, 1386, 1396, 1382, 2016, 1404, 2016, 2016, 1408,
     1400, 1427, 1428, 1430, 1392, 1417, 1407, 1435, 1408, 1410,
     2016, 1420, 2016, 2016, 2016, 1421, 2016, 1422, 1407, 1420,
     1427, 2016, 2016, 1422, 1431, 1411, 1430, 2016, 1451, 1413,
     1414, 1415, 2016, 2016, 1440, 1419, 1458, 1420, 1424, 1442,

     1423, 2016, 1439, 1436, 1447, 1431, 1433, 1450, 1450, 1434,
     1432, 2016, 2016, 2016, 2016, 1454, 1454, 1435, 2016, 1448,
     1456, 2016, 1455, 2016, 1443, 1455, 1445, 1455, 1482, 1483,
     2016, 1458, 1485, 2016, 2016, 1447, 1464, 1464, 1459, 2016,
     1490, 1452, 1453, 1493, 1455, 2016, 1460, 1466, 1468, 1459,
     2016, 2016, 1460, 2016, 2016, 1471, 2016, 2016, 2016, 2016,
     2016, 1515
    } ;

static yyconst short int yy_def[1963] =
    {   0,
     1961,    1, 1961, 1961, 1961, 1961, 1961, 1962, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1962, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
        0, 1961
    } ;

static yyconst short int yy_nxt[2075] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   19,   19,   19,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       28,   39,   40,   41,   42,   43,   28,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,  158,
       55,   61,   61,   61,   61,   61,   62,  159,   63,   63,
       63,   63,   63,   68,   69,   70,  290,   71,   89,   93,
       72,  291,   90,   73,   74,   75,   91,   76,   80,   94,
       77,   78,   79,   83,   81,   92,   82,   84,  106,  114,

       85,  102,  107,  115,   86,  103,  156,   87,  116,  117,
      157,  118,   88,   95,   95,   95,   95,   95,  104,  121,
      108,  105,  109,  110,  258,  119,  162,   96,  259,  160,
      111,  120,   97,  122,  174,  112,  161,  175,   98,  123,
      163,   99,  136,   55,  100,   55,  137,  164,  101,  125,
      126,  127,  128,  177,  180,  178,  138,  149,  199,  182,
      197,  150,  129,  205,  181,  151,  130,  198,  220,  131,
      132,  200,  206,  133,  152,  274,  134,  153,  183,  135,
      139,  154,  140,  192,  193,  194,  141,  216,  286,  142,
      195,  143,  275,  144,  145,  230,  287,  146,  147,  240,

      241,  217,  148,   61,   61,   61,   61,   61,  167,  167,
      167,  167,  167,   62,  221,   63,   63,   63,   63,   63,
       95,   95,   95,   95,   95,  210,  224,  233,  231,  211,
      235,  281,  244,  870,  245,  282,  234,  260,  270,  212,
      232,  225,  246,  247,  248,  252,  263,  261,  236,  249,
      271,  253,  266,  277,  254,  292,  264,  325,  267,  284,
      296,  293,  326,  609,  340,  265,  307,  278,  341,  285,
      297,  167,  167,  167,  167,  167,  308,  349,  373,  387,
      440,  610,  388,  350,  358,  359,  360,  361,  374,  362,
      389,  429,  363,  414,  390,  430,  441,  479,  364,  365,

      561,  456,  366,  367,  549,  368,  401,  402,  403,  453,
      562,  404,  480,  550,  405,  495,  496,  507,  406,  407,
      415,  408,  874,  518,  463,  416,  454,  455,  457,  464,
      519,  591,  592,  465,  564,  508,  545,  509,  417,  510,
      458,  620,  459,  511,  512,  554,  460,  589,  546,  555,
      556,  565,  626,  629,  547,  557,  639,  640,  627,  630,
      558,  590,  559,  598,  662,  599,  658,  600,  601,  659,
      875,  664,  746,  747,  801,  774,  663,  775,  660,  802,
      866,  791,  878,  879,  661,  787,  621,  665,  681,  867,
      880,  682,  822,  683,  684,  792,  685,  788,  686,  687,

      698,  699,  823,  789,  881,  876,  688,  700,  824,  689,
      884,  871,  887,  872,  701,  873,  702,  888,  889,  882,
      703,  704,  808,  877,  885,  809,  890,  891,  810,  811,
      883,  892,  893,  894,  812,  886,  895,  813,  896,  897,
      814,  898,  899,  900,  901,  815,  816,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  924,  925,
      926,  927,  928,  929,  931,  932,  933,  934,  935,  936,
      937,  938,  923,  939,  940,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,

      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  969,  970,  971,  973,  974,  975,  930,  976,
      977,  972,  978,  979,  980,  981,  982,  983,  984,  968,
      985,  986,  987,  988,  989,  993,  991,  994,  995,  998,
      996,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,  990,
      992,  997, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1023, 1017, 1024, 1018, 1025, 1026, 1027, 1028,
     1029, 1019, 1032, 1030, 1033, 1020, 1031, 1034, 1021, 1035,
     1036, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,

     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1105, 1121, 1122, 1106, 1123, 1124,
     1125, 1127, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145,
     1146, 1147, 1142, 1148, 1149, 1150, 1151, 1152, 1153, 1154,

     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1179, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1201, 1201, 1201,
     1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1202, 1212, 1214, 1215, 1216, 1217, 1218, 1213, 1219, 1220,
     1222, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,

     1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271,
     1272, 1273, 1274, 1270, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1343, 1201, 1201, 1201, 1201, 1201, 1344, 1345,

     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1386, 1387, 1388, 1390, 1389, 1391, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1414, 1411, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1425, 1426, 1427, 1428,
     1429, 1430, 1412, 1431, 1432, 1433, 1434, 1435, 1413, 1436,
     1437, 1438, 1439, 1424, 1440, 1441, 1442, 1443, 1444, 1445,

     1447, 1448, 1449, 1446, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1467, 1469, 1470, 1471, 1472, 1473, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1474, 1485, 1486, 1487, 1468,
     1488, 1489, 1490, 1475, 1491, 1492, 1493, 1494, 1476, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,

     1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1562, 1564, 1565, 1563,
     1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
     1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
     1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
     1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
     1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,

     1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
     1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
     1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
     1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
     1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1706,
     1707, 1708, 1705, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
     1716, 1717, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
     1737, 1738, 1739, 1740, 1741, 1742, 1718, 1743, 1744, 1745,

     1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
     1756, 1757, 1758, 1759, 1760, 1762, 1763, 1764, 1761, 1765,
     1766, 1767, 1768, 1769, 1770, 1771, 1772, 1777, 1778, 1773,
     1779, 1774, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
     1788, 1775, 1789, 1790, 1791, 1776, 1792, 1793, 1794, 1795,
     1796, 1800, 1801, 1802, 1797, 1803, 1805, 1806, 1807, 1804,
     1808, 1809, 1798, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
     1817, 1818, 1819, 1799, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,

     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
     1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1880, 1881, 1882, 1883, 1884, 1879, 1885,
     1889, 1890, 1891, 1886, 1892, 1893, 1894, 1897, 1895, 1898,
     1899, 1887, 1896, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
     1907, 1908, 1888, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
     1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
     1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
     1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,

     1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1957, 1958, 1959, 1960,   57,  869,  868,  865,  864,
      863,  862,  861,  860,  859,  858,  857,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  847,  846,  845,  844,
      843,  842,  841,  840,  839,  838,  837,  836,  835,  834,
      833,  832,  831,  830,  829,  828,  827,  826,  825,  821,
      820,  819,  818,  817,  807,  806,  805,  804,  803,  800,
      799,  798,  797,  796,  795,  794,  793,  790,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  773,
      772,  771,  770,  769,  768,  767,  766,  765,  764,  763,

      762,  761,  760,  759,  758,  757,  756,  755,  754,  753,
      752,  751,  750,  749,  748,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  697,  696,  695,  694,
      693,  692,  691,  690,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  638,  637,  636,  635,

      634,  633,  632,  631,  628,  625,  624,  623,  622,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  608,  607,
      606,  605,  604,  603,  602,  597,  596,  595,  594,  593,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  563,  560,  553,  552,  551,  548,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  517,  516,  515,  514,  513,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  494,

      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  462,  461,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  413,
      412,  411,  410,  409,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  372,  371,  370,  369,
      357,  356,  355,  354,  353,  352,  351,  348,  347,  346,

      345,  344,  343,  342,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  295,  294,  289,  288,  283,  280,  279,  276,
      273,  272,  269,  268,  262,  257,  256,  255,  251,  250,
      243,  242,  239,  238,  237,  229,  228,  227,  226,  223,
      222,  219,  218,  215,  214,  213,  209,  208,  207,  204,
      203,  202,  201,  196,  191,  190,  189,  188,  187,  186,
      185,  184,  179,  176,  173,  172,  171,  170,  169,  168,

       58,  166,  165,  155,  124,  113,   67,   66,   65,   64,
       60,   59,   58,   56, 1961,    3, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961
    } ;

static yyconst short int yy_chk[2075] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   49,
        5,   17,   17,   17,   17,   17,   19,   49,   19,   19,
       19,   19,   19,   29,   29,   29,  155,   29,   32,   33,
       29,  155,   32,   29,   29,   29,   32,   29,   30,   33,
       29,   29,   29,   31,   30,   32,   30,   31,   36,   39,

       31,   35,   36,   39,   31,   35,   48,   31,   39,   39,
       48,   40,   31,   34,   34,   34,   34,   34,   35,   41,
       37,   35,   37,   37,  134,   40,   51,   34,  134,   50,
       37,   40,   34,   41,   73,   37,   50,   73,   34,   41,
       51,   34,   44,   55,   34,   55,   44,   51,   34,   43,
       43,   43,   43,   75,   77,   75,   44,   46,   90,   78,
       89,   46,   43,   96,   77,   46,   43,   89,  107,   43,
       43,   90,   96,   43,   46,  144,   43,   46,   78,   43,
       45,   46,   45,   87,   87,   87,   45,  104,  152,   45,
       87,   45,  144,   45,   45,  117,  152,   45,   45,  123,

      123,  104,   45,   61,   61,   61,   61,   61,   62,   62,
       62,   62,   62,   63,  107,   63,   63,   63,   63,   63,
       95,   95,   95,   95,   95,  100,  111,  118,  117,  100,
      119,  149,  126,  671,  126,  149,  118,  135,  141,  100,
      117,  111,  126,  126,  126,  129,  137,  135,  119,  126,
      141,  129,  138,  146,  129,  156,  137,  190,  138,  151,
      159,  156,  190,  428,  205,  137,  173,  146,  205,  151,
      159,  167,  167,  167,  167,  167,  173,  213,  226,  241,
      280,  428,  241,  213,  221,  221,  221,  221,  226,  221,
      241,  270,  221,  258,  241,  270,  280,  313,  221,  221,

      387,  294,  221,  221,  379,  221,  252,  252,  252,  293,
      387,  252,  313,  379,  252,  331,  331,  342,  252,  252,
      258,  252,  673,  351,  297,  258,  293,  293,  294,  297,
      351,  414,  414,  297,  389,  342,  377,  342,  258,  343,
      294,  438,  294,  343,  343,  383,  294,  413,  377,  383,
      383,  389,  443,  445,  377,  383,  456,  456,  443,  445,
      383,  413,  383,  420,  479,  420,  478,  420,  420,  478,
      674,  480,  552,  552,  607,  579,  479,  579,  478,  607,
      668,  598,  676,  677,  478,  596,  438,  480,  498,  668,
      678,  498,  619,  498,  498,  598,  498,  596,  498,  498,

      507,  507,  619,  596,  679,  675,  498,  507,  619,  498,
      682,  672,  684,  672,  507,  672,  507,  685,  686,  681,
      507,  507,  613,  675,  683,  613,  687,  688,  613,  613,
      681,  689,  690,  691,  613,  683,  692,  613,  693,  694,
      613,  695,  698,  699,  700,  613,  613,  701,  702,  703,
      704,  705,  706,  707,  708,  709,  710,  711,  712,  714,
      715,  716,  717,  718,  719,  721,  723,  724,  725,  726,
      727,  728,  729,  730,  732,  733,  734,  735,  736,  739,
      740,  741,  724,  742,  744,  745,  746,  747,  748,  749,
      750,  751,  752,  753,  754,  755,  756,  757,  758,  759,

      760,  761,  764,  765,  767,  769,  773,  774,  775,  776,
      778,  779,  780,  781,  782,  783,  785,  787,  730,  788,
      789,  782,  790,  791,  792,  793,  794,  795,  797,  779,
      798,  799,  800,  801,  802,  804,  803,  805,  807,  809,
      808,  810,  811,  812,  813,  814,  815,  816,  817,  802,
      803,  808,  819,  820,  822,  823,  824,  825,  826,  827,
      828,  830,  831,  830,  832,  830,  833,  834,  835,  836,
      837,  830,  844,  840,  846,  830,  840,  847,  830,  848,
      849,  830,  851,  852,  853,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  867,  868,  869,

      871,  872,  873,  874,  876,  877,  878,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  918,  920,  921,  922,  923,  924,
      925,  926,  927,  929,  929,  930,  931,  932,  933,  934,
      935,  939,  940,  941,  924,  943,  944,  924,  945,  946,
      947,  948,  947,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  959,  960,  961,  962,  963,  964,
      965,  966,  961,  967,  968,  969,  971,  972,  974,  975,

      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  989,  990,  991,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
     1008, 1000, 1009, 1011, 1012, 1014, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1028, 1028, 1028, 1028,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1042,
     1028, 1045, 1046, 1049, 1050, 1051, 1052, 1045, 1053, 1054,
     1055, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1080, 1081, 1082, 1083, 1084, 1085, 1086,

     1087, 1088, 1089, 1091, 1092, 1093, 1095, 1096, 1098, 1099,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112,
     1113, 1114, 1115, 1109, 1117, 1121, 1122, 1123, 1124, 1125,
     1126, 1127, 1128, 1132, 1133, 1134, 1135, 1136, 1137, 1140,
     1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1200, 1201, 1201, 1201, 1201, 1201, 1202, 1203,

     1204, 1205, 1206, 1208, 1209, 1212, 1213, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1253,
     1255, 1256, 1257, 1258, 1257, 1260, 1261, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1282, 1286, 1289, 1290,
     1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303,
     1304, 1305, 1282, 1306, 1307, 1308, 1309, 1310, 1282, 1311,
     1312, 1312, 1313, 1298, 1314, 1315, 1316, 1317, 1319, 1320,

     1321, 1322, 1323, 1320, 1324, 1325, 1326, 1327, 1328, 1329,
     1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352,
     1353, 1354, 1356, 1358, 1359, 1348, 1360, 1362, 1364, 1342,
     1365, 1366, 1367, 1348, 1368, 1369, 1370, 1371, 1348, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1385, 1387, 1388, 1389, 1390, 1392, 1394, 1395,
     1398, 1399, 1400, 1401, 1402, 1403, 1405, 1406, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1414, 1416, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1426, 1428, 1429, 1430, 1432, 1433,

     1434, 1435, 1436, 1439, 1441, 1442, 1442, 1443, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1453,
     1456, 1457, 1458, 1459, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1471, 1472, 1473, 1474, 1475, 1476, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1486, 1489, 1490, 1492, 1493,
     1494, 1495, 1496, 1497, 1498, 1499, 1501, 1503, 1504, 1506,
     1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1517,
     1518, 1519, 1520, 1522, 1525, 1526, 1527, 1528, 1529, 1530,
     1531, 1532, 1532, 1535, 1536, 1537, 1537, 1538, 1539, 1540,
     1542, 1543, 1544, 1547, 1549, 1553, 1554, 1555, 1556, 1557,

     1558, 1559, 1561, 1562, 1563, 1564, 1568, 1569, 1570, 1571,
     1572, 1574, 1575, 1576, 1577, 1579, 1580, 1581, 1582, 1583,
     1585, 1586, 1588, 1592, 1593, 1595, 1596, 1597, 1598, 1600,
     1602, 1603, 1604, 1605, 1606, 1608, 1609, 1610, 1612, 1613,
     1614, 1618, 1620, 1622, 1623, 1624, 1625, 1630, 1635, 1636,
     1637, 1638, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
     1648, 1649, 1646, 1650, 1651, 1653, 1655, 1656, 1659, 1661,
     1662, 1663, 1664, 1665, 1666, 1668, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1677, 1678, 1679, 1680, 1682, 1684, 1687,
     1688, 1689, 1690, 1691, 1692, 1695, 1663, 1696, 1697, 1701,

     1702, 1703, 1704, 1705, 1706, 1707, 1707, 1708, 1709, 1710,
     1713, 1714, 1715, 1716, 1717, 1718, 1719, 1721, 1717, 1722,
     1725, 1726, 1727, 1728, 1729, 1730, 1732, 1733, 1734, 1732,
     1735, 1732, 1738, 1739, 1740, 1741, 1743, 1744, 1746, 1747,
     1748, 1732, 1749, 1750, 1750, 1732, 1753, 1754, 1755, 1758,
     1759, 1760, 1761, 1762, 1759, 1763, 1764, 1765, 1766, 1763,
     1767, 1768, 1759, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
     1776, 1777, 1778, 1759, 1780, 1781, 1782, 1786, 1787, 1788,
     1789, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1800, 1801,
     1802, 1803, 1804, 1805, 1807, 1808, 1809, 1810, 1811, 1812,

     1813, 1814, 1815, 1816, 1817, 1819, 1820, 1821, 1822, 1824,
     1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1840, 1841, 1842, 1843, 1845, 1846, 1848,
     1849, 1850, 1852, 1853, 1854, 1855, 1855, 1857, 1852, 1860,
     1861, 1862, 1863, 1860, 1864, 1865, 1865, 1867, 1866, 1868,
     1869, 1860, 1866, 1870, 1872, 1876, 1878, 1879, 1880, 1881,
     1884, 1885, 1860, 1886, 1887, 1889, 1890, 1891, 1892, 1892,
     1895, 1896, 1897, 1898, 1899, 1900, 1901, 1903, 1904, 1905,
     1906, 1907, 1908, 1909, 1910, 1911, 1916, 1917, 1918, 1920,
     1921, 1923, 1925, 1926, 1927, 1928, 1929, 1930, 1932, 1933,

     1936, 1937, 1938, 1939, 1941, 1942, 1943, 1944, 1945, 1947,
     1948, 1949, 1950, 1953, 1956, 1962,  670,  669,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  652,  651,  650,  649,  648,  645,  644,  643,
      642,  641,  638,  637,  636,  635,  634,  632,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  618,
      617,  616,  615,  614,  612,  611,  610,  609,  608,  606,
      605,  604,  603,  602,  601,  600,  599,  597,  595,  594,
      593,  590,  589,  588,  587,  585,  584,  582,  581,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,

      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  530,  529,  528,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  512,  511,  510,  509,  508,  506,  505,  504,  503,
      502,  501,  500,  499,  497,  496,  495,  493,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  477,
      475,  474,  473,  472,  470,  468,  467,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  455,  454,  453,  452,

      451,  450,  447,  446,  444,  442,  441,  440,  439,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  427,  426,
      425,  424,  423,  422,  421,  419,  418,  417,  416,  415,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  388,  385,  382,  381,  380,  378,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  349,  348,  346,  345,  344,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  330,

      329,  328,  327,  326,  325,  323,  322,  321,  320,  319,
      318,  316,  314,  312,  310,  309,  308,  307,  306,  304,
      303,  302,  301,  300,  299,  298,  296,  295,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  257,
      256,  255,  254,  253,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  240,  239,  238,  236,  235,  234,
      233,  232,  230,  229,  228,  227,  225,  224,  223,  222,
      220,  219,  218,  217,  216,  215,  214,  212,  211,  210,

      209,  208,  207,  206,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  194,  193,  192,  191,  189,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
      176,  175,  174,  172,  170,  168,  165,  164,  163,  162,
      161,  160,  158,  157,  154,  153,  150,  148,  147,  145,
      143,  142,  140,  139,  136,  133,  131,  130,  128,  127,
      125,  124,  122,  121,  120,  115,  114,  113,  112,  110,
      109,  106,  105,  103,  102,  101,   99,   98,   97,   94,
       93,   92,   91,   88,   86,   85,   84,   83,   82,   81,
       80,   79,   76,   74,   72,   71,   70,   69,   68,   66,

       57,   53,   52,   47,   42,   38,   27,   25,   24,   22,
       13,   10,    8,    7,    3, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "LexerRules.txt"
#define INITIAL 0
#line 2 "LexerRules.txt"
#include <io.h>
#include <stdio.h>
#include <string.h>
#include "token.h"
#include "lex.h"
#ifdef MSVC
#define  isatty _isatty  // for some reason isatty is called _isatty in VC..
#endif

void DestroyComment();
void CopyString();
void CopyStringID();
void CopyID();
int  CharToInt();	

int nLineNr=1;

#line 1484 "flex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 31 "LexerRules.txt"

#line 1633 "flex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1962 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2016 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 33 "LexerRules.txt"
case 2:
#line 34 "LexerRules.txt"
case 3:
YY_RULE_SETUP
#line 34 "LexerRules.txt"
{sscanf(yytext,"%f",&yylval.nFloat); 
				     return NUMBER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "LexerRules.txt"
{/*NOTHING*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 40 "LexerRules.txt"
{nLineNr++;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 41 "LexerRules.txt"
return ',';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "LexerRules.txt"
{/**/}     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "LexerRules.txt"
return '+';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "LexerRules.txt"
return '-';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "LexerRules.txt"
return '*';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "LexerRules.txt"
return '/';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "LexerRules.txt"
return '(';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "LexerRules.txt"
return ')';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 51 "LexerRules.txt"
{DestroyComment();}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "LexerRules.txt"
return ':';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "LexerRules.txt"
{CopyString();return STRING;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "LexerRules.txt"
return '[';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "LexerRules.txt"
return ']';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "LexerRules.txt"
return MOD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "LexerRules.txt"
return SQUARE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 60 "LexerRules.txt"
return LOGNOT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 61 "LexerRules.txt"
return LOGAND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 62 "LexerRules.txt"
return LOGOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 63 "LexerRules.txt"
return LOGXOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 64 "LexerRules.txt"
return NOT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 65 "LexerRules.txt"
return AND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 66 "LexerRules.txt"
return OR;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 67 "LexerRules.txt"
return XOR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 70 "LexerRules.txt"
return EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 71 "LexerRules.txt"
return NOTEQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 72 "LexerRules.txt"
return GREATER;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 73 "LexerRules.txt"
return LESS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 74 "LexerRules.txt"
return LESSEQUAL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 75 "LexerRules.txt"
return GREATEREQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 78 "LexerRules.txt"
return LIFE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 79 "LexerRules.txt"
return ATTACK;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 80 "LexerRules.txt"
return DEFENCE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 81 "LexerRules.txt"
return FALLDEFUP;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "LexerRules.txt"
return LIEDOWTIME;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "LexerRules.txt"
return AIRJUGGLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "LexerRules.txt"
return SPARKNO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "LexerRules.txt"
return GUARDSPARKNO;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "LexerRules.txt"
return KOECHO;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "LexerRules.txt"
return VOLUME;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "LexerRules.txt"
return INTEGERINDEX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "LexerRules.txt"
return FLOATINDEX;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "LexerRules.txt"
return XSCALE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "LexerRules.txt"
return YSCALE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "LexerRules.txt"
return GROUNDBACK;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "LexerRules.txt"
return GROUNDFRONT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "LexerRules.txt"
return AIRBACK;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "LexerRules.txt"
return AIRFRONT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "LexerRules.txt"
return HEIGHT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "LexerRules.txt"
return ATTACKDIST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "LexerRules.txt"
return PROJATTDIST;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "LexerRules.txt"
return PROJDOSCALE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 104 "LexerRules.txt"
return HEADPOSX;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 105 "LexerRules.txt"
return HEADPOSY;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "LexerRules.txt"
return MIDPOSX;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "LexerRules.txt"
return MIDPOSY;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 110 "LexerRules.txt"
return SHADOWOFFSET;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 112 "LexerRules.txt"
return DRAWOFFSETX;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 113 "LexerRules.txt"
return DRAWOFFSETY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "LexerRules.txt"
return WALKFWD;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "LexerRules.txt"
return WALKBACK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "LexerRules.txt"
return RUNFWDX;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "LexerRules.txt"
return RUNFWDY;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "LexerRules.txt"
return RUNBACKX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "LexerRules.txt"
return RUNBACKY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "LexerRules.txt"
return JUMPNEUY;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "LexerRules.txt"
return JUMPNEU;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "LexerRules.txt"
return JUMPBACK;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "LexerRules.txt"
return JUMPFWD;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "LexerRules.txt"
return RUNJUMPBACK;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "LexerRules.txt"
return RUNJUMPFWD;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 131 "LexerRules.txt"
return AIRJUMPNEUY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 132 "LexerRules.txt"
return AIRJUMPNEU;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "LexerRules.txt"
return AIRJUMPBACK;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 134 "LexerRules.txt"
return AIRJUMPFWD;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "LexerRules.txt"
return AIRJUMPNUM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "LexerRules.txt"
return AIRJUMPHEIGHT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "LexerRules.txt"
return YACCEL;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "LexerRules.txt"
return STANDFRICTION;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "LexerRules.txt"
return CROUCHFRICTION;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "LexerRules.txt"
return STATEDEF;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "LexerRules.txt"
return TYPE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "LexerRules.txt"
return PHYSICS;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "LexerRules.txt"
{}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "LexerRules.txt"
return JUGGLE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 152 "LexerRules.txt"
return FACEP2;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "LexerRules.txt"
return HITDEFPERSIST;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "LexerRules.txt"
return MOVEHITPERSIST;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "LexerRules.txt"
return HITCOUNTPERSIST;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "LexerRules.txt"
return STATE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 158 "LexerRules.txt"
sscanf(yytext,"trigger%f",&yylval.nFloat);return TRIGGER;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 159 "LexerRules.txt"
return TRIGGERALL;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 161 "LexerRules.txt"
sscanf(yytext,"F%f",&yylval.nFloat);return FX;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 163 "LexerRules.txt"
return ABS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 164 "LexerRules.txt"
return ACOS;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 165 "LexerRules.txt"
return ALIVE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 166 "LexerRules.txt"
return ANIM;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 167 "LexerRules.txt"
return ANIMELEM;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 168 "LexerRules.txt"
return ANIMELEMNO;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 169 "LexerRules.txt"
return ANIMELEMTIME;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "LexerRules.txt"
return ANIMEXIST;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "LexerRules.txt"
return ANIMTIME;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "LexerRules.txt"
return ASIN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 173 "LexerRules.txt"
return ATAN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 174 "LexerRules.txt"
return AUTHORNAME;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 175 "LexerRules.txt"
return BACKEEDGEBODYDIST;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 176 "LexerRules.txt"
return BACKEDGEDIST;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "LexerRules.txt"
return CANRECOVER;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 178 "LexerRules.txt"
return CEIL;		
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 179 "LexerRules.txt"
return COMMAND;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 180 "LexerRules.txt"
return CONST;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 181 "LexerRules.txt"
return COS;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 182 "LexerRules.txt"
return CTRL;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 183 "LexerRules.txt"
return DRAWGAME;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 184 "LexerRules.txt"
return EXP;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 185 "LexerRules.txt"
return FACING;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 186 "LexerRules.txt"
return FLOOR;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 187 "LexerRules.txt"
return FRONTEDGEBODYDIST;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 188 "LexerRules.txt"
return FRONTEDGEDIST;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 189 "LexerRules.txt"
return FVAR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 190 "LexerRules.txt"
return GAMETIME;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 191 "LexerRules.txt"
return GETHITVAR;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 192 "LexerRules.txt"
return HITCOUNT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "LexerRules.txt"
return HITDEFATTR;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "LexerRules.txt"
return HITFALL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 195 "LexerRules.txt"
return HITOVER;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 196 "LexerRules.txt"
return HITPAUSETIME;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 197 "LexerRules.txt"
return HITSHAKEOVER;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 198 "LexerRules.txt"
return HITVELX;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 199 "LexerRules.txt"
return HITVELY;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 200 "LexerRules.txt"
return PLID;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 201 "LexerRules.txt"
return IFELSE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 202 "LexerRules.txt"
return ISHELPER;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 203 "LexerRules.txt"
return INGUARDDIST;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 204 "LexerRules.txt"
return ISHOMETEAM;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 205 "LexerRules.txt"
return LIFE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 206 "LexerRules.txt"
return LIFEMAX;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 207 "LexerRules.txt"
return LN;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 208 "LexerRules.txt"
return LOG;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 209 "LexerRules.txt"
return LOSE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 210 "LexerRules.txt"
return LOSEKO;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 211 "LexerRules.txt"
return LOSETIME;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 212 "LexerRules.txt"
return MATCHNO;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 213 "LexerRules.txt"
return MATCHOVER;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 214 "LexerRules.txt"
return MOVECONTACT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 215 "LexerRules.txt"
return MOVEGUARDED;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 216 "LexerRules.txt"
return MOVEHIT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 217 "LexerRules.txt"
return MOVETYPE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 218 "LexerRules.txt"
return MOVEREVERSED;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 219 "LexerRules.txt"
return NAME;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 220 "LexerRules.txt"
return NUMENEMY;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 221 "LexerRules.txt"
return NUMEXPLOD;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 222 "LexerRules.txt"
return NUMHELPER;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 223 "LexerRules.txt"
return NUMPARTNER;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 224 "LexerRules.txt"
return NUMPROJ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 225 "LexerRules.txt"
return NUMPROJID;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 226 "LexerRules.txt"
return NUMTARGET;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 227 "LexerRules.txt"
return P1NAME;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 228 "LexerRules.txt"
return P2BODYDISTX;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 229 "LexerRules.txt"
return P2BODYDISTY;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 230 "LexerRules.txt"
return P2DISTX;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 231 "LexerRules.txt"
return P2DISTY;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 232 "LexerRules.txt"
return P2LIFE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 233 "LexerRules.txt"
return P2MOVETYPE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 234 "LexerRules.txt"
return P2NAME;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 235 "LexerRules.txt"
return P2STATENO;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 236 "LexerRules.txt"
return P2STATETYP;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 237 "LexerRules.txt"
return P3NAME;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 238 "LexerRules.txt"
return P4NAME;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 239 "LexerRules.txt"
return PALNO;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 240 "LexerRules.txt"
return PARENTDISTX;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 241 "LexerRules.txt"
return PARENTDISTY;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 242 "LexerRules.txt"
return PI;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 243 "LexerRules.txt"
return PLAYERIDEXIST;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 244 "LexerRules.txt"
return PREVSTATENO;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 245 "LexerRules.txt"
return POSXY;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 246 "LexerRules.txt"
return POSX;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 247 "LexerRules.txt"
return POSY;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 248 "LexerRules.txt"
return POWER;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 249 "LexerRules.txt"
return POWERMAX;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 250 "LexerRules.txt"
return PROJCANCLETIME;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 251 "LexerRules.txt"
return PROJCONTACT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 252 "LexerRules.txt"
return PROJCONTACTTIME;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 253 "LexerRules.txt"
return PROJGUARDED;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 254 "LexerRules.txt"
return PROJGUARDEDTIME;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 255 "LexerRules.txt"
return PROJHIT;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 256 "LexerRules.txt"
return PROJHITTIME;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 257 "LexerRules.txt"
return RANDOM;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 258 "LexerRules.txt"
return ROOTDISTX;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 259 "LexerRules.txt"
return ROOTDISTY;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 260 "LexerRules.txt"
return ROUNDNO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 261 "LexerRules.txt"
return ROUNDSEXISTED;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 262 "LexerRules.txt"
return ROUNDSTATE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 263 "LexerRules.txt"
return SCREENPOSX;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "LexerRules.txt"
return SCREENPOSY;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "LexerRules.txt"
return SELFANIMEXIST;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 266 "LexerRules.txt"
return SIN;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 267 "LexerRules.txt"
return STATENO;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 268 "LexerRules.txt"
return STATETYPE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 269 "LexerRules.txt"
return SYSFVAR;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 270 "LexerRules.txt"
return SYSVAR;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 271 "LexerRules.txt"
return TAN;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 272 "LexerRules.txt"
return TEAMMODE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 273 "LexerRules.txt"
return TEAMSIDE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 274 "LexerRules.txt"
return TICKSPERSECOND;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 275 "LexerRules.txt"
return TIMEMODE;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 276 "LexerRules.txt"
return UNIQHITCOUNT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 277 "LexerRules.txt"
return VAR;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 278 "LexerRules.txt"
return VELX;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 279 "LexerRules.txt"
return VELY;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 280 "LexerRules.txt"
return WIN;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 281 "LexerRules.txt"
return WINKO;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 282 "LexerRules.txt"
return WINTIME;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 283 "LexerRules.txt"
return WINPERFECT;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 285 "LexerRules.txt"
return AFTERIMAGE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 286 "LexerRules.txt"
return TIME;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 287 "LexerRules.txt"
return LENGTH;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 288 "LexerRules.txt"
return PALCOLOR;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 289 "LexerRules.txt"
return PALINVERTALL;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 290 "LexerRules.txt"
return PALBRIGHT;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 291 "LexerRules.txt"
return PALCONTRAST;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 292 "LexerRules.txt"
return PALPOSTBRIGHT;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 293 "LexerRules.txt"
return PALADD;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 294 "LexerRules.txt"
return PALMUL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 295 "LexerRules.txt"
return TIMEGAP;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 296 "LexerRules.txt"
return FRAMEGAP;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 297 "LexerRules.txt"
return TRANS; 
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 299 "LexerRules.txt"
return AFTERIMAGETIME;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 300 "LexerRules.txt"
return ALLPALFX;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 301 "LexerRules.txt"
return ANGLEADD;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 302 "LexerRules.txt"
return ANGLEDRAW;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 303 "LexerRules.txt"
return ANGLEMUL;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 304 "LexerRules.txt"
return ANGLESET;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 305 "LexerRules.txt"
return APPENDTOCLIPBOARD;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 306 "LexerRules.txt"
return ASSERTSPECIAL;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 307 "LexerRules.txt"
return ATTACKDIST;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 308 "LexerRules.txt"
return ATTACKMULSET;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 309 "LexerRules.txt"
return BGPALFX;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 310 "LexerRules.txt"
return BINDTOPARENT;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 311 "LexerRules.txt"
return BINDTOROOT;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 312 "LexerRules.txt"
return BINDTOTARGET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 313 "LexerRules.txt"
return CHANGEANIME;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 314 "LexerRules.txt"
return CHANGEANIME2;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 315 "LexerRules.txt"
return CHANGESTATE;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 316 "LexerRules.txt"
return CLEARCLIPBOARD;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 317 "LexerRules.txt"
return CTRLSET;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 318 "LexerRules.txt"
return DEFENCEMULSET;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 319 "LexerRules.txt"
return DESTROYSELF;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 320 "LexerRules.txt"
return DISPLAYTOCLIPBOARD;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 321 "LexerRules.txt"
return ENVSHAKE;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 322 "LexerRules.txt"
return EXPLOD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 323 "LexerRules.txt"
return EXPLODBINDTIME;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 324 "LexerRules.txt"
return FALLENVSHAKE;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 325 "LexerRules.txt"
return FORCEFEDDBACK;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 326 "LexerRules.txt"
return GAMEMAKEANIM;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 327 "LexerRules.txt"
return GRAVITY;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 328 "LexerRules.txt"
return HELPER;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 329 "LexerRules.txt"
return HITADD;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 330 "LexerRules.txt"
return HITBY;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 331 "LexerRules.txt"
return HITDEF;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 332 "LexerRules.txt"
return HITFALLDAMAGE;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 333 "LexerRules.txt"
return HITFALLSET;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 334 "LexerRules.txt"
return HITFALLVEL;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 335 "LexerRules.txt"
return HITOVERRIDE;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 336 "LexerRules.txt"
return HITVELSET;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 337 "LexerRules.txt"
return LIFEADD;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 338 "LexerRules.txt"
return LIFESET;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 339 "LexerRules.txt"
return MAKEDUST;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 340 "LexerRules.txt"
return MODIFYEXPLOD;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 341 "LexerRules.txt"
return MOVEHITRESET;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 342 "LexerRules.txt"
return NOTHITBY;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 343 "LexerRules.txt"
return TNULL;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 344 "LexerRules.txt"
return OFFSET;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 345 "LexerRules.txt"
return PALFX;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 346 "LexerRules.txt"
return PARENTVARADD;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 347 "LexerRules.txt"
return PARENTVARSET;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 348 "LexerRules.txt"
return PAUSE;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 349 "LexerRules.txt"
return PLAYERPUSH;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 350 "LexerRules.txt"
return PLAYSND;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 351 "LexerRules.txt"
return POSADD;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 352 "LexerRules.txt"
return POSFREEZ;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 353 "LexerRules.txt"
return POSSET;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 354 "LexerRules.txt"
return POWERADD;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 355 "LexerRules.txt"
return POWERSET;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 356 "LexerRules.txt"
return PROJECTILE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 357 "LexerRules.txt"
return REMOVEEXPLOD;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 358 "LexerRules.txt"
return REVERSALDEF;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 359 "LexerRules.txt"
return SCREENBOUND;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 360 "LexerRules.txt"
return SELFSTATE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 361 "LexerRules.txt"
return SNDPAN;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 362 "LexerRules.txt"
return SPRPRIORITY;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 363 "LexerRules.txt"
return STATETYPESET;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 364 "LexerRules.txt"
return STOPSND;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 365 "LexerRules.txt"
return SUPERPAUSE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 366 "LexerRules.txt"
return TARGETBIND;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 367 "LexerRules.txt"
return TARGETDROP;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 368 "LexerRules.txt"
return TARGETFACING;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 369 "LexerRules.txt"
return TARGETLIFEADD;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 370 "LexerRules.txt"
return TARGETPOWERADD;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 371 "LexerRules.txt"
return TARGETSTATE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 372 "LexerRules.txt"
return TARGETVELADD;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 373 "LexerRules.txt"
return TARGETVELSET;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 374 "LexerRules.txt"
return TURN;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 375 "LexerRules.txt"
return VARADD;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 376 "LexerRules.txt"
return VARRANDOM;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 377 "LexerRules.txt"
return VARRANGESET;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 378 "LexerRules.txt"
return VARSET;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 379 "LexerRules.txt"
return VELADD;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 380 "LexerRules.txt"
return VELMUL;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 381 "LexerRules.txt"
return VELSET;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 382 "LexerRules.txt"
return WIDTH;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 385 "LexerRules.txt"
return VALUE;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 386 "LexerRules.txt"
return VALUE2;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 387 "LexerRules.txt"
return XVALUE;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 388 "LexerRules.txt"
return YVALUE;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 389 "LexerRules.txt"
return ZVALUE;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 393 "LexerRules.txt"
return PERSISTENT;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 394 "LexerRules.txt"
return IGNOREHITPAUSE;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 395 "LexerRules.txt"
return SPACING;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 396 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 397 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 398 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 399 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 400 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 401 "LexerRules.txt"
{CopyStringID();return ID;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 403 "LexerRules.txt"
{CopyStringID();return STRING;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 404 "LexerRules.txt"
{CopyStringID();return STRING;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 405 "LexerRules.txt"
{CopyStringID();return STRING;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 406 "LexerRules.txt"
{CopyStringID();return STRING;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 408 "LexerRules.txt"
return WAVEFORM;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 409 "LexerRules.txt"
return AMPL;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 410 "LexerRules.txt"
return FREQ; 
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 411 "LexerRules.txt"
return FVALUE;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "LexerRules.txt"
return XVELADD;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "LexerRules.txt"
return YVELADD;          
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "LexerRules.txt"
return ANIMTYME;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "LexerRules.txt"
return AIRTYPE;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "LexerRules.txt"
return GROUNDTYPE;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "LexerRules.txt"
return DAMAGE;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "LexerRules.txt"
return FALLCOUNT;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "LexerRules.txt"
return HITSHAKETIME;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 421 "LexerRules.txt"
return HITTIME;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 422 "LexerRules.txt"
return SLIDETIME;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 423 "LexerRules.txt"
return CTRLTIME;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 424 "LexerRules.txt"
return RECOVERTIME;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 425 "LexerRules.txt"
return XOFF;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 426 "LexerRules.txt"
return YOFF;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 427 "LexerRules.txt"
return ZOFF;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 428 "LexerRules.txt"
return XVEL;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 429 "LexerRules.txt"
return YVEL;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 430 "LexerRules.txt"
return YACELL;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 431 "LexerRules.txt"
return HITID;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 432 "LexerRules.txt"
return CHAINID;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 433 "LexerRules.txt"
return GUARDED;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 434 "LexerRules.txt"
return FALL;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 435 "LexerRules.txt"
return FALLDAMAGE;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 436 "LexerRules.txt"
return FALLXVEL;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 437 "LexerRules.txt"
return FALLYVEL;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 438 "LexerRules.txt"
return FALLRECOVER;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 439 "LexerRules.txt"
return FALLTIME;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 440 "LexerRules.txt"
return FALLRECOVERTIME;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 441 "LexerRules.txt"
return FALLKILL;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 442 "LexerRules.txt"
return FALLENVTIME;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 443 "LexerRules.txt"
return FALLENVFREQ;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 444 "LexerRules.txt"
return FALLENVAMPL;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 445 "LexerRules.txt"
return FALLENVDIR;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 446 "LexerRules.txt"
return FALLENVPHASE;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 447 "LexerRules.txt"
return   ADD;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 448 "LexerRules.txt"
return   MUL;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 449 "LexerRules.txt"
return   SINADD;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 450 "LexerRules.txt"
return   INTERVALL;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 451 "LexerRules.txt"
return   COLOR;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 452 "LexerRules.txt"
return   UNDER;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 454 "LexerRules.txt"
return CharToInt();
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 457 "LexerRules.txt"
ECHO;
	YY_BREAK
#line 3606 "flex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1962 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1962 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1961);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 457 "LexerRules.txt"


void DestroyComment()
{
char c;

   c= yyinput();
   while (c != '\n' && c != 0)
   {	
	c=yyinput();

   }
   nLineNr++;
 
}

void CopyString()
{
   int l = strlen(yytext)-2;
   strncpy (yylval.str, &yytext[1], l); yylval.str[l] = 0;
 
}

void CopyStringID()
{
   int l = strlen(yytext);
   strncpy (yylval.str, &yytext[0], l); yylval.str[l] = 0;
   
}

void CopyID()
{
	int l=strlen(yytext);
	memcpy(yylval.str,yytext,l);
	yylval.str[l]=0;
 	printf("ID %s line %i \n",yytext,nLineNr);
}

int CharToInt()
{	
	char c;
	c = yytext[0];
	if(c > 90)
	   c-=32;
	yylval.nFloat=(float)c;
	return NUMBER; 


}


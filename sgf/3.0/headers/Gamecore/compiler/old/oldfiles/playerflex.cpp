#define yy_create_buffer player_create_buffer
#define yy_delete_buffer player_delete_buffer
#define yy_scan_buffer player_scan_buffer
#define yy_scan_string player_scan_string
#define yy_scan_bytes player_scan_bytes
#define yy_flex_debug player_flex_debug
#define yy_init_buffer player_init_buffer
#define yy_flush_buffer player_flush_buffer
#define yy_load_buffer_state player_load_buffer_state
#define yy_switch_to_buffer player_switch_to_buffer
#define yyin playerin
#define yyleng playerleng
#define yylex playerlex
#define yyout playerout
#define yyrestart playerrestart
#define yytext playertext
#define yywrap playerwrap

#line 20 "playerflex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
static yyconst short int yy_accept[229] =
    {   0,
        0,    0,   81,   80,    4,    5,   21,   80,   19,   26,
       12,   13,   10,    8,    6,    9,   80,   11,    3,   15,
       14,   32,   29,   31,   17,   18,   28,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   27,
       25,    4,   30,    0,   16,   22,   20,    2,    0,    3,
       33,   34,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   45,    0,   23,    1,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   44,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,    0,    0,    0,    0,    0,   35,    0,    0,   36,
        0,   50,   51,   52,   53,   54,   55,   56,   57,   58,
        0,    0,    0,    0,    0,   75,   65,   67,   69,   77,
       71,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,   59,   60,   61,
       49,    0,    0,    0,    7,   76,   66,   68,   70,   78,
       72,   74,   62,   40,    0,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,   77,    0,    0,    0,
        0,    0,    0,    0,   46,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,    0,   38,    0,    0,   39,   41,    0,    0,
        0,    0,    0,    0,    0,   63,   64,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,    1,    1,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   34,   34,   44,   45,   46,   47,   48,
       34,   49,   50,   51,   52,   53,   34,   34,   54,   34,
       31,    1,   32,   33,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   34,   34,   44,   45,   46,
       47,   48,   34,   49,   50,   51,   52,   53,   34,   34,
       54,   34,    1,   55,    1,   56,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1
    } ;

static yyconst short int yy_base[235] =
    {   0,
        0,    0,  565,  566,  562,  566,  534,  557,  566,  554,
      566,  566,  550,  566,  566,  566,    0,  566,  545,  566,
      566,  529,  566,  528,  518,  566,  522,   43,   55,   36,
       40,   38,   48,   47,   56,   60,   68,   75,   79,  499,
      566,  551,  566,  547,  566,  566,  566,    0,    0,  537,
      566,  566,  515,  566,   95,  535,   64,   91,   92,  100,
      101,  108,  113,  118,  122,  129,  136,  127,  140,  141,
      145,  158,  150,  566,    0,  497,   99,  155,  508,  115,
      168,  163,  176,  171,  175,  180,  185,  192,  197,  193,
      201,  209,  213,  252,  205,  235,  233,  240,  511,  482,

      483,  471,  447,  454,  436,  434,  251,  218,  431,  251,
      247,  257,  255,  264,  265,  269,  274,  278,  282,  283,
      301,  326,  447,  444,  436,  422,  415,  397,  394,  389,
      303,  307,  315,  319,  369,  566,  566,  566,  566,  566,
      566,  566,  347,  333,  341,  327,  314,  310,  310,  324,
      320,  339,  334,  332,  343,  341,  308,  332,  331,  323,
      350,  358,  360,  367,  566,  566,  566,  566,  566,  566,
      566,  566,  369,  371,  376,  386,  389,  394,  293,  385,
      395,  399,  403,  419,  413,  414,  287,  416,  429,  436,
      433,  265,  437,  253,  428,  455,  446,  253,  249,  450,

      239,  454,  469,  218,  206,  464,  205,  473,  468,  176,
      183,  477,  166,  478,  178,  151,  482,  566,  136,  113,
      100,   70,   66,   73,   60,  566,  566,  566,  534,   67,
      537,  539,   55,  542
    } ;

static yyconst short int yy_def[235] =
    {   0,
      228,    1,  228,  228,  228,  228,  228,  229,  228,  228,
      228,  228,  228,  228,  228,  228,  230,  228,  231,  228,
      228,  228,  228,  228,  228,  228,  228,  232,  232,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  228,
      228,  228,  228,  229,  228,  228,  228,  230,  233,  231,
      228,  228,  228,  228,  228,  234,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  228,  233,  228,  228,  228,  228,  228,
      228,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  232,   29,   29,   29,   29,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      228,  234,  234,  234,  234,  234,  234,  234,  234,  234,
       29,   29,   29,   29,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   29,
       29,   29,   29,   29,   29,   29,  228,  234,  234,  234,
       29,   29,   29,   29,  228,  228,  228,  228,  228,  228,
      228,  228,   29,   29,   29,   29,  228,   29,  228,   29,
       29,   29,   29,  228,  228,   29,  228,   29,   29,   29,
      228,  228,   29,  228,   29,   29,   29,  228,  228,   29,

      228,   29,   29,  228,  228,   29,  228,   29,   29,  228,
      228,   29,  228,   29,  228,  228,   29,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,    0,  228,  228,
      228,  228,  228,  228
    } ;

static yyconst short int yy_nxt[623] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   28,   30,   31,   32,   33,
       28,   28,   34,   28,   35,   36,   28,   37,   28,   38,
       28,   28,   39,   28,   40,   41,   55,   75,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   55,   48,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       61,   62,   63,   64,   57,   57,   57,   57,   57,   57,
       65,   57,   66,   57,   68,   57,   57,  227,   57,   57,

       58,   57,   69,   59,   57,   57,   60,   67,   57,   57,
      226,   57,   57,   57,  225,   57,   57,   73,  224,   57,
       57,   70,   71,   57,   57,   72,   57,   57,   83,   77,
       57,   78,   79,   82,  223,  100,   57,   57,   85,   57,
       57,  101,   57,   57,   80,   57,   57,  222,   57,   57,
       84,   57,   57,   57,  105,   88,   57,   86,   57,   57,
      106,   57,   87,   57,   57,   89,   57,   57,   90,   57,
       57,   93,   57,   57,   57,   57,   92,   57,   57,   91,
       57,   57,  221,   94,   57,   57,   57,   57,   57,   57,
       57,   57,   95,   96,   97,   57,   57,  220,   98,  102,

      103,   57,  107,   57,  108,  109,   57,  111,   57,   57,
      112,   57,  113,  219,   57,  218,   57,  110,  216,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  215,
       57,   57,  114,   57,  115,  116,   57,   57,   57,  117,
       57,   57,   57,   57,   57,   57,   57,  119,   57,  118,
      131,  120,   57,   57,   57,  213,   57,   57,   57,  211,
       57,   57,  145,  146,   57,  121,  210,   56,  122,  123,
      124,  125,  126,  127,  128,  129,  130,  132,   57,  133,
       57,   57,  207,   57,   57,   57,   57,  143,   57,  134,
      148,   57,   57,  144,  150,   57,  149,  205,   57,  204,

       57,  151,   57,   57,  201,   57,   57,  152,   57,   57,
      153,  199,   57,   57,   57,   57,   57,   57,  154,   57,
       57,  194,   57,   57,  155,   57,   57,  156,   57,   57,
       57,   57,  187,   57,   57,   77,   81,   78,  157,   81,
      161,  158,  159,  160,   81,   81,  179,  172,   57,  171,
       80,   57,   57,  170,   57,   57,  177,  162,   57,  163,
       57,  164,  173,   57,   57,   57,   57,   57,  174,   57,
       57,   57,   57,  175,  176,   57,  169,   57,  168,   57,
       57,  167,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  178,   57,   57,  180,  166,   57,  184,

      165,   57,   81,   57,  181,   57,   57,   81,   57,   57,
       81,   57,   57,  182,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   77,   57,   78,   79,   57,   81,  183,
       57,   57,  186,   57,   57,   81,   57,   57,  185,   57,
       57,  188,   57,   57,  189,   57,   57,   57,  190,   81,
       57,   57,  105,   77,   57,   78,   79,   81,  106,   57,
       81,  195,  193,  192,   57,   57,  196,   57,  191,  147,
      197,  142,  105,   57,   57,  141,   57,   57,  106,   57,
       57,   57,   57,  198,   57,   57,  200,   57,   57,  202,
      203,   57,  206,  140,   57,   57,  139,   57,   57,   57,

       57,   57,   57,   57,  208,   57,   57,  209,  138,   57,
      212,  214,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  217,   57,   57,   57,   57,   57,   57,   57,
       57,  137,  136,   57,   44,   44,   44,   44,   50,   50,
       57,   57,   57,   56,   56,  135,  104,   99,   81,   76,
       49,   45,   42,   74,   54,   53,   52,   51,   49,   47,
       46,   45,   43,   42,  228,    3,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228
    } ;

static yyconst short int yy_chk[623] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   28,  233,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   29,  230,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   30,   31,   32,   30,   31,   32,   30,   31,   32,
       33,   31,   34,   33,   36,   34,   33,  225,   34,   33,

       29,   35,   37,   29,   35,   36,   29,   35,   36,   57,
      224,   36,   57,   37,  223,   57,   37,   39,  222,   37,
       38,   38,   38,   38,   39,   38,   38,   39,   59,   55,
       39,   55,   55,   58,  221,   77,   58,   59,   61,   58,
       59,   77,   58,   59,   55,   60,   61,  220,   60,   61,
       60,   60,   61,   62,   80,   64,   62,   62,   63,   62,
       80,   63,   63,   64,   63,   65,   64,   65,   66,   64,
       65,   68,   68,   65,   66,   68,   67,   66,   68,   66,
       66,   67,  219,   69,   67,   69,   70,   67,   69,   70,
       71,   69,   70,   71,   72,   73,   71,  216,   73,   78,

       78,   73,   81,   72,   81,   81,   72,   82,   82,   72,
       83,   82,   84,  215,   82,  213,   84,   81,  211,   84,
       85,   83,   84,   85,   83,   86,   85,   83,   86,  210,
       87,   86,   87,   87,   88,   89,   87,   88,   90,   90,
       88,   90,   89,   88,   90,   89,   91,   92,   89,   91,
       95,   93,   91,   95,   92,  207,   95,   92,   93,  205,
       92,   93,  108,  108,   93,   94,  204,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   96,   97,   97,
       96,   97,  201,   96,   97,   98,   96,  107,   98,   98,
      110,   98,  111,  107,  112,  111,  110,  199,  111,  198,

      113,  113,  112,  113,  194,  112,  113,  114,  112,  114,
      115,  192,  114,  115,  116,  114,  115,  116,  116,  117,
      116,  187,  117,  118,  118,  117,  118,  119,  120,  118,
      119,  120,  179,  119,  120,  121,  160,  121,  121,  122,
      131,  122,  122,  122,  159,  158,  157,  149,  131,  148,
      121,  131,  132,  147,  131,  132,  155,  132,  132,  133,
      133,  134,  150,  133,  134,  151,  133,  134,  151,  150,
      134,  151,  150,  152,  153,  150,  146,  154,  145,  153,
      154,  144,  153,  154,  152,  153,  156,  152,  155,  156,
      152,  155,  156,  156,  155,  161,  162,  143,  161,  176,

      135,  161,  130,  162,  163,  163,  162,  129,  163,  162,
      128,  163,  164,  164,  173,  164,  174,  173,  164,  174,
      173,  175,  174,  177,  175,  177,  177,  175,  127,  175,
      180,  176,  178,  180,  176,  126,  180,  176,  177,  178,
      181,  181,  178,  181,  182,  178,  181,  182,  183,  125,
      182,  183,  185,  184,  183,  184,  184,  124,  185,  186,
      123,  188,  186,  185,  188,  186,  189,  188,  184,  109,
      190,  106,  191,  195,  189,  105,  195,  189,  191,  195,
      189,  190,  193,  191,  190,  193,  193,  190,  193,  196,
      197,  197,  200,  104,  197,  200,  103,  197,  200,  202,

      196,  200,  202,  196,  202,  202,  196,  203,  102,  206,
      206,  208,  206,  209,  203,  206,  209,  203,  208,  209,
      203,  208,  212,  214,  208,  212,  214,  217,  212,  214,
      217,  101,  100,  217,  229,  229,  229,  229,  231,  231,
      232,  232,  232,  234,  234,   99,   79,   76,   56,   53,
       50,   44,   42,   40,   27,   25,   24,   22,   19,   13,
       10,    8,    7,    5,    3,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "PlLexerRules.txt"
#define INITIAL 0
#line 2 "PlLexerRules.txt"
#include <io.h>
#include <stdio.h>
#include <string.h>
#include "playertoken.h"
#include "lex.h"
#include "../Structs.h"
#include "../objects/Player.h"
#include "../util/debug.h"

#ifdef MSVC
#define  isatty _isatty  // for some reason isatty is called _isatty in VC..
#endif

void PlayerDestroyComment();
void PlayerCopyString();
int  PlayerCharToInt();	
void PlayerFileName();
int playerLineNr=1;

#line 615 "playerflex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 33 "PlLexerRules.txt"

#line 764 "playerflex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 229 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 566 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 35 "PlLexerRules.txt"
case 2:
#line 36 "PlLexerRules.txt"
case 3:
YY_RULE_SETUP
#line 36 "PlLexerRules.txt"
{sscanf(playertext,"%f",&playerlval.nFloat); 
				     return NUMBER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "PlLexerRules.txt"
{/*NOTHING*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "PlLexerRules.txt"
{playerLineNr++;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "PlLexerRules.txt"
return ',';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "PlLexerRules.txt"
{/**/}     
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 47 "PlLexerRules.txt"
return '+';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 48 "PlLexerRules.txt"
return '-';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 49 "PlLexerRules.txt"
return '*';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 50 "PlLexerRules.txt"
return '/';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 51 "PlLexerRules.txt"
return '(';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 52 "PlLexerRules.txt"
return ')';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 53 "PlLexerRules.txt"
{PlayerDestroyComment();}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 54 "PlLexerRules.txt"
return ':';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 55 "PlLexerRules.txt"
{PlayerCopyString();return STRING;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 56 "PlLexerRules.txt"
return '[';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 57 "PlLexerRules.txt"
return ']';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 59 "PlLexerRules.txt"
return MOD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 60 "PlLexerRules.txt"
return SQUARE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "PlLexerRules.txt"
return LOGNOT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "PlLexerRules.txt"
return LOGAND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "PlLexerRules.txt"
return LOGOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 65 "PlLexerRules.txt"
return LOGXOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "PlLexerRules.txt"
return NOT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 67 "PlLexerRules.txt"
return AND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 68 "PlLexerRules.txt"
return OR;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 69 "PlLexerRules.txt"
return XOR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 72 "PlLexerRules.txt"
return EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 73 "PlLexerRules.txt"
return NOTEQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 74 "PlLexerRules.txt"
return GREATER;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 75 "PlLexerRules.txt"
return LESS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 76 "PlLexerRules.txt"
return LESSEQUAL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 77 "PlLexerRules.txt"
return GREATEREQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "PlLexerRules.txt"
return INFO;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "PlLexerRules.txt"
return NAME;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "PlLexerRules.txt"
return DISPLAYNAME; 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "PlLexerRules.txt"
return VERSIONDATE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "PlLexerRules.txt"
return MUGENVERSION;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "PlLexerRules.txt"
return AUTHOR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "PlLexerRules.txt"
return PALDEFAULTS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "PlLexerRules.txt"
return FILES;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "PlLexerRules.txt"
return COMAND;     
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "PlLexerRules.txt"
return CNS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "PlLexerRules.txt"
return STATES;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "PlLexerRules.txt"
return COMESTATES;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "PlLexerRules.txt"
return SPRITES;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "PlLexerRules.txt"
return ANIMATION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "PlLexerRules.txt"
return SOUNDS;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "PlLexerRules.txt"
return PALLETE1; 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "PlLexerRules.txt"
return PALLETE2;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "PlLexerRules.txt"
return PALLETE3;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "PlLexerRules.txt"
return PALLETE4;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "PlLexerRules.txt"
return PALLETE5;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "PlLexerRules.txt"
return PALLETE6;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "PlLexerRules.txt"
return PALLETE7;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "PlLexerRules.txt"
return PALLETE8;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "PlLexerRules.txt"
return PALLETE9;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "PlLexerRules.txt"
return PALLETE10;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "PlLexerRules.txt"
return PALLETE11;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "PlLexerRules.txt"
return PALLETE12;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 109 "PlLexerRules.txt"
return ARCADE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 110 "PlLexerRules.txt"
return INTRO;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 111 "PlLexerRules.txt"
return ENDING;
	YY_BREAK
case 65:
#line 114 "PlLexerRules.txt"
case 66:
#line 115 "PlLexerRules.txt"
case 67:
#line 116 "PlLexerRules.txt"
case 68:
#line 117 "PlLexerRules.txt"
case 69:
#line 118 "PlLexerRules.txt"
case 70:
#line 119 "PlLexerRules.txt"
case 71:
#line 120 "PlLexerRules.txt"
case 72:
#line 121 "PlLexerRules.txt"
case 73:
#line 122 "PlLexerRules.txt"
case 74:
#line 123 "PlLexerRules.txt"
case 75:
#line 124 "PlLexerRules.txt"
case 76:
#line 125 "PlLexerRules.txt"
case 77:
#line 126 "PlLexerRules.txt"
case 78:
YY_RULE_SETUP
#line 126 "PlLexerRules.txt"
{PlayerFileName(); return FILENAME;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "PlLexerRules.txt"
return PlayerCharToInt();
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "PlLexerRules.txt"
ECHO;
	YY_BREAK
#line 1203 "playerflex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 229 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 229 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 228);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 132 "PlLexerRules.txt"


void PlayerDestroyComment()
{
char c;

   c= yyinput();
   while (c != '\n' && c != 0)
   {	
	c=yyinput();

   }
   playerLineNr++;
 
}

void PlayerCopyString()
{
   int l = strlen(playertext)-2;
   //Debug::debug(10) <<"TESTE - PLAYER TEXT = "<< playertext<<endl;
   strncpy (playerlval.str, &playertext[1], l); playerlval.str[l] = 0;
   //Debug::debug(10) <<"TESTE - PLAYER TEXT STRING = "<< playerlval.str <<endl;
}


void PlayerFileName()
{
    int l = strlen(playertext);
   
   strncpy (playerlval.str, &playertext[0], l); playerlval.str[l] = 0;
    
     }

int PlayerCharToInt()
{	
	char c;
	c = playertext[0];
	if(c > 90)
	   c-=32;
	playerlval.nFloat=(float)c;
	return NUMBER; 


}


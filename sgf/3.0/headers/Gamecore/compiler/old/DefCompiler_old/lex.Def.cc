#define yyFlexLexer DefFlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CScanner::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
static yyconst short int yy_accept[629] =
    {   0,
       31,   31,   35,   33,   31,   32,   32,   31,   33,   33,
       33,   33,   30,   33,   33,   29,    1,   16,   30,   30,
       30,   30,   17,   30,   33,   30,   16,   33,   31,   32,
       31,   33,   33,   33,   33,   30,   33,   33,   29,    1,
       16,   30,   30,   30,   30,   17,   30,   30,   33,   30,
       16,    0,    0,   31,   31,   32,    0,    0,    2,    0,
        3,    4,    0,   29,   30,   30,   29,   29,    0,    0,
        0,    0,   29,   16,   13,   30,   30,    9,   30,   30,
       17,   30,   10,   11,    0,   30,    0,    0,    0,    0,
       31,   31,   32,    0,    0,    0,    2,    0,    0,    3,

        4,    0,   29,   30,   30,   29,   30,   29,    0,    0,
        0,    0,    0,   29,   16,   13,   30,   30,    9,   30,
       30,   17,   30,   30,   10,   11,    0,   30,   30,    2,
        0,    2,    0,   29,   30,    0,    0,   29,    0,   30,
       30,   11,   30,   30,    0,   30,    0,    0,    2,    0,
        0,    2,    0,    0,    0,   29,   30,    0,    0,    0,
       29,    0,   30,   30,   11,   30,   30,   30,    0,   30,
       30,    0,   29,   29,   28,   28,   28,   28,   28,   28,
       28,    0,    0,    0,   30,   30,   30,   30,    0,    0,
        0,    0,    6,   28,   28,   28,   28,   28,   28,   28,

        0,    0,    0,    0,    0,    0,   29,   29,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,    0,
       30,   30,   30,   30,   30,    0,    0,    0,    0,    0,
        6,   28,   28,   28,   28,   28,   28,   28,   28,   30,
       28,    2,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,   19,   19,   12,
       30,   30,   30,    6,    0,    6,    0,   28,   28,   28,
       28,   28,   28,   28,   28,    0,    0,    0,   28,    2,
       28,   28,   28,   28,   28,   28,   28,    0,    0,   28,
       28,   28,   28,   28,   28,   28,   28,   28,    0,    0,

       19,   19,   12,   30,   30,   30,    0,    0,    0,    6,
        0,    0,    6,    0,    0,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   30,   28,   28,   28,   28,   28,
       28,   28,   28,   27,   24,   21,   20,   25,   26,   22,
       23,   19,   15,   30,   30,    0,    0,   27,   24,   21,
       20,   25,   26,   22,   23,    0,    0,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,   27,
       24,   21,   20,   25,   26,   22,   23,   28,    0,   19,
       15,   30,   30,    0,   18,    0,    0,    0,    0,    0,
        0,   27,   24,   21,   20,   25,   26,   22,   23,   28,

       27,   24,   21,   20,   25,   26,   22,   23,   30,   30,
       28,   28,   28,   28,   28,   28,   28,    6,    0,    0,
       27,   24,   21,   20,   25,   26,   22,   23,   28,    0,
        0,   18,    2,    0,   28,   30,   30,    0,    0,   28,
       28,   28,   28,   28,   28,   28,   28,    6,    0,    0,
        0,   28,   30,   30,   28,   28,   28,   28,   28,   28,
       28,   28,    0,    0,    0,    5,   28,    0,   28,   30,
       30,    0,    0,   28,   28,   28,   28,   28,   28,   28,
       28,   28,    0,    0,    0,    0,    0,    5,    0,    0,
       30,    8,   30,   27,   24,   21,   20,   25,   26,   22,

       23,    5,    0,    5,   28,    0,   30,    8,   30,    0,
        0,   27,   24,   21,   20,   25,   26,   22,   23,   28,
        0,    0,    5,    0,    0,    5,    0,    0,    0,    6,
       14,   30,    0,    0,   14,   30,    0,    0,   28,    0,
        0,    0,    0,    0,   30,   28,   28,   28,   28,   28,
       28,   28,    5,    0,    0,   30,   28,    0,   28,   28,
       28,   28,   28,   28,   28,   28,    5,    0,    0,    0,
       30,   28,   28,   28,   28,   28,   28,   28,   28,   30,
        0,   28,   28,   28,   28,   28,   28,   28,   28,   28,
        0,    0,    0,    0,    7,   27,   24,   21,   20,   25,

       26,   22,   23,    7,    0,   27,   24,   21,   20,   25,
       26,   22,   23,   28,    0,    0,    0,    5,    0,    0,
       28,    0,   28,    0,    0,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   26,   36,   26,   37,   26,   26,
       38,   39,   40,    1,   26,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   26,   50,   51,   52,   53,
       54,   55,   26,   56,   57,   58,   26,   59,   26,   60,
       26,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    1,    2,    3,    3,    1,    1,    1,    3,    1,
        1,    4,    1,    1,    3,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[670] =
    {   0,
        0,   60,  289,  109,  120,  120,  123,  126,  130,  118,
      138, 4520,  177,  125,    0,  143, 4520,  217,  153,  157,
      207,  208,  227,  239,  129,  193,    0,  266,  323,  170,
      232,  379,  434,  234,  250,  492,  263,  294,  306,  257,
      550,  308,  193,  309,  336,  366,  391,  373,  312,  608,
        0,  153,    0,  387,  158,  193,  448,  280,  164,  473,
      168,  197,  335,  364,  367,  427,  461,  396,  268,  403,
      416,  245,  503,  244,  504,  515,  530, 4520,  535,  565,
      241,  540, 4520,  568,  394,  666,  277,  467,  622,  607,
      596,  601,  636,  630,  704,  657,  665,  760,  816,  668,

      678,  698,  725,  684,  724,  743,  739,  736,  871,  926,
      754,  755,  794,  832,  693,  789,  796,  843,  666,  836,
      854,  805,  845,  886,  789,  892,  867,  984,  181, 4520,
     1040,  408,  432,  899,  902, 1069,  498,  823,  906,  953,
      949, 4520, 1002,  996, 1123, 1166, 1001,  918,  794, 1061,
     1221,  248,  377,  907,  991,  964, 1026, 1276, 1033, 1050,
     1060,  637, 1135, 1141,  892, 1063, 1136, 1087, 1331, 1389,
      217, 1447,  521, 1146,  775, 1494, 1203, 1205, 1113, 1190,
     1229,  859,  642,  225, 1240, 1249, 1250, 1295, 1344,  171,
     1456, 1548, 1503, 1606, 1646, 1687, 1302, 1343,  437, 1501,

     1445,  922, 1266, 1742,  263, 1102, 1521, 1543, 1797, 1852,
     1894, 1542, 1554, 1579, 1645, 1606, 1283, 1475, 1567, 1660,
     1576, 1722, 1577, 1695, 1721, 1948,  486, 2003, 2058, 2113,
      389, 2155,    0, 2196, 1744, 1746, 1773, 1785, 1798,  315,
     2251,  815, 2288, 2329, 1851, 1799, 1835, 1893, 1255, 1443,
     1630, 1890, 1547, 1510, 1671, 1838,  718,  778, 1462, 1832,
     1892, 1920, 1945,  168, 1957, 1989, 2383, 1991, 1992, 1338,
     2002, 2033, 2046, 2053, 1676, 2090, 2098, 1095, 2437,  586,
     2479, 1170, 1218,  501,  428, 1256,  555,  471,  170, 2088,
     2111, 2143, 2136, 2159, 2185, 2192, 2227, 2276,  411, 2175,

     2301,  573, 2026, 2051, 2107, 2283, 1965,  979, 1887, 1452,
     2533, 2588,  641,  876, 2009, 2240, 2225, 2318, 2290, 2334,
     2366, 2357, 2377, 2408, 1695, 2412, 2411, 2385, 2431, 2389,
     2444, 2472, 2465, 1179, 1238, 1486, 1840, 1895, 1909, 1974,
     2183, 1092, 4520, 2499, 2521, 2643, 2697, 1577, 1786, 1946,
     2102, 2341, 2481, 2486, 2522, 2548, 2573,  905,  918,  656,
      971,  699, 1098,  926,  950, 1124, 2462, 2541, 1827, 2577,
     2541, 2562, 2576, 2591, 2596, 2618, 2625, 2645, 2669, 2682,
     1173, 2706, 2725, 1309, 4520, 2621, 2638, 2779, 2227, 2152,
     2045, 2672, 2685, 2701, 2730, 2737, 2781, 2762, 2778, 2809,

     2790, 2810, 2813, 2821, 2822, 2823, 2826, 2830, 2719, 2855,
     2876, 2913, 2954, 2912, 2865, 2919, 2956, 2857, 2978, 2758,
      982,    0,    0,    0,    0,  987,    0,    0, 1129,  577,
     2892,  187, 1602, 2986, 2994, 2999, 3001, 3005, 1603, 3062,
     3117, 3159, 3032, 3004, 3011, 3057, 3069, 2858, 2307, 3213,
      668, 3070, 3111, 3130, 3161, 3074, 3122, 3158, 3163, 3201,
     3208, 3212, 3230,  121, 3263, 3272, 2918, 3257, 3264, 3285,
     3280, 1989, 3289, 3297, 3302, 3319, 3331, 3311, 3334, 3348,
     3356, 3347,  724, 3404, 2051, 3459, 3514, 1045, 2924, 2354,
     3091, 4520, 3291, 3003, 3368, 3379, 3387, 3399, 3402, 3404,

     3406,  104, 3461, 3474,  862, 3156, 3475, 2091, 3447, 3522,
     2572, 3491, 3407, 3472, 3503, 3512, 3520, 3525, 3539, 3541,
     3571, 3556, 2191, 3613, 3668, 1066, 2876, 2908, 3568, 3375,
     4520, 3599, 3723, 3633, 2226, 3625, 3607, 2524, 3674, 3627,
     3777, 3237, 3562, 3712, 3593, 3798, 3835, 3876, 3725, 3667,
     3776, 3834, 3626, 3695, 3379, 3606, 3866, 2431, 3930, 3985,
     4027, 3875, 3675, 3883, 3918, 3779, 3817, 3701, 1031, 3400,
     3774, 3919, 3930, 3931, 3984, 3989, 3987, 3991, 4031, 4049,
     4037, 4044, 4066, 4069, 4067, 4086, 4095, 4106, 4114, 3824,
     1100, 4105, 3830, 4138, 4520, 3904, 3933, 3974, 4117, 4118,

     4126, 4137, 4145, 2719, 4163, 4166, 4152, 4157, 4165, 4174,
     4191, 4188, 4199, 4200, 4225, 4217, 4226, 4219, 4248, 4227,
     4253, 4257, 4284, 4241, 4302, 4305, 4276, 4520, 4363, 4367,
     4371,  139,  128, 4375, 4379, 4383, 4387, 4391, 4395, 4399,
     4403, 4407, 4411, 4415, 4419, 4423, 4427, 4431, 4435, 4439,
     4443, 4447, 4451, 4455, 4459, 4463, 4467, 4471, 4475, 4479,
     4483, 4487, 4491, 4495, 4499, 4503, 4507, 4511, 4515
    } ;

static yyconst short int yy_def[670] =
    {   0,
      628,  628,  628,  629,  629,  628,  628,  628,  630,  629,
      629,  628,  631,  629,  632,  629,  628,  631,   18,   18,
       18,   18,   18,   18,  629,  633,   18,  634,  634,  635,
      635,  636,  634,   33,  635,  637,   33,  638,   33,  635,
      637,   41,   41,   41,   41,   41,   41,   41,   33,  639,
       41,  629,  632,  629,  628,  628,  630,  640,  629,  641,
      629,  629,  629,  629,   18,   18,   18,  629,  632,  629,
      629,  632,  629,  628,   18,   18,   18,  628,   18,   18,
      628,   18,  628,   18,  629,  633,   33,  635,  638,   33,
       33,  635,  635,  635,  636,  642,   33,  643,  636,   33,

       33,   33,   33,   41,   41,   41,   41,   33,  638,  638,
       33,   33,  110,   33,  635,   41,   41,   41,  635,   41,
       41,  635,   41,   41,  635,   41,   33,  639,  128,  628,
      641,  632,  629,   18,   18,  644,  629,  629,  632,   18,
       18,  628,   18,   18,  645,  646,   33,  635,  635,  642,
      643,  110,  151,   99,   33,   41,   41,  647,  110,   33,
       33,  110,   41,   41,  635,   41,   41,   41,  648,  628,
      128,  649,  629,   18,  644,  644,  644,  644,  644,  644,
      644,  629,  629,  632,   18,   18,   18,   18,  645,  650,
      651,  645,  645,  646,  646,  195,  196,  196,  196,  196,

       33,  635,  642,  652,  151,   99,   33,   41,  647,  647,
      210,  211,  211,  211,  211,  211,  110,   33,   33,  110,
       41,   41,   41,   41,   41,  648,  653,  654,  648,  648,
      230,  170,  170,  170,  234,  234,  234,  234,  234,  128,
      649,  644,  649,  243,  244,  244,  244,  244,  644,  644,
      644,  644,  644,  644,  644,  644,  629,  629,  632,   18,
       18,   18,   18,  650,  651,  651,  645,  196,  196,  196,
      196,  196,  196,  196,  196,   33,  635,  642,  652,  211,
      279,  279,  279,  279,  279,  279,  279,  151,   99,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  110,   33,

       33,  110,   41,   41,   41,   41,   33,  655,  653,  653,
      654,  654,  312,  230,  230,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  128,  244,  244,  244,  244,  244,
      244,  244,  244,  644,  644,  644,  644,  644,  644,  644,
      644,  629,  628,   18,   18,  656,  645,  196,  196,  196,
      196,  196,  196,  196,  196,  635,  642,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  151,   99,  657,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  110,   33,
      635,   41,   41,  655,  628,  655,  653,  658,  312,  230,
      230,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      244,  244,  244,  244,  244,  244,  244,  244,   18,   18,
      656,  656,  412,  413,  413,  413,  413,  413,  659,  642,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  151,
      657,  660,  655,  657,  211,   41,   41,  655,  653,  658,
      658,  441,  442,  442,  442,  442,  442,  442,  312,  661,
      230,  234,   18,   18,  413,  413,  413,  413,  413,  413,
      413,  413,  659,  662,  663,  659,  279,  657,  211,   41,
       41,  655,  653,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  312,  661,  664,  665,  661,  487,  230,  666,
       18,  628,   18,  413,  413,  413,  413,  413,  413,  413,

      413,  662,  663,  663,  279,  657,   41,  635,   41,  655,
      653,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      312,  664,  664,  665,  665,  525,  487,  666,  666,  666,
      628,   18,  667,  657,  635,   41,  655,  655,  442,  664,
      668,  525,  487,  666,   18,  667,  667,  547,  548,  548,
      548,  548,  548,  657,  657,   41,  442,  664,  668,  668,
      560,  561,  561,  561,  561,  561,  561,  525,  487,  666,
       18,  548,  548,  548,  548,  548,  548,  548,  548,   41,
      664,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      525,  487,  669,  666,  628,  548,  548,  548,  548,  548,

      548,  548,  548,  635,  664,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  525,  669,  669,  669,  666,  666,
      561,  669,  561,  669,  669,  669,  669,    0,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628
    } ;

static yyconst short int yy_nxt[4581] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,    4,   17,   12,   18,   19,   20,   20,
       20,   20,   20,   21,   20,   20,   20,   22,   20,   20,
       20,   20,   20,   23,   20,   24,   20,   25,   26,    4,
       27,   19,   20,   20,   20,   20,   20,   21,   20,   20,
       22,   20,   20,   20,   20,   20,   23,   20,   24,   20,
       28,   29,    6,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   28,   40,   35,   41,   42,   43,   43,
       43,   43,   43,   44,   43,   43,   43,   45,   43,   43,
       43,   43,   43,   46,   47,   48,   43,   49,   50,   28,

       51,   42,   43,   43,   43,   43,   43,   44,   43,   43,
       45,   43,   43,   43,   43,   43,   46,   47,   48,   43,
       53,   54,   56,   56,   55,   56,   56,   55,   86,   53,
       55,   53,   58,   58,   58,   59,   53,   68,   58,   69,
       53,   60,   61,  502,   58,   58,   85,   53,   63,   53,
       64,   62,   70,   71,   72,   73,   53,  628,   53,   55,
      502,  628,   55,   53,   53,   65,   61,   53,   60,   65,
       85,  368,   56,   93,   62,   53,   53,   52,   52,   53,
       77,   53,   52,   52,   52,  369,   65,   66,   53,   67,
       65,   53,  130,   69,   69,   56,   56,   88,   69,   69,

       69,  171,   53,   77,   94,  104,   53,  264,   53,   65,
      264,   78,  628,   65,   52,   53,   52,   52,   52,   65,
       65,   74,   52,   52,   52,  171,  104,   94,   53,   75,
       69,   81,   69,   92,  628,   53,   92,  259,   80,   65,
       65,   65,   79,   83,  102,   81,  103,   82,   74,  104,
       76,   65,  628,  240,   52,   53,   52,  139,   87,  628,
       65,   80,   84,   65,   65,   79,   94,   87,  109,   88,
       88,   82,   65,   76,   88,  108,  240,   89,  136,   53,
       88,   88,   87,   65,   94,  130,   84,   87,  628,   94,
       87,   94,  109,  628,  628,   65,   87,   88,   88,  288,

       90,   87,   88,  628,   89,   88,   53,   94,   88,   88,
       87,   87,   88,  119,   94,  111,  112,  113,  114,   87,
      104,  104,  288,   90,   91,   87,   88,   92,  110,  127,
       87,   88,   88,   87,   89,  118,   87,   88,   88,   87,
       88,  104,  104,  628,  120,   87,   53,   68,  104,  325,
      628,  110,  628,  127,   87,  628,  628,   90,  118,  628,
       87,   89,   87,  628,  104,  104,  121,  120,   87,  104,
      122,  628,  325,   53,  133,   53,   64,  125,  104,   65,
       90,   58,   96,   96,   97,  104,  123,   96,   54,  121,
       98,   55,  104,   96,   96,   88,  126,  205,   53,  104,

       65,  628,   53,  104,  628,   53,  104,   53,   68,  226,
      123,  124,  379,   99,   53,  137,  145,   98,  136,   53,
      126,  205,  104,   65,  104,   53,  308,   53,  138,  104,
      628,  628,   53,  226,   53,  124,   99,   88,   88,  134,
      145,   53,   88,   53,  173,   89,   53,  104,   88,   88,
       58,   58,   58,   59,   53,  194,   58,  363,  100,   60,
       65,  194,   58,   58,  628,  628,  273,  101,   90,  628,
       53,  135,   89,   67,  628,   58,   58,   58,  132,  194,
      363,   58,  100,   65,   58,  194,   60,   58,   58,  273,
      101,   90,   87,   87,   65,   88,   88,   87,   87,   87,

       88,   94,  105,   89,  106,  367,   88,   88,  628,   53,
      182,   58,   70,   71,   72,   73,   65,   65,  628,  628,
      309,  362,  628,  628,   94,  310,  107,  140,  367,   87,
       89,   87,   53,  173,  628,  628,   53,   65,  628,  142,
      628,   53,   65,  309,  628,  362,  141,   65,   65,  107,
       87,   87,   65,   88,  115,   87,   87,   87,   88,   53,
       65,   89,  116,   65,   88,   88,  628,  144,   65,  628,
      141,   65,  628,   65,  628,  366,  628,   65,  430,  628,
       65,  628,  628,  117,  107,  302,   65,   87,   89,   87,
      144,   65,  369,  109,  628,  143,   65,   91,   65,  366,

       92,   65,   92,  628,  209,   92,  117,  107,  109,  109,
      209,   88,   88,  109,  109,  109,   88,  109,  143,   88,
       87,   65,   88,   88,   65,   88,   88,  147,  209,   87,
       88,   87,  628,   88,  209,   94,   88,   88,   56,   93,
       87,  628,  129,  628,   87,  109,   88,  109,  220,  162,
      148,  147,   87,   53,  258,   87,  110,  109,   94,   58,
       88,  311,  149,   87,   94,  129,   69,   69,  628,  489,
       94,   69,   69,   69,  148,  423,  146,   53,  628,  110,
       53,  109,  628,  490,  628,  311,  628,   94,   88,   87,
      628,  150,   87,   94,  628,  628,  104,  115,   87,  423,

       94,   87,   87,   69,   53,   69,   58,   96,   96,   97,
      108,   87,   96,   87,  150,   98,   87,  104,   96,   96,
      425,   87,   87,   94,   87,  521,   87,   94,   88,   53,
      342,   87,  628,  628,   87,  155,  156,  103,   99,  490,
      104,  628,   98,   88,  425,  628,   87,   88,  108,   87,
       94,  104,  628,  157,   87,  106,   53,  104,   87,  124,
       87,   99,   58,   96,   96,  152,  160,  161,   96,   87,
      628,   96,  104,   87,   96,   96,  104,  628,   87,   87,
      104,   87,  628,  124,   87,  176,   53,   87,   87,   53,
      258,  628,   87,   88,  153,  104,  628,  628,   96,  104,

       88,  104,   87,   87,  109,   88,  162,  628,  163,  122,
       87,   87,  628,   53,  109,  628,   53,  153,   58,   96,
       96,   97,  104,   94,   96,  176,   53,   98,   94,  104,
       96,   96,   88,  183,   53,  138,  154,  628,  109,   94,
      165,  111,  112,  113,  114,  104,   94,   88,  104,   88,
       99,   94,  104,   53,   98,  104,   87,  104,   88,  164,
      154,   53,   94,  505,  628,   87,  104,  628,  257,  104,
       53,  628,  167,   99,   88,   88,  104,  369,  104,   88,
       87,  158,   89,  164,  166,   88,   88,  104,   87,  169,
       88,   87,  104,  628,  628,  167,   88,   53,  104,  104,

       87,  104,  628,  628,  104,  110,  628,  166,  390,   89,
      104,  134,  628,  169,  174,   87,  136,  184,  139,  104,
      628,  628,  168,   87,  628,  104,   94,   95,  110,   88,
       88,  390,   65,  628,   88,   65,  158,   89,  628,  421,
       88,   88,  104,  206,   53,  168,  159,  427,  104,   94,
      422,   95,   94,  628,  202,   65,  277,  628,   65,  628,
      110,   65,  421,  628,   89,  140,  206,  628,   88,  428,
      159,  427,  185,  422,  628,   94,  156,  202,  186,  277,
      628,  385,   65,  110,  109,  109,   65,   88,   88,  109,
      109,  109,   88,  428,  170,   89,  185,  104,   88,   88,

      628,  186,  366,  207,  424,   65,  628,  366,   65,   65,
      628,  628,  628,  386,   65,   87,  188,  628,  129,  628,
      104,  109,   89,  109,   87,   87,  366,  424,  628,   65,
       88,  366,  592,  187,   87,   65,  386,  201,  208,   87,
      188,  129,   58,   58,   58,  132,  593,   87,   58,   87,
      172,   60,   65,  109,   58,   58,  187,   87,   65,  104,
      201,  628,  218,   58,  628,  484,  149,   88,  628,  217,
      219,  628,  161,  628,   87,  104,  628,  109,   60,  176,
       53,  203,  104,   87,   87,  177,  524,  178,  179,  484,
      180,   88,  217,   87,  223,  150,  104,   58,   87,  104,

      149,  615,  181,   53,  342,  203,   87,   53,   87,  177,
      524,  178,  179,  628,  180,  593,   87,  223,  150,  104,
      104,  225,   95,  176,   53,  181,  190,  190,  628,  357,
       53,  190,  426,  253,  191,  628,  289,  190,  190,   88,
       88,  192,  628,  104,  225,   88,   95,  163,  104,  628,
      628,   53,  357,  104,  221,  426,  224,  253,  174,  289,
      429,  191,  193,  467,  628,  192,  175,  175,  104,  104,
      222,  175,  175,  175,  104,  628,  195,   53,  221,   65,
      224,  628,  196,  429,  197,  198,  467,  199,  358,  176,
       53,  104,  104,  222,  359,  628,  628,  104,  628,  200,

      176,   53,   65,  175,   53,  175,  196,   94,  197,  198,
      628,  199,  358,  176,   53,  176,   53,   53,  359,  254,
      628,  249,  200,   58,   96,   96,  152,  250,   53,   96,
       94,  204,   98,  251,  252,   96,   96,  628,  628,  176,
       53,   53,  254,   53,  628,  249,  360,  361,  176,   53,
      255,  250,  260,  628,  628,  153,  251,  252,  256,   98,
      628,   65,   65,  628,  628,  176,   53,   53,   58,  360,
      361,  149,  628,   65,  255,  261,   53,  364,  153,   88,
       88,  256,   65,  262,   88,  365,  210,   89,  628,  334,
       88,   88,  211,   53,  212,  213,   65,  214,  261,  628,

      150,  364,  278,  109,  628,   65,  262,   65,  365,  215,
      216,  385,  334,  263,   89,  628,  211,  299,  212,  213,
      194,  214,  628,  150,  628,  278,  194,  109,   65,  628,
      270,  271,  215,  216,  227,  227,  628,  263,  628,  227,
      299,  628,  228,  386,  194,  227,  227,  190,  190,  229,
      194,   65,  190,  270,  271,  191,  194,  350,  190,  190,
      628,  194,  194,  272,  628,  230,  386,  194,  628,  228,
      231,  628,  628,  229,  628,  628,  628,  628,  628,  628,
      194,  350,  191,  193,  628,  194,  194,  272,  230,  209,
      209,  194,   88,   88,  209,  209,  209,   88,  232,  233,

       89,  232,  232,   88,   88,  234,  232,  235,  236,  232,
      237,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  238,  239,  232,  232,  209,   89,  209,  234,
      232,  235,  236,  232,  237,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  238,  239,  232,  232,   58,
       58,   58,  242,  176,   53,   58,  628,  243,   60,  190,
      190,   58,   58,  244,  190,  245,  246,  190,  247,   87,
      190,  190,  136,   53,  259,  335,  628,  628,   87,  276,
      248,   53,  628,  628,  300,   60,  309,  244,  628,  245,
      246,  310,  247,   87,  190,  266,  176,   53,  335,   87,

       53,   87,  276,  248,  176,   53,  190,  190,   87,  309,
      177,  190,  178,  179,  191,  180,  628,  190,  190,  194,
      176,   53,  274,   87,   53,  194,  628,  181,  628,  628,
      275,   87,   53,  207,  177,  628,  178,  179,  628,  180,
      628,  191,  193,  194,  339,   87,  274,   88,   53,  194,
      181,  190,  190,  275,   87,  208,  190,  176,   53,  191,
      209,  628,  190,  190,  628,  628,  209,  339,  338,   87,
      292,  293,  209,  628,  294,  628,  104,   87,  209,  301,
       88,   88,  267,  628,  209,   53,  191,  193,  303,  104,
      209,   87,  338,  292,  293,  194,  209,  209,  294,  104,

       87,  194,  209,  209,  385,  267,  175,  175,  295,  104,
      305,  175,  175,  175,  628,   87,  195,   53,  628,  194,
      628,  209,  628,   87,  209,  194,  298,  209,  628,  628,
      209,  295,  104,  305,  628,  628,  386,  473,  628,  628,
      176,   53,  310,  175,   53,  175,  175,  175,  209,  336,
      298,  175,  175,  175,  209,  628,  195,   53,  628,  386,
      473,  628,  196,  209,  197,  198,  296,  199,   53,  209,
      109,   88,  302,  336,  297,  628,  628,  628,  628,  200,
      109,  176,   53,  175,   53,  175,  196,  209,  197,  198,
      296,  199,  340,  209,  194,  355,  379,  297,   88,   88,

      194,  628,  200,  194,  109,  268,  194,  104,  194,   53,
      308,  269,  628,  306,  628,  171,  340,  628,  194,  355,
      194,  628,  307,  628,  194,   88,   88,  194,  104,  268,
      194,  628,  194,  104,  104,  269,  308,  306,  628,  171,
      628,  124,  628,  194,   58,   96,   96,  280,  304,  628,
       96,  104,  281,   98,  104,  104,   96,   96,  282,  628,
      283,  284,  232,  285,  232,  124,  320,  628,  232,  628,
      232,  304,  318,  319,  628,  286,  287,  104,  104,  628,
       98,  628,  282,  628,  283,  284,  232,  285,  232,  628,
      320,  232,  232,  628,  232,  318,  319,  232,  286,  287,

       88,   88,  321,  232,  194,   88,  322,  210,   89,  232,
      194,   88,   88,  628,  323,  232,  232,  241,  324,  330,
      628,  232,  232,  241,  628,  321,  628,  232,  194,  432,
      322,  216,  433,  232,  194,   89,  628,  323,  628,  628,
      232,  241,  324,  330,  260,  628,  232,  241,  176,   53,
      176,   53,  628,  241,  216,   88,   88,  341,  628,  241,
       88,  434,  210,   89,  331,   65,   88,   88,  211,  241,
      212,  213,  628,  214,  628,  241,   53,  241,   53,  328,
      329,  341,  628,  241,  434,  215,  216,  331,   65,  628,
       89,  628,  211,  241,  212,  213,  343,  214,  628,  241,

      176,   53,  328,  329,   65,  176,   53,  387,  215,  216,
      209,  241,  290,  209,  332,  209,  628,  241,  291,  176,
       53,  309,  333,  337,  628,   65,  310,  209,   53,  628,
      628,  387,   65,   53,  209,  241,  290,  209,  332,  209,
      628,  241,  291,  628,  309,  333,  337,   53,   65,  628,
      209,  227,  227,   65,  344,  628,  227,   65,  628,  228,
      190,  190,  227,  227,  194,  190,  307,  346,  191,  628,
      194,  190,  190,  628,  628,  628,   65,  344,   65,  345,
      308,  628,  230,  628,  176,   53,  228,  231,  194,   87,
      628,  385,  190,  190,  194,  191,  266,  190,   87,  346,

      191,   65,  345,  190,  190,  230,  227,  227,  628,  194,
      194,  227,   53,   87,  227,  194,  194,  227,  227,  628,
      194,   87,  628,  510,  349,  348,  194,  191,  266,  226,
       88,  628,  628,  194,  194,  351,  628,  312,  303,  194,
      194,  227,  313,  628,  194,  391,  510,  349,  348,  628,
      194,  194,  628,  226,  352,  381,  628,  194,  351,  104,
      312,  227,  227,  104,  194,  226,  227,  628,  391,  228,
      194,  194,  227,  227,  354,  194,  628,  194,  352,  451,
      353,  194,  104,  628,  104,  522,  628,  628,  194,  226,
      523,  307,  314,  628,  194,  194,  228,  231,  354,  356,

      628,  194,  451,  353,  628,  308,  209,  104,  522,  628,
      147,   88,  209,  308,   87,  314,  227,  227,  148,  104,
      194,  227,  370,   87,  228,   94,  194,  227,  227,  209,
      209,  628,   94,  315,  147,  209,  209,  628,   87,  628,
      104,  382,  148,  371,  194,  370,   87,  230,   94,  628,
      194,  228,  231,  209,  209,   94,  628,  315,  628,  209,
      209,  209,  372,  104,  382,  628,  371,  209,  628,  373,
      230,  232,  226,  232,  232,  628,  232,  209,  209,  450,
      374,  628,  628,  209,  209,  209,  372,  380,  232,  628,
      628,  209,  373,  176,   53,  232,  226,  232,  232,   87,

      232,  209,  450,  209,  374,  628,  628,  209,   87,  209,
      209,  232,  232,  376,  316,  232,  209,  232,  628,  375,
      317,   53,  628,   87,  628,  522,  628,  209,  628,  232,
      523,   87,  628,  209,  209,  628,  232,  376,  316,  232,
      209,  232,  375,  232,  317,  209,  377,  311,  522,  232,
      628,  209,  232,   58,   58,   58,  242,  393,  232,   58,
       94,  243,   60,  449,  232,   58,   58,  232,  628,  209,
      377,  311,  628,  232,  392,  209,  628,  628,  628,  628,
      393,  628,  232,   94,  628,  628,  449,   88,  232,   60,
       58,   58,   58,  242,  209,  104,   58,  392,  243,   60,

      209,  628,   58,   58,  244,  628,  245,  246,  232,  247,
      628,  628,  378,  301,  232,  628,  104,  383,  209,  628,
      628,  248,  628,  395,  209,   87,   60,  311,  244,  628,
      245,  246,  232,  247,   87,  378,  232,  394,  232,  104,
      383,  483,  232,  628,  248,  241,  395,  326,  241,   87,
      241,  311,  232,  327,  628,  396,  385,   87,  232,  194,
      232,  394,  241,  628,  483,  194,  232,  628,  628,  241,
      628,  326,  241,  628,  241,  232,  232,  327,  398,  396,
      628,  232,  232,  194,  232,  241,  190,  190,  529,  194,
      232,  190,  628,  530,  191,  232,  399,  190,  190,  232,

      397,  232,  398,  241,  403,  232,  628,  241,  232,  241,
      405,  529,  628,  241,  232,  347,  628,  628,  628,  232,
      399,  191,  193,  397,  628,  232,  232,  241,  403,  241,
      241,  241,  232,  241,  405,  241,  241,  241,  347,   58,
       96,   96,  280,  402,  400,   96,  401,  281,   98,  241,
      232,   96,   96,  241,  241,  241,  232,  628,  628,  241,
      241,  628,  241,  430,  404,  581,  402,  400,  241,  401,
      523,  287,  628,  241,  628,   98,  628,  369,  406,  241,
      628,  628,  205,  241,  408,  628,  241,  404,  581,  241,
      241,  628,  241,  407,  287,  282,  241,  283,  284,  194,

      285,  406,  628,  628,  194,  194,  205,  241,  408,  628,
      194,   65,  286,  241,  241,  409,  628,  407,  628,  282,
      241,  283,  284,  194,  285,  628,  385,  628,  194,  194,
      628,  628,   65,   65,  194,  286,  227,  227,  410,  409,
      194,  227,  368,  388,  228,  628,  194,  227,  227,  356,
      628,  628,  628,  628,   65,   65,  369,  628,  386,  209,
      628,   95,  410,  308,  194,  209,  628,  312,  628,  628,
      194,  228,  313,  511,  420,   58,  628,   65,  149,  628,
      209,  386,   94,  209,  628,   95,  209,  490,  369,  209,
      312,  227,  227,  203,  209,  209,  227,  298,  388,  228,

      209,  209,  227,  227,  209,   94,  309,  150,  389,  209,
      209,  310,  628,  628,  209,  209,  298,  203,  209,  209,
      209,  298,  312,  385,  209,  209,  228,  313,  628,  309,
      150,  628,  389,  209,  628,  628,  209,  628,  209,  209,
      298,  438,  209,  209,  209,  312,  190,  190,  628,  209,
      628,  190,  628,  412,  191,  386,  628,  190,  190,  413,
      209,  414,  415,  209,  416,  438,  209,  209,  628,  209,
      379,  628,  309,  209,  439,  628,  417,  310,  386,  435,
      628,  191,  418,  413,  308,  414,  415,  209,  416,  109,
      232,  628,  324,  209,  380,  309,  232,  439,  628,  417,

      190,  190,  435,  232,  628,  190,   87,  628,  191,  232,
       88,  190,  190,  109,  232,   87,  324,  628,  104,  232,
      232,  628,  436,  628,  419,  232,  124,  232,  628,   88,
       87,   65,  628,  232,  628,  191,  193,  104,   87,  104,
      628,  628,  437,  232,  628,  124,  436,  419,  232,  232,
      124,  453,   65,   94,  232,  232,  628,  628,  104,  420,
       58,  232,  104,  149,  628,  628,  437,  628,  628,  124,
      628,  628,  232,  369,  453,   65,   94,  628,  232,  232,
      232,  104,  227,  227,  628,  232,  232,  227,  628,  441,
      228,  628,  150,  227,  227,  442,  232,  443,  444,  232,

      445,  324,  232,  628,  232,  232,  628,  628,  241,  628,
      232,  628,  446,  447,  241,  150,  628,  228,  448,  442,
      232,  443,  444,  232,  445,  324,  232,  232,  241,  232,
      628,  241,  241,  232,  241,  446,  447,  241,  241,  241,
      241,  241,  628,  452,  241,  241,  241,  241,  241,  628,
      241,  232,  241,  628,  241,  241,  628,  232,  241,  628,
      628,  241,  628,  241,  241,  241,  452,   65,  241,  241,
      241,  241,  241,  628,  241,  411,  440,  454,  241,  190,
      190,  411,  440,  411,  190,  459,  412,  191,   65,  411,
      190,  190,  628,  628,  432,  628,  484,  433,  628,  411,

      440,  454,  628,  628,  628,  411,  440,  411,  628,  459,
      385,   65,  543,  411,  191,  418,  190,  190,  628,  505,
      484,  190,  628,  412,  191,  489,  434,  190,  190,  413,
      411,  414,  415,  369,  416,  543,  411,  411,  366,  490,
      457,  458,  529,  411,  226,  628,  417,  530,  460,  434,
      628,  191,  418,  413,  411,  414,  415,  628,  416,  628,
      411,  411,  366,  457,  458,  529,  628,  411,  226,  417,
      411,  460,  455,  411,  411,  411,  628,  461,  456,  628,
      411,  464,  464,  628,  628,  462,  464,  411,  432,  465,
      628,  433,  464,  464,  411,  469,  455,  411,  411,  411,

      628,  461,  456,   88,  411,   88,  468,  385,  462,  308,
      411,  104,  209,  104,  298,  628,  465,  466,  209,  628,
      434,  411,  440,  471,  478,  628,  628,  411,  440,  440,
      468,  470,  104,  628,  104,  440,  209,  628,  298,  386,
      479,  472,  209,  434,  628,  411,  440,  471,  478,  628,
      440,  411,  440,  440,  470,  104,  440,  104,  628,  440,
      476,  477,  386,  479,  472,  227,  227,  628,  628,  628,
      227,  469,  441,  228,  440,  440,  227,  227,  480,  628,
      440,  440,  628,  476,  477,  308,  481,  440,  232,  482,
      324,  628,  411,  440,  232,  531,  447,  628,  411,  440,

      228,  448,  480,   65,  628,  440,  495,  628,  628,  481,
      628,  440,  232,  482,  324,  628,  411,  440,  232,  447,
      227,  227,  411,   65,   65,  227,  628,  441,  228,  495,
      628,  227,  227,  442,  492,  443,  444,  628,  445,  628,
      411,  496,   65,  628,   65,  491,  411,   65,  493,  628,
      446,  447,  628,  628,  628,  228,  448,  442,  432,  443,
      444,  433,  445,   65,  411,  496,  628,   65,  491,  628,
      411,  628,  493,  446,  447,  440,  411,  474,  440,  411,
      440,  411,  411,  475,  498,  411,   65,  411,  628,  628,
      534,  497,  440,  628,  628,  494,  628,  628,  628,  440,

      411,  474,  440,  411,  440,  411,  411,  475,  498,  411,
      628,  411,  628,  534,  497,  440,  485,  485,  494,  411,
      628,  485,  628,  628,  486,  411,  411,  485,  485,  500,
      411,  501,  411,  464,  464,  499,  411,  628,  464,  628,
      628,  465,  628,  411,  464,  464,  628,  487,  628,  411,
      411,  486,  488,  500,  411,  501,  411,  524,  499,  432,
      411,  628,  433,  628,  628,  469,  464,  464,  465,  466,
      487,  464,  628,  568,  464,  464,  464,  464,  464,  308,
      464,  524,  209,  465,  508,  628,  464,  464,  209,   88,
      511,  434,  104,  506,  628,  628,  568,  104,  509,  628,

      628,  464,  504,   65,  490,  628,  209,  628,  628,  387,
      465,  466,  209,  104,  434,  440,  506,  628,  104,  507,
      440,  440,  509,  309,   65,  532,  440,  628,  310,  440,
      628,  512,  516,  387,  513,  440,  104,  440,  514,  440,
      628,  104,  507,  440,  440,  440,  309,   65,  532,  440,
      440,  628,  440,  440,  512,  440,  516,  513,  440,  440,
      628,  440,  514,  628,  515,  440,  440,  440,  517,  518,
      628,  440,  440,  440,  440,  519,  440,  385,  628,  440,
      440,  432,  440,  520,  433,  628,  411,  515,  628,  440,
      440,  517,  411,  518,  628,  440,  440,  411,  440,  519,

      628,  628,  385,  411,  440,  411,  520,  485,  485,  529,
      411,  411,  485,  434,  530,  486,  411,  411,  485,  485,
      411,  411,  411,  411,  411,  440,  411,  411,  411,  411,
      411,  440,  529,  628,  594,  411,  434,  628,  487,  530,
      628,  411,  486,  488,  411,  628,  411,  411,  411,  440,
      411,   88,  411,  628,  411,  440,  628,  594,  628,  104,
      628,  487,  485,  485,  464,  464,  628,  485,  628,  464,
      485,  533,  465,  485,  485,  464,  464,  464,  464,  535,
      104,  536,  464,  628,  533,  465,  628,  104,  464,  464,
      440,  628,  628,  525,  628,  124,  440,  485,  526,  465,

      504,  628,  628,  104,  536,  628,  628,  628,  104,  440,
      628,  482,  465,  504,  440,  440,  525,  485,  485,  124,
      440,  440,  485,  537,  385,  486,  628,  440,  485,  485,
      440,  104,  628,  440,  527,  482,  440,  538,  440,  440,
      482,  628,  438,  440,  440,  440,  628,  628,  487,  440,
      628,  440,  486,  488,  440,  628,  386,  440,  527,  440,
      440,  628,  440,  440,  482,  440,  438,  440,  440,  628,
      385,  487,  521,  440,  628,  539,  540,  628,  628,  386,
      628,  440,  484,  440,  628,  628,  490,  440,  544,  440,
      522,  311,  628,  628,  628,  523,  569,  628,  539,  628,

      540,  628,  529,  628,  628,   65,  484,  530,  537,  385,
       88,   65,  544,  522,  628,  311,  485,  485,  104,  569,
      571,  485,  538,  541,  486,  529,   65,  485,  485,   88,
      628,  545,   65,  580,  554,  432,  628,  104,  433,  104,
      628,  386,  628,  571,  546,  124,  628,  525,  555,   65,
      546,  486,  526,  468,  545,   65,  580,  556,  104,  628,
      628,  522,  104,  558,  386,  628,  523,  434,  546,  124,
      525,  485,  485,  628,  546,  557,  485,  468,  541,  486,
      556,  104,  485,  485,  522,  546,  558,  576,  542,  490,
      434,  546,  440,  559,  482,  586,  554,  432,  440,  559,

      433,  628,  525,  628,  628,  628,  486,  526,  628,  546,
      555,  576,  542,  628,  385,  546,  440,  559,  482,  586,
      628,  524,  440,  559,  628,  525,  464,  464,  628,  434,
      628,  464,  628,  547,  465,  591,  628,  464,  464,  548,
      628,  549,  550,  546,  551,  524,  529,  628,  570,  546,
      628,  530,  434,  574,  575,  628,  552,  628,  591,  628,
      628,  465,  553,  548,  628,  549,  550,  546,  551,  529,
      628,  570,  628,  546,  628,  628,  574,  575,  595,  552,
      485,  485,  628,  628,  628,  485,   65,  560,  486,  628,
      628,  485,  485,  561,  546,  562,  563,  559,  564,  590,

      546,  464,  464,  559,  628,  577,  464,   65,  547,  465,
      565,  566,  464,  464,  628,  486,  567,  561,  546,  562,
      563,  559,  564,  590,  546,  628,  628,  559,  577,  628,
       65,  628,  385,  565,  566,  559,  465,  553,  464,  464,
      628,  559,  559,  464,  628,  547,  465,  628,  559,  464,
      464,  548,  546,  549,  550,  578,  551,  628,  546,  559,
      614,  628,  628,  579,  617,  559,  559,  557,  552,  618,
      628,  628,  559,  465,  553,  548,  546,  549,  550,  578,
      551,  490,  546,  614,  440,  628,  579,  617,  628,  628,
      440,  552,  546,  559,  572,  546,  628,  546,  628,  559,

      573,  559,  628,  584,  585,  628,  628,  559,  440,  546,
      628,  628,  587,  628,  440,  628,  546,  559,  572,  546,
      628,  546,  546,  559,  573,  559,  584,  585,  546,  628,
      628,  559,  546,  485,  485,  587,  559,  546,  485,  588,
      560,  486,  559,  546,  485,  485,  546,  589,  546,  546,
      598,  546,  546,  596,  546,  546,  628,  546,  628,  628,
      559,  546,  597,  588,  566,  628,  559,  546,  486,  567,
      589,  628,  546,  546,  598,  546,  596,  628,  546,  546,
      628,  546,  628,  628,  628,  597,  628,  566,  485,  485,
      628,  628,  546,  485,  628,  560,  486,  628,  546,  485,

      485,  561,  546,  562,  563,  546,  564,  546,  546,  546,
      600,  546,  602,  546,  628,  546,  546,  599,  565,  566,
      628,  601,  546,  486,  567,  561,  546,  562,  563,  546,
      564,  546,  546,  546,  600,  546,  602,  546,  605,  546,
      599,  565,  566,  559,  601,  582,  559,  628,  559,  546,
      603,  583,  593,  604,  628,  546,  628,  540,  628,  628,
      559,  104,  559,  628,  628,  628,  628,  559,  559,  582,
      559,  522,  559,  546,  603,  583,  523,  628,  606,  546,
      628,  540,  104,  559,  559,  559,  559,  559,  608,  628,
      559,  559,  559,  559,  522,  628,  628,  628,  607,  628,

      609,  606,  628,  628,  559,  104,  592,  610,  559,  559,
      559,  559,  608,  559,  559,  559,  628,  559,  628,  559,
      593,  607,  628,  609,  559,  484,  628,  612,  559,  611,
      559,  610,  559,  613,  559,  546,  546,  559,  559,  619,
      385,  546,  546,  559,  546,  628,  628,  628,  559,  484,
      546,  612,  611,  620,  559,  546,  559,  613,  544,  546,
      546,  546,  559,  546,  605,  546,  546,  628,  546,  546,
      559,  628,  529,  628,  546,  559,  559,  530,  593,  546,
      628,  559,  544,  559,  559,  546,  590,  546,  628,  559,
      559,  628,  559,  546,  559,  529,  628,  522,  559,  559,

      559,  628,  523,  628,  628,  559,  559,  559,  559,  559,
      590,  590,  559,  559,  559,  559,  559,  559,  559,  385,
      522,  385,  559,  559,  559,  628,  615,  628,  385,  385,
      559,  628,  628,  559,  621,  590,  559,  628,  628,  559,
      593,  559,  559,  385,  628,  524,  622,  559,  559,  619,
      385,  617,  628,  617,  623,  628,  618,  621,  618,  385,
      617,  529,  628,  620,  628,  618,  530,  628,  593,  524,
      622,  559,  628,  590,  617,  625,  617,  559,  385,  628,
      618,  628,  529,  617,  529,  623,  628,  530,  628,  628,
      628,  617,  628,  624,  628,  559,  618,  590,  625,  593,

      628,  559,  559,  626,  385,  529,  626,  385,  559,  628,
      617,  628,  628,  628,  617,  618,  624,  627,  628,  628,
      627,  628,  622,  628,  628,  628,  559,  628,  628,  628,
      628,  628,  559,  617,  628,  628,  617,  628,  628,  617,
      628,  618,  628,  628,  618,  628,  622,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  617,
      628,  628,  617,   52,  628,  628,   52,   57,   57,   57,
       57,   65,  628,  628,   65,   87,  628,   87,   87,   88,
       88,   88,   88,   95,   95,   95,   95,  104,  628,  104,
      104,  109,  628,  109,  109,  128,  628,  128,  128,   58,

       58,   58,   58,  131,  131,  131,  131,   96,   96,   96,
       96,  151,  151,  151,  151,  175,  628,  628,  175,  189,
      628,  189,  189,  194,  628,  628,  194,  209,  628,  209,
      209,  226,  628,  226,  226,  241,  241,  241,  241,  190,
      628,  190,  190,  265,  628,  265,  265,  279,  279,  279,
      279,  227,  628,  227,  227,  311,  628,  311,  311,  384,
      384,  384,  384,  411,  628,  411,  411,  431,  431,  431,
      431,  440,  628,  440,  440,  463,  628,  463,  463,   58,
       58,   58,   58,  484,  628,  484,  484,  464,  628,  464,
      464,  503,  628,  503,  503,  485,  628,  485,  485,  524,

      628,  524,  524,  528,  528,  528,  528,  546,  628,  546,
      546,  559,  628,  559,  559,  616,  616,  616,  616,    3,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628
    } ;

static yyconst short int yy_chk[4581] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        4,    5,    6,    6,    5,    7,    7,    8,  633,   10,
        8,    5,    9,    9,    9,    9,   14,   14,    9,  632,
       25,    9,   10,  502,    9,    9,   25,    4,   11,   11,
       11,   10,   16,   16,   16,   16,   10,   19,    5,   55,
      464,   20,   55,   14,   52,   19,   10,   25,    9,   20,
       25,  289,   30,   30,   10,   59,   11,   13,   13,   61,
       19,   16,   13,   13,   13,  289,   19,   13,   13,   13,
       20,   52,  432,   26,   26,   56,   56,   43,   26,   26,

       26,  129,   59,   19,   30,   43,   61,  264,   62,   19,
      190,   21,   22,   20,   13,   13,   13,   18,   18,   21,
       22,   18,   18,   18,   18,  129,   43,   30,   18,   18,
       26,   23,   26,   31,   31,   62,   31,  184,   22,   23,
       21,   22,   21,   24,   34,   81,   34,   23,   74,   43,
       18,   24,   35,  171,   18,   18,   18,   72,   34,   40,
       23,   22,   24,   21,   22,   21,   31,   34,  152,   28,
       28,   23,   24,   18,   28,   37,  171,   28,   69,   69,
       28,   28,   34,   23,   35,   58,   24,   37,    3,   31,
       34,   40,  152,    0,    0,   24,   37,   38,   38,  205,

       28,   87,   38,    0,   28,   38,   69,   35,   38,   38,
       87,   37,   42,   44,   40,   39,   39,   39,   39,   37,
       42,   44,  205,   28,   29,   87,   29,   29,   38,   49,
       39,   29,   38,   87,   29,   42,   49,   29,   29,   39,
       45,   42,   44,    0,   44,   49,   63,   63,   45,  240,
        0,   38,    0,   49,   39,    0,    0,   29,   42,    0,
       49,   29,   39,    0,   42,   44,   45,   44,   49,   45,
       46,   65,  240,   63,   64,   64,   64,   48,   46,   65,
       29,   32,   32,   32,   32,   48,   46,   32,   54,   45,
       32,   54,   45,   32,   32,   47,   48,  153,   54,   46,

       65,    0,   64,   47,    0,   85,   48,   68,   68,  231,
       46,   47,  299,   32,   70,   70,   85,   32,  132,  132,
       48,  153,   46,   65,   47,   54,  299,   71,   71,   48,
        0,   66,   85,  231,   68,   47,   32,   33,   33,   66,
       85,   70,   33,  133,  133,   33,  132,   47,   33,   33,
       57,   57,   57,   57,   71,  199,   57,  285,   33,   57,
       66,  199,   57,   57,    0,   67,  199,   33,   33,   88,
      133,   67,   33,   67,    0,   60,   60,   60,   60,  199,
      285,   60,   33,   66,   60,  199,   57,   60,   60,  199,
       33,   33,   36,   36,   67,   36,   36,   36,   36,   36,

       36,   88,   36,   36,   36,  288,   36,   36,   75,  137,
      137,   60,   73,   73,   73,   73,   75,   67,    0,   76,
      227,  284,    0,    0,   88,  227,   36,   76,  288,   36,
       36,   36,  173,  173,   77,    0,  137,   75,    0,   79,
        0,   73,   77,  227,   82,  284,   77,   79,   76,   36,
       41,   41,   82,   41,   41,   41,   41,   41,   41,  173,
       75,   41,   41,   77,   41,   41,    0,   82,   79,   80,
       77,   76,   84,   82,    0,  287,    0,   80,  430,    0,
       84,    0,    0,   41,   41,  302,   77,   41,   41,   41,
       82,   79,  430,  302,    0,   80,   82,   91,   80,  287,

       91,   84,   92,   92,  280,   92,   41,   41,   50,   50,
      280,   50,   50,   50,   50,   50,   50,  302,   80,   50,
       91,   80,   50,   50,   84,   89,   89,   90,  280,   91,
       89,   90,   94,   89,  280,   92,   89,   89,   93,   93,
       90,    0,   50,    0,   91,   50,   50,   50,  162,  162,
       94,   90,   91,  183,  183,   90,   89,  162,   92,   96,
       89,  313,   96,   90,   94,   50,   86,   86,  119,  451,
       93,   86,   86,   86,   94,  360,   86,   86,    0,   89,
      183,  162,    0,  451,    0,  313,    0,   94,  104,   97,
        0,   96,  100,   93,    0,  115,  104,  115,   97,  360,

      119,  100,  101,   86,   86,   86,   95,   95,   95,   95,
      102,  101,   95,   97,   96,   95,  100,  104,   95,   95,
      362,   97,  102,  119,  100,  483,  101,  115,  105,  257,
      257,  102,    0,    0,  101,  103,  105,  103,   95,  483,
      104,    0,   95,  107,  362,    0,  102,  106,  108,  103,
      115,  107,    0,  106,  102,  106,  257,  105,  103,  107,
      108,   95,   98,   98,   98,   98,  111,  112,   98,  108,
        0,   98,  107,  103,   98,   98,  106,    0,  111,  112,
      105,  103,    0,  107,  108,  175,  175,  111,  112,  258,
      258,  125,  108,  116,   98,  107,  149,    0,   98,  106,

      117,  116,  111,  112,  113,  113,  113,  122,  117,  122,
      111,  112,    0,  175,  113,    0,  258,   98,   99,   99,
       99,   99,  116,  125,   99,  242,  242,   99,  149,  117,
       99,   99,  113,  138,  138,  138,   99,    0,  113,  122,
      120,  114,  114,  114,  114,  116,  125,  118,  120,  123,
       99,  149,  117,  242,   99,  118,  114,  123,  121,  118,
       99,  138,  122,  505,    0,  114,  121,    0,  182,  120,
      182,    0,  123,   99,  109,  109,  118,  505,  123,  109,
      114,  109,  109,  118,  121,  109,  109,  121,  114,  127,
      124,  127,  120,    0,  165,  123,  126,  182,  124,  118,

      127,  123,    0,  134,  126,  109,  135,  121,  314,  109,
      121,  134,    0,  127,  135,  127,  139,  139,  139,  124,
      148,    0,  124,  127,  202,  126,  165,  154,  109,  110,
      110,  314,  134,    0,  110,  135,  110,  110,    0,  358,
      110,  110,  124,  154,  139,  124,  110,  364,  126,  165,
      359,  154,  148,  141,  148,  134,  202,  140,  135,    0,
      110,  141,  358,    0,  110,  140,  154,    0,  156,  365,
      110,  364,  140,  359,    0,  148,  156,  148,  141,  202,
        0,  308,  141,  110,  128,  128,  140,  128,  128,  128,
      128,  128,  128,  365,  128,  128,  140,  156,  128,  128,

      144,  141,  421,  155,  361,  141,  143,  426,  144,  140,
        0,    0,    0,  308,  143,  155,  144,    0,  128,    0,
      156,  128,  128,  128,  155,  147,  421,  361,    0,  144,
      157,  426,  569,  143,  147,  143,  308,  147,  157,  155,
      144,  128,  131,  131,  131,  131,  569,  155,  131,  147,
      131,  131,  144,  159,  131,  131,  143,  147,  143,  157,
      147,    0,  160,  150,    0,  488,  150,  166,    0,  159,
      161,    0,  161,    0,  160,  166,    0,  159,  131,  136,
      136,  150,  157,  160,  161,  136,  526,  136,  136,  488,
      136,  168,  159,  161,  166,  150,  166,  278,  160,  168,

      278,  591,  136,  342,  342,  150,  160,  136,  161,  136,
      526,  136,  136,    0,  136,  591,  161,  166,  150,  166,
      168,  168,  206,  179,  179,  136,  145,  145,    0,  278,
      342,  145,  363,  179,  145,    0,  206,  145,  145,  163,
      167,  145,    0,  168,  168,  164,  206,  163,  167,    0,
      174,  179,  278,  164,  163,  363,  167,  179,  174,  206,
      366,  145,  145,  429,    0,  145,  146,  146,  163,  167,
      164,  146,  146,  146,  164,  381,  146,  146,  163,  174,
      167,    0,  146,  366,  146,  146,  429,  146,  282,  334,
      334,  163,  167,  164,  282,    0,    0,  164,    0,  146,

      180,  180,  174,  146,  146,  146,  146,  381,  146,  146,
        0,  146,  282,  177,  177,  178,  178,  334,  282,  180,
        0,  177,  146,  151,  151,  151,  151,  177,  180,  151,
      381,  151,  151,  178,  178,  151,  151,    0,    0,  181,
      181,  177,  180,  178,  185,  177,  283,  283,  335,  335,
      181,  177,  185,  186,  187,  151,  178,  178,  181,  151,
        0,  186,  187,    0,    0,  249,  249,  181,  203,  283,
      283,  203,    0,  185,  181,  186,  335,  286,  151,  158,
      158,  181,  186,  187,  158,  286,  158,  158,    0,  249,
      158,  158,  158,  249,  158,  158,  185,  158,  186,  188,

      203,  286,  203,  217,    0,  186,  187,  188,  286,  158,
      158,  384,  249,  188,  158,    0,  158,  217,  158,  158,
      197,  158,    0,  203,    0,  203,  197,  217,  188,    0,
      197,  197,  158,  158,  169,  169,    0,  188,    0,  169,
      217,    0,  169,  384,  197,  169,  169,  189,  189,  169,
      197,  188,  189,  197,  197,  189,  270,  270,  189,  189,
        0,  198,  270,  198,    0,  169,  384,  198,    0,  169,
      169,    0,    0,  169,    0,    0,    0,    0,    0,    0,
      270,  270,  189,  189,    0,  198,  270,  198,  169,  170,
      170,  198,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  172,
      172,  172,  172,  250,  250,  172,    0,  172,  172,  191,
      191,  172,  172,  172,  191,  172,  172,  191,  172,  201,
      191,  191,  259,  259,  259,  250,    0,    0,  201,  201,
      172,  250,    0,    0,  218,  172,  310,  172,    0,  172,
      172,  310,  172,  201,  191,  191,  336,  336,  250,  218,

      259,  201,  201,  172,  176,  176,  193,  193,  218,  310,
      176,  193,  176,  176,  193,  176,    0,  193,  193,  200,
      254,  254,  200,  218,  336,  200,    0,  176,    0,    0,
      200,  218,  176,  207,  176,    0,  176,  176,    0,  176,
        0,  193,  193,  200,  254,  207,  200,  208,  254,  200,
      176,  192,  192,  200,  207,  208,  192,  253,  253,  192,
      212,    0,  192,  192,    0,    0,  212,  254,  253,  207,
      212,  212,  213,    0,  213,    0,  208,  207,  213,  219,
      221,  223,  192,    0,  212,  253,  192,  192,  221,  223,
      212,  219,  253,  212,  212,  348,  213,  214,  213,  208,

      219,  348,  213,  214,  433,  192,  194,  194,  214,  221,
      223,  194,  194,  194,    0,  219,  194,  194,    0,  348,
        0,  214,    0,  219,  216,  348,  216,  214,    0,    0,
      216,  214,  221,  223,    0,    0,  433,  439,    0,    0,
      251,  251,  439,  194,  194,  194,  195,  195,  216,  251,
      216,  195,  195,  195,  216,    0,  195,  195,    0,  433,
      439,    0,  195,  215,  195,  195,  215,  195,  251,  215,
      220,  220,  220,  251,  215,    0,    0,    0,    0,  195,
      220,  255,  255,  195,  195,  195,  195,  215,  195,  195,
      215,  195,  255,  215,  275,  275,  325,  215,  220,  224,

      275,    0,  195,  196,  220,  196,  196,  224,  196,  255,
      325,  196,    0,  224,    0,  325,  255,    0,  275,  275,
      196,    0,  225,    0,  275,  225,  222,  196,  224,  196,
      196,    0,  196,  225,  222,  196,  225,  224,    0,  325,
        0,  225,    0,  196,  204,  204,  204,  204,  222,    0,
      204,  224,  204,  204,  225,  222,  204,  204,  204,    0,
      204,  204,  235,  204,  236,  225,  236,    0,  235,    0,
      236,  222,  235,  235,    0,  204,  204,  225,  222,    0,
      204,    0,  204,    0,  204,  204,  235,  204,  236,    0,
      236,  237,  235,    0,  236,  235,  235,  237,  204,  204,

      209,  209,  237,  238,  349,  209,  238,  209,  209,  238,
      349,  209,  209,    0,  238,  237,  239,  246,  239,  246,
        0,  237,  239,  246,    0,  237,    0,  238,  349,  369,
      238,  209,  369,  238,  349,  209,  260,  238,    0,    0,
      239,  246,  239,  246,  260,    0,  239,  246,  256,  256,
      337,  337,    0,  247,  209,  210,  210,  256,    0,  247,
      210,  369,  210,  210,  247,  260,  210,  210,  210,  245,
      210,  210,    0,  210,    0,  245,  256,  247,  337,  245,
      245,  256,    0,  247,  369,  210,  210,  247,  260,    0,
      210,    0,  210,  245,  210,  210,  261,  210,    0,  245,

      252,  252,  245,  245,  261,  338,  338,  309,  210,  210,
      211,  248,  211,  211,  248,  211,    0,  248,  211,  339,
      339,  309,  248,  252,  262,  261,  309,  211,  252,    0,
        0,  309,  262,  338,  211,  248,  211,  211,  248,  211,
        0,  248,  211,    0,  309,  248,  252,  339,  261,  263,
      211,  226,  226,  262,  262,    0,  226,  263,    0,  226,
      265,  265,  226,  226,  350,  265,  307,  265,  265,    0,
      350,  265,  265,    0,    0,    0,  262,  262,  263,  263,
      307,    0,  226,    0,  340,  340,  226,  226,  350,  307,
        0,  472,  266,  266,  350,  265,  265,  266,  307,  266,

      266,  263,  263,  266,  266,  226,  228,  228,    0,  268,
      269,  228,  340,  307,  228,  268,  269,  228,  228,    0,
      271,  307,    0,  472,  269,  268,  271,  266,  266,  315,
      303,    0,    0,  268,  269,  271,    0,  228,  303,  268,
      269,  228,  228,    0,  271,  315,  472,  269,  268,    0,
      271,  272,    0,  315,  272,  304,    0,  272,  271,  303,
      228,  229,  229,  304,  273,  391,  229,    0,  315,  229,
      273,  274,  229,  229,  274,  272,    0,  274,  272,  391,
      273,  272,  303,    0,  304,  485,    0,    0,  273,  391,
      485,  276,  229,  508,  273,  274,  229,  229,  274,  277,

      277,  274,  391,  273,    0,  276,  290,  304,  485,    0,
      276,  305,  290,  277,  276,  229,  230,  230,  277,  305,
      351,  230,  290,  276,  230,  508,  351,  230,  230,  291,
      290,    0,  277,  230,  276,  291,  290,    0,  276,    0,
      305,  305,  277,  291,  351,  290,  276,  230,  508,    0,
      351,  230,  230,  291,  293,  277,    0,  230,    0,  291,
      293,  292,  292,  305,  305,    0,  291,  292,    0,  293,
      230,  232,  390,  232,  232,    0,  232,  294,  293,  390,
      294,    0,    0,  294,  293,  292,  292,  300,  232,    0,
        0,  292,  293,  341,  341,  232,  390,  232,  232,  300,

      232,  294,  390,  295,  294,    0,    0,  294,  300,  295,
      296,  232,  234,  296,  234,  234,  296,  234,    0,  295,
      234,  341,    0,  300,    0,  523,    0,  295,  535,  234,
      523,  300,    0,  295,  296,    0,  234,  296,  234,  234,
      296,  234,  295,  317,  234,  297,  297,  389,  523,  317,
        0,  297,  234,  241,  241,  241,  241,  317,  316,  241,
      535,  241,  241,  389,  316,  241,  241,  317,    0,  297,
      297,  389,    0,  317,  316,  297,    0,    0,    0,    0,
      317,    0,  316,  535,    0,    0,  389,  306,  316,  241,
      243,  243,  243,  243,  298,  306,  243,  316,  243,  243,

      298,    0,  243,  243,  243,    0,  243,  243,  319,  243,
        0,    0,  298,  301,  319,    0,  306,  306,  298,    0,
        0,  243,    0,  319,  298,  301,  243,  449,  243,    0,
      243,  243,  319,  243,  301,  298,  318,  318,  319,  306,
      306,  449,  318,    0,  243,  244,  319,  244,  244,  301,
      244,  449,  320,  244,    0,  320,  490,  301,  320,  352,
      318,  318,  244,    0,  449,  352,  318,    0,    0,  244,
        0,  244,  244,    0,  244,  322,  320,  244,  322,  320,
        0,  322,  320,  352,  321,  244,  267,  267,  490,  352,
      321,  267,    0,  490,  267,  323,  323,  267,  267,  322,

      321,  323,  322,  328,  328,  322,    0,  330,  321,  328,
      330,  490,    0,  330,  321,  267,    0,    0,    0,  323,
      323,  267,  267,  321,    0,  323,  324,  328,  328,  327,
      326,  330,  324,  328,  330,  327,  326,  330,  267,  279,
      279,  279,  279,  327,  324,  279,  326,  279,  279,  329,
      324,  279,  279,  327,  326,  329,  324,    0,    0,  327,
      326,    0,  331,  367,  329,  558,  327,  324,  331,  326,
      558,  279,    0,  329,    0,  279,    0,  367,  331,  329,
        0,    0,  367,  333,  333,    0,  331,  329,  558,  333,
      332,    0,  331,  332,  279,  281,  332,  281,  281,  353,

      281,  331,    0,  344,  354,  353,  367,  333,  333,    0,
      354,  344,  281,  333,  332,  344,    0,  332,    0,  281,
      332,  281,  281,  353,  281,  345,  538,    0,  354,  353,
        0,    0,  344,  345,  354,  281,  311,  311,  345,  344,
      355,  311,  368,  311,  311,    0,  355,  311,  311,  356,
      356,    0,    0,    0,  345,  344,  368,    0,  538,  371,
        0,  368,  345,  356,  355,  371,    0,  311,    0,    0,
      355,  311,  311,  511,  357,  357,    0,  345,  357,    0,
      372,  538,  356,  371,    0,  368,  372,  511,  357,  371,
      311,  312,  312,  357,  373,  370,  312,  370,  312,  312,

      373,  370,  312,  312,  372,  356,  511,  357,  312,  374,
      372,  511,    0,    0,  375,  374,  375,  357,  373,  370,
      375,  370,  312,  386,  373,  370,  312,  312,    0,  511,
      357,    0,  312,  374,    0,    0,  376,    0,  375,  374,
      375,  386,  376,  377,  375,  312,  346,  346,    0,  377,
        0,  346,    0,  346,  346,  386,    0,  346,  346,  346,
      376,  346,  346,  378,  346,  386,  376,  377,    0,  378,
      379,    0,  387,  377,  387,    0,  346,  387,  386,  378,
        0,  346,  346,  346,  379,  346,  346,  378,  346,  379,
      392,    0,  392,  378,  380,  387,  392,  387,    0,  346,

      347,  347,  378,  393,    0,  347,  380,    0,  347,  393,
      382,  347,  347,  379,  392,  380,  392,    0,  382,  394,
      392,  604,  382,  409,  347,  394,  382,  393,    0,  383,
      380,  409,    0,  393,    0,  347,  347,  383,  380,  382,
        0,    0,  383,  394,    0,  383,  382,  347,  395,  394,
      382,  409,  409,  604,  395,  396,    0,    0,  383,  420,
      420,  396,  382,  420,    0,    0,  383,    0,    0,  383,
        0,    0,  395,  420,  409,  409,  604,    0,  395,  396,
      398,  383,  388,  388,    0,  396,  398,  388,    0,  388,
      388,    0,  420,  388,  388,  388,  399,  388,  388,  397,

      388,  397,  399,    0,  398,  397,    0,    0,  401,    0,
      398,    0,  388,  388,  401,  420,    0,  388,  388,  388,
      399,  388,  388,  397,  388,  397,  399,  400,  402,  397,
        0,  403,  401,  400,  402,  388,  388,  403,  401,  404,
      405,  406,    0,  400,  407,  404,  405,  406,  408,    0,
      407,  400,  402,    0,  408,  403,    0,  400,  402,  410,
        0,  403,    0,  404,  405,  406,  400,  410,  407,  404,
      405,  406,  408,    0,  407,  418,  448,  410,  408,  411,
      411,  418,  448,  415,  411,  415,  411,  411,  410,  415,
      411,  411,    0,    0,  431,    0,  527,  431,    0,  418,

      448,  410,    0,    0,    0,  418,  448,  415,    0,  415,
      528,  410,  527,  415,  411,  411,  412,  412,    0,  467,
      527,  412,    0,  412,  412,  489,  431,  412,  412,  412,
      414,  412,  412,  467,  412,  527,  414,  416,  467,  489,
      414,  414,  528,  416,  489,    0,  412,  528,  416,  431,
        0,  412,  412,  412,  414,  412,  412,    0,  412,    0,
      414,  416,  467,  414,  414,  528,    0,  416,  489,  412,
      413,  416,  413,  413,  417,  413,    0,  417,  413,    0,
      417,  419,  419,    0,    0,  417,  419,  413,  434,  419,
        0,  434,  419,  419,  413,  435,  413,  413,  417,  413,

        0,  417,  413,  436,  417,  437,  434,  438,  417,  435,
      413,  436,  435,  437,  435,    0,  419,  419,  435,    0,
      434,  494,  444,  437,  444,    0,    0,  494,  444,  445,
      434,  436,  436,    0,  437,  445,  435,    0,  435,  438,
      445,  438,  435,  434,    0,  494,  444,  437,  444,    0,
      443,  494,  444,  445,  436,  436,  443,  437,    0,  445,
      443,  443,  438,  445,  438,  440,  440,    0,    0,    0,
      440,  452,  440,  440,  443,  446,  440,  440,  446,    0,
      443,  446,    0,  443,  443,  452,  446,  447,  452,  447,
      452,    0,  456,  447,  452,  491,  440,    0,  456,  446,

      440,  440,  446,  491,    0,  446,  456,    0,    0,  446,
        0,  447,  452,  447,  452,  453,  456,  447,  452,  440,
      441,  441,  456,  453,  491,  441,    0,  441,  441,  456,
        0,  441,  441,  441,  454,  441,  441,    0,  441,    0,
      457,  457,  454,    0,  453,  453,  457,  491,  454,    0,
      441,  441,    0,    0,    0,  441,  441,  441,  506,  441,
      441,  506,  441,  454,  457,  457,    0,  453,  453,    0,
      457,    0,  454,  441,  441,  442,  458,  442,  442,  455,
      442,  459,  458,  442,  459,  455,  454,  459,    0,    0,
      506,  458,  442,    0,    0,  455,    0,    0,    0,  442,

      458,  442,  442,  455,  442,  459,  458,  442,  459,  455,
        0,  459,    0,  506,  458,  442,  450,  450,  455,  460,
        0,  450,    0,    0,  450,  460,  461,  450,  450,  461,
      462,  462,  461,  463,  463,  460,  462,    0,  463,    0,
        0,  463,    0,  460,  463,  463,    0,  450,    0,  460,
      461,  450,  450,  461,  462,  462,  461,  542,  460,  468,
      462,    0,  468,    0,    0,  469,  465,  465,  463,  463,
      450,  465,    0,  542,  465,  466,  466,  465,  465,  469,
      466,  542,  469,  466,  471,    0,  466,  466,  469,  470,
      473,  468,  471,  468,    0,  493,  542,  470,  471,    0,

        0,  465,  465,  493,  473,    0,  469,    0,    0,  473,
      466,  466,  469,  471,  468,  474,  468,    0,  470,  470,
      475,  474,  471,  473,  493,  493,  475,    0,  473,  478,
        0,  474,  478,  473,  475,  478,  471,  476,  476,  474,
        0,  470,  470,  476,  475,  474,  473,  493,  493,  477,
      475,    0,  479,  478,  474,  477,  478,  475,  479,  478,
        0,  476,  476,    0,  477,  482,  480,  476,  479,  480,
        0,  482,  480,  477,  481,  481,  479,  530,    0,  477,
      481,  555,  479,  482,  555,    0,  495,  477,    0,  482,
      480,  479,  495,  480,    0,  482,  480,  496,  481,  481,

        0,    0,  570,  496,  481,  497,  482,  484,  484,  530,
      495,  497,  484,  555,  530,  484,  495,  498,  484,  484,
      499,  496,  500,  498,  501,  513,  499,  496,  500,  497,
      501,  513,  530,    0,  570,  497,  555,    0,  484,  570,
        0,  498,  484,  484,  499,    0,  500,  498,  501,  513,
      499,  509,  500,    0,  501,  513,    0,  570,    0,  509,
        0,  484,  486,  486,  503,  503,    0,  486,    0,  503,
      486,  503,  503,  486,  486,  503,  503,  504,  504,  507,
      509,  509,  504,    0,  504,  504,    0,  507,  504,  504,
      514,    0,    0,  486,    0,  507,  514,  486,  486,  503,

      503,    0,    0,  509,  509,    0,    0,    0,  507,  512,
        0,  512,  504,  504,  514,  512,  486,  487,  487,  507,
      514,  515,  487,  510,  510,  487,    0,  515,  487,  487,
      516,  507,    0,  512,  487,  512,  516,  510,  517,  512,
      517,    0,  510,  518,  517,  515,    0,    0,  487,  518,
        0,  515,  487,  487,  516,    0,  510,  519,  487,  520,
      516,    0,  517,  519,  517,  520,  510,  518,  517,    0,
      529,  487,  521,  518,    0,  520,  522,    0,    0,  510,
        0,  519,  543,  520,    0,    0,  521,  519,  529,  520,
      522,  521,    0,    0,    0,  522,  543,  545,  520,    0,

      522,    0,  529,  532,    0,  545,  543,  529,  537,  537,
      556,  532,  529,  522,    0,  521,  524,  524,  556,  543,
      545,  524,  537,  524,  524,  529,  545,  524,  524,  536,
        0,  532,  532,  556,  534,  534,    0,  536,  534,  556,
        0,  537,    0,  545,  553,  536,    0,  524,  534,  545,
      553,  524,  524,  534,  532,  532,  556,  536,  536,    0,
        0,  540,  556,  540,  537,    0,  540,  534,  553,  536,
      524,  525,  525,    0,  553,  539,  525,  534,  525,  525,
      536,  536,  525,  525,  540,  550,  540,  550,  525,  539,
      534,  550,  539,  563,  539,  563,  554,  554,  539,  563,

      554,    0,  525,    0,    0,    0,  525,  525,    0,  550,
      554,  550,  525,    0,  544,  550,  539,  563,  539,  563,
        0,  568,  539,  563,    0,  525,  533,  533,    0,  554,
        0,  533,    0,  533,  533,  568,    0,  533,  533,  533,
        0,  533,  533,  549,  533,  568,  544,    0,  544,  549,
        0,  544,  554,  549,  549,    0,  533,    0,  568,    0,
        0,  533,  533,  533,    0,  533,  533,  549,  533,  544,
        0,  544,    0,  549,    0,    0,  549,  549,  571,  533,
      541,  541,    0,    0,    0,  541,  571,  541,  541,    0,
        0,  541,  541,  541,  551,  541,  541,  566,  541,  566,

      551,  546,  546,  566,    0,  551,  546,  571,  546,  546,
      541,  541,  546,  546,    0,  541,  541,  541,  551,  541,
      541,  566,  541,  566,  551,    0,    0,  566,  551,    0,
      571,    0,  593,  541,  541,  567,  546,  546,  547,  547,
        0,  567,  590,  547,    0,  547,  547,    0,  590,  547,
      547,  547,  552,  547,  547,  552,  547,    0,  552,  567,
      590,    0,    0,  552,  593,  567,  590,  557,  547,  593,
        0,    0,  590,  547,  547,  547,  552,  547,  547,  552,
      547,  557,  552,  590,  557,    0,  552,  593,    0,    0,
      557,  547,  548,  562,  548,  548,    0,  548,    0,  562,

      548,  564,    0,  562,  562,    0,    0,  564,  557,  548,
        0,    0,  564,    0,  557,    0,  548,  562,  548,  548,
        0,  548,  596,  562,  548,  564,  562,  562,  596,    0,
        0,  564,  548,  559,  559,  564,  565,  572,  559,  565,
      559,  559,  565,  572,  559,  559,  596,  565,  573,  574,
      574,  597,  596,  572,  573,  574,    0,  597,    0,    0,
      565,  572,  573,  565,  559,    0,  565,  572,  559,  559,
      565,    0,  573,  574,  574,  597,  572,    0,  573,  574,
        0,  597,    0,    0,    0,  573,    0,  559,  560,  560,
        0,    0,  598,  560,    0,  560,  560,    0,  598,  560,

      560,  560,  575,  560,  560,  577,  560,  576,  575,  578,
      576,  577,  578,  576,    0,  578,  598,  575,  560,  560,
        0,  577,  598,  560,  560,  560,  575,  560,  560,  577,
      560,  576,  575,  578,  576,  577,  578,  576,  581,  578,
      575,  560,  560,  561,  577,  561,  561,    0,  561,  579,
      579,  561,  581,  580,    0,  579,    0,  581,    0,    0,
      561,  580,  582,    0,    0,    0,    0,  561,  582,  561,
      561,  581,  561,  579,  579,  561,  581,    0,  582,  579,
        0,  581,  580,  561,  583,  585,  582,  584,  584,    0,
      583,  585,  582,  584,  581,    0,    0,    0,  583,    0,

      585,  582,    0,    0,  586,  580,  592,  586,  583,  585,
      586,  584,  584,  587,  583,  585,    0,  584,    0,  587,
      592,  583,    0,  585,  588,  592,    0,  588,  586,  587,
      588,  586,  589,  589,  586,  599,  600,  587,  589,  594,
      594,  599,  600,  587,  601,    0,    0,    0,  588,  592,
      601,  588,  587,  594,  588,  602,  589,  589,  594,  599,
      600,  602,  589,  603,  605,  599,  600,    0,  601,  603,
      607,    0,  594,    0,  601,  608,  607,  594,  605,  602,
        0,  608,  594,  609,  606,  602,  606,  603,    0,  609,
      606,    0,  610,  603,  607,  594,    0,  605,  610,  608,

      607,    0,  605,    0,    0,  608,  612,  609,  606,  611,
      606,  611,  612,  609,  606,  611,  610,  613,  614,  616,
      605,  618,  610,  613,  614,    0,  615,    0,  617,  620,
      612,    0,    0,  611,  614,  611,  612,    0,    0,  611,
      615,  613,  614,  624,    0,  615,  617,  613,  614,  619,
      619,  616,    0,  618,  621,    0,  616,  614,  618,  622,
      617,  620,    0,  619,    0,  617,  620,    0,  621,  615,
      617,  621,    0,  621,  616,  624,  618,  621,  627,    0,
      624,    0,  619,  617,  620,  623,    0,  619,    0,    0,
        0,  622,    0,  622,    0,  621,  622,  621,  624,  623,

        0,  621,  623,  625,  625,  619,  626,  626,  623,    0,
      627,    0,    0,    0,  622,  627,  622,  625,    0,    0,
      626,    0,  625,    0,    0,    0,  623,    0,    0,    0,
        0,    0,  623,  627,    0,    0,  625,    0,    0,  626,
        0,  625,    0,    0,  626,    0,  625,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  625,
        0,    0,  626,  629,    0,    0,  629,  630,  630,  630,
      630,  631,    0,    0,  631,  634,    0,  634,  634,  635,
      635,  635,  635,  636,  636,  636,  636,  637,    0,  637,
      637,  638,    0,  638,  638,  639,    0,  639,  639,  640,

      640,  640,  640,  641,  641,  641,  641,  642,  642,  642,
      642,  643,  643,  643,  643,  644,    0,    0,  644,  645,
        0,  645,  645,  646,    0,    0,  646,  647,    0,  647,
      647,  648,    0,  648,  648,  649,  649,  649,  649,  650,
        0,  650,  650,  651,    0,  651,  651,  652,  652,  652,
      652,  653,    0,  653,  653,  654,    0,  654,  654,  655,
      655,  655,  655,  656,    0,  656,  656,  657,  657,  657,
      657,  658,    0,  658,  658,  659,    0,  659,  659,  660,
      660,  660,  660,  661,    0,  661,  661,  662,    0,  662,
      662,  663,    0,  663,  663,  664,    0,  664,  664,  665,

        0,  665,  665,  666,  666,  666,  666,  667,    0,  667,
      667,  668,    0,  668,  668,  669,  669,  669,  669,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "..\\defcompiler\\defscanner.l"
#define INITIAL 0
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 8 "..\\defcompiler\\defscanner.l"

	#include <string>

	#include <iomanip>
    #include "../../util/SGF_Debug.h"
	#include "scanner.h"
	
	/* import the parser's token type into a local typedef */
	
	typedef DefCompiler::Parser::token token;
	typedef DefCompiler::Parser::token_type token_type;
    /* By default yylex returns int, we use token_type. Unfortunately yyterminate
    * by default returns 0, which is not of token_type. */
    #define yyterminate() return token::END

	
      // used to keep track of location
   	/* The following paragraph suffices to track locations accurately. Each time
 	* yylex is invoked, the begin position is moved onto the end position. */

	#define YY_USER_ACTION yylloc->columns(yyleng);
	/* This disables inclusion of unistd.h, which is not available under Visual C++
 	* on Win32. The C++ scanner uses STL streams instead. */

	#define YY_NO_UNISTD_H
    


/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 40 "..\\defcompiler\\defscanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* change the name of the scanner class. results in "ExampleFlexLexer" */
#line 1594 "lex.Def.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 54 "..\\defcompiler\\defscanner.l"


 /* code to place at the beginning of yylex() */



    // reset location
    yylloc->step();


#line 1735 "lex.Def.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 629 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4520 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "..\\defcompiler\\defscanner.l"
{DestroyComment(); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "COMMENT" <<endl; 
	return token::COMMENT; }        
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "..\\defcompiler\\defscanner.l"
{yylval->stringVal = new std::string(yytext, yyleng);
			  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING= "<< yylval->stringVal->c_str() <<endl; 
			  return token::QUOTESTRING;}
	YY_BREAK
/* =============  ESPECIAL COMMANDS ========================= */
case 3:
YY_RULE_SETUP
#line 73 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer DEF_PERC_I "<<  endl;
yylval->stringVal = new std::string(yytext, yyleng); return token::IDENTIFIER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer DEF_PERC_I "<<  endl;
yylval->stringVal = new std::string(yytext, yyleng); return token::IDENTIFIER; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_BGCTRL" <<endl; 
	yylval->stringVal = new std::string("bgctrl");return token::DEF_BGCTRL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_BG" <<endl; 
	yylval->stringVal = new std::string(yytext, yyleng); return token::DEF_BG; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_SELECTBGCTRL" <<endl; 
	yylval->stringVal = new std::string("selectbgctrl");return token::DEF_SELECTBGCTRL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_SELECTBG" <<endl; 
	yylval->stringVal = new std::string("selectbg");return token::DEF_SELECTBG; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_HORIZONTAL" <<endl; 
	yylval->stringVal = new std::string("h");return token::DEF_HORIZONTAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_VERTICAL" <<endl; 
	yylval->stringVal = new std::string("v");return token::DEF_VERTICAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_VERTICAL_HORIZONTAL" <<endl; 
	yylval->stringVal = new std::string("hv");return token::DEF_VERTICAL_HORIZONTAL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 99 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_ALPHA_BLEND" <<endl; 
	return token::DEF_ALPHA_BLEND; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_ALPHA_BLEND_SHORTHAND" <<endl; 
	yylval->stringVal = new std::string(yytext, yyleng);
	return token::DEF_ALPHA_BLEND_SHORTHAND; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_LOOPSTART" <<endl; 
	yylval->stringVal = new std::string("loopstart");return token::DEF_LOOPSTART; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 108 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_BLANK" <<endl; 
	yylval->stringVal = new std::string("blank");return token::DEF_BLANK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 112 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_COLOR_ADDITION" <<endl; 
	yylval->stringVal = new std::string("a");return token::DEF_COLOR_ADDITION; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_COLOR_SUBTRACT" <<endl; 
	yylval->stringVal = new std::string("s");return token::DEF_COLOR_SUBTRACT; }
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 117 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "DEF_TEXT" <<endl; 
	yylval->stringVal = new std::string(yytext, yyleng);return token::DEF_TEXT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "..\\defcompiler\\defscanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer DATE= "<<  yylval->stringVal->c_str() <<endl;
    return token::DATE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 125 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 132 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 135 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 139 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 143 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 147 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 151 "..\\defcompiler\\defscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  "DEF_FILENAME_1" <<endl;
             yylval->stringVal = new std::string(yytext, yyleng);
             return token::DEF_FILENAME; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 155 "..\\defcompiler\\defscanner.l"
{ yylval->stringVal = new std::string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer DEF_FILENAME_3= "<<  yylval->stringVal->c_str() <<endl;
return token::DEF_FILENAME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "..\\defcompiler\\defscanner.l"
{

yylval->doubleVal = toFloat();
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer NUMBER= "<< *yytext <<" lenght: "<< yyleng <<" doubleval"<< setiosflags(ios::fixed) <<setprecision(4) << yylval->doubleVal <<endl;
return token::NUMBER;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 165 "..\\defcompiler\\defscanner.l"
{ yylval->stringVal = new std::string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer IDENTIFIER= "<<  yylval->stringVal->c_str() <<endl;
return token::IDENTIFIER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "..\\defcompiler\\defscanner.l"
{ ; }
	YY_BREAK
/* gobble up white-spaces */
case 32:
YY_RULE_SETUP
#line 175 "..\\defcompiler\\defscanner.l"
{ yylloc->lines(yyleng); yylloc->step();
				SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer EOL= "<< "EOL" <<endl;
				return token::EOL;
				}
	YY_BREAK
/* sending all other characters */
case 33:
YY_RULE_SETUP
#line 182 "..\\defcompiler\\defscanner.l"
{
    //yylloc->step();
   //Debug::debug(10,__FUNCTION__) <<"Lexer Unknow caracter= "<< *yytext <<endl;
   yylval->stringVal = new std::string(yytext, yyleng);
   return token_type (yytext[0]);
    
} 
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 34:
YY_RULE_SETUP
#line 191 "..\\defcompiler\\defscanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2053 "lex.Def.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 629 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 629 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 628);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 191 "..\\defcompiler\\defscanner.l"


namespace DefCompiler {

CScanner::CScanner(std::istream* in, std::ostream* out)
    : DefFlexLexer(in, out)
{
}

CScanner::~CScanner()
{
}

void CScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

float CScanner::toFloat() {
char *tempNumber=new char[yyleng+1];
for (int i = 0; i < yyleng ; i++)
{
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<i<<"] = " << yytext[i] << endl;
tempNumber[i]=yytext[i];

}
tempNumber[yyleng]='\0';
float rez = 0, fact =1;
if (*tempNumber == '-') {
tempNumber++;
fact = -1;
}
int point_seen =0;
for (int j =0; j < yyleng; j++) {
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<j<<"] = " << tempNumber[j] << endl;
	if (tempNumber[j] == '.'){
	point_seen =1;
	}else{
	int d = tempNumber[j] - '0';
	if (d >=0 && d <=9) {
		if (point_seen) fact /= 10.0f;
		rez = rez * 10.0f + (float)d;
		//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer rez = " << rez << endl;

		}
	}
}
//delete tempNumber;
return rez * fact;
}

void CScanner::DestroyComment()
{
char c;

   c= DefFlexLexer::yyinput();
   while (c != '\n' && c != 0)
   {	
	c=DefFlexLexer::yyinput();

   }
    
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
/*
int DefFlexLexer::yylex()
{
    std::cerr << "in DefFlexLexer::yylex() !" << std::endl;
    return 0;
}  
*/
/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */
/*
int DefFlexLexer::Defwrap()
{
    return 1;
}
*/


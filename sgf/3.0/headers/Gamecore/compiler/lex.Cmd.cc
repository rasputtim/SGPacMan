#define yyFlexLexer CmdFlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CScanner::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 592
#define YY_END_OF_BUFFER 593
static yyconst short int yy_accept[4521] =
    {   0,
      590,  590,  593,  591,  580,  582,  582,  590,   42,  591,
       35,   41,   43,   25,   26,   38,   36,   30,   37,   29,
       33,   20,   27,  591,   40,   28,   39,  555,    4,  555,
        1,  555,    2,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,    7,  555,  555,
      555,  555,  555,   31,   32,   45,    9,   10,   11,  555,
      555,  555,  555,  555,   15,  555,   12,   13,   14,   44,
       34,  580,  590,  582,  583,    0,   24,  586,  588,    0,
       19,    0,   20,    0,  581,  585,  584,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,    5,  555,    3,  555,  555,  555,  555,  555,
       16,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  200,  555,  555,  555,  555,  555,
      214,  555,   66,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      266,  555,  555,  555,  555,  555,  555,  555,   17,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,    8,    6,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  589,  555,  587,   22,   21,   18,   50,  555,  555,
       99,  555,  555,  126,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,   54,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,   60,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,    0,  555,  555,  555,
      555,  555,  555,  555,  227,  555,  555,  555,  234,  555,
      555,  555,  555,  555,  555,   67,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  244,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  277,  555,
      555,  555,  555,   85,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,   87,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,   90,  345,  555,
      555,  555,  555,  322,  555,  555,  555,  555,  555,  555,
      555,  555,  555,    0,   22,  555,   46,  555,  555,    0,
      555,  555,  555,  555,  555,  555,  100,  555,  101,  555,
       47,  555,   48,  555,  130,  555,  555,  555,  555,  555,

      555,   55,  555,  555,  555,  555,  555,  555,  555,  138,
      555,  555,  555,  555,  555,  555,  555,  150,  555,  555,
      555,  555,  555,  555,  156,  555,  555,  555,  555,  164,
      555,  555,   62,  555,  555,  555,  555,  555,  555,  555,
      188,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  211,  212,    0,  555,  555,  218,  221,  555,
      555,  555,    0,  555,  555,  555,  555,  235,  555,  555,
      502,  555,  555,  555,  555,  555,  555,  555,  249,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,    0,  555,  555,  555,  555,  555,  555,  555,  246,
      555,  555,  555,  555,  555,  555,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  289,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      298,  555,  555,  535,  309,  555,  555,  555,  555,  555,
      555,  555,    0,  555,  555,  555,  555,  555,  320,  555,
      555,  555,  555,  449,  555,  451,  555,  453,  555,  454,
      450,  544,    0,   23,   98,  555,  555,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  127,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  137,  555,   59,  555,  555,
      555,  555,    0,  555,  546,  555,  555,  555,    0,  555,
        0,  555,  555,  555,  555,  555,  555,  555,  555,    0,
      555,  555,  555,  555,  555,   61,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  185,    0,  555,  555,
      555,  555,  489,  555,  555,  555,  555,  444,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,    0,  555,    0,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  504,  265,  555,  555,  508,  555,  555,  555,
      555,  337,  338,  555,  555,  555,  555,  269,  555,  555,
        0,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      553,  555,  555,    0,    0,  555,  555,  555,  555,  555,
      555,  555,  555,  555,    0,  555,  555,  555,  555,  555,
      555,  297,   96,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  534,  555,  314,  555,  555,  316,  555,  555,
      555,  343,  344,  555,  555,  555,  555,  555,    0,  555,
      555,  543,  323,  555,  555,  555,  555,  555,  555,  555,
      555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  102,  555,  555,  555,
      555,  555,  555,  136,  555,  555,  555,  555,  555,  555,
      555,  555,  141,  555,  555,  428,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,    0,
      555,  555,  550,  555,  555,  555,  481,  159,  151,    0,
        0,    0,    0,    0,    0,    0,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,   64,  555,  555,
      555,  555,  555,  163,  555,  555,  555,  555,  555,  555,
      168,    0,  555,  555,  555,  555,    0,  555,  186,  487,
      488,  555,  490,  555,  555,  555,  555,  555,  555,  555,
      555,  199,  555,  555,  555,  555,  555,  555,  555,  206,
        0,    0,    0,    0,  555,  555,  555,  555,    0,  555,

      555,  555,  555,  555,  219,  555,  555,  555,  555,  555,
        0,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  503,
      555,  555,  250,  555,  555,  555,  252,  555,  555,  253,
      555,  254,  555,  555,  256,  257,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  511,  555,  513,  555,  555,
      555,  555,  555,  555,    0,    0,  555,  555,  555,  555,
      555,  555,  555,  273,  555,  555,  555,  555,  555,  555,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,
      288,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      523,  555,  555,  555,  555,    0,  555,  555,  555,  555,
      555,  555,  555,   86,  555,  555,  555,  555,  555,  555,
      555,  555,  315,  536,  555,  539,  540,  541,  555,  542,
      317,    0,    0,  555,  555,  555,  555,  555,  326,  555,
      327,  328,  555,  555,  555,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  124,  425,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
        0,  555,  555,  555,  555,  555,  555,  467,  555,  555,

      555,  555,    0,  555,  555,  427,  555,  555,  555,   93,
      555,  555,  555,    0,  555,  475,  555,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  143,  555,  555,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,    0,  555,  555,  555,  555,  555,
      555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  486,    0,  555,  555,    0,    0,    0,    0,    0,

        0,    0,  555,  555,  555,  555,  555,  555,  555,  442,
      555,  555,    0,  555,  548,  555,  555,  555,  193,  194,
      189,  195,  555,  555,  555,  445,    0,  555,  555,  555,
      555,  555,  446,  555,  555,    0,    0,    0,    0,  555,
      555,  555,  555,  213,  213,  216,  496,  217,  497,  555,
      555,  222,  555,  224,  226,  226,  225,  555,  555,  555,
      230,  555,  555,  555,  555,  555,  555,  555,  555,  238,
      555,  240,  555,  555,  555,  555,  555,  555,  555,    0,
      555,  555,  555,  555,  555,    0,    0,    0,  555,  555,
      555,  554,  555,  555,  555,  555,  555,   95,  555,  555,

      510,  555,  243,  555,  555,  555,  555,  555,    0,    0,
      555,  555,  555,  555,  555,  555,   74,  555,  555,  555,
      555,  555,  279,  555,  555,    0,  275,  555,  275,  278,
      555,  555,  555,  555,  555,  555,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  292,  290,  293,
      555,    0,  555,  555,  291,  555,  555,  524,  555,   84,
      549,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,   88,  555,  555,  545,  555,  555,  555,    0,    0,
      555,  555,  555,  555,  324,  452,  455,  555,  555,    0,

      104,    0,  569,    0,    0,    0,    0,  558,    0,  555,
      104,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,    0,  555,  458,  459,  555,  461,  462,   49,  555,
      128,  424,  555,  555,    0,  555,  555,  555,  555,  555,
      555,  134,  555,  555,  555,    0,  555,  555,  555,  555,
      555,    0,  555,  555,  555,  555,    0,  555,  426,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,    0,    0,
        0,    0,    0,  555,  555,  555,  555,  555,    0,  555,

      148,  555,  479,  480,  555,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  165,  555,  178,  555,    0,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      187,  187,  192,  555,  555,  555,  555,  555,  555,  555,
      555,  198,  329,  330,  555,  555,  555,  555,  555,   65,
      555,    0,    0,  210,  208,  555,  555,  210,  208,    0,

      555,  220,  498,  555,  555,  555,  555,  555,  555,  555,
      555,  233,  555,  501,  237,  555,  555,  555,  555,  555,
      260,  555,  555,  555,  555,  555,  331,  332,  262,  555,
      555,  555,  555,  555,    0,    0,    0,  555,  555,  555,
      555,  555,  555,  551,  555,  555,  555,  555,  555,  514,
      268,  515,  555,  245,    0,    0,  555,  555,  555,  555,
      555,  555,   73,  555,  555,  555,  555,  555,  282,  555,
      555,  276,  276,    0,  555,  286,  555,  555,  555,  555,
      555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,    0,  555,   97,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,   89,  310,
      555,  312,  299,  300,  301,  302,  303,  304,  305,  306,
      307,  555,  555,  555,  555,  555,    0,  318,  555,  318,
      321,  555,  555,  555,    0,    0,  105,    0,    0,    0,
        0,  555,  555,  105,  555,  555,  555,  555,    0,  555,
      125,    0,    0,    0,    0,  555,  555,  555,  555,  460,
      555,  555,   53,  555,  555,    0,  555,  555,  555,  555,
      555,  555,  555,  555,  555,    0,  555,  555,  555,  555,
      555,    0,    0,  555,  555,   56,   57,   58,    0,  555,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  346,
        0,    0,    0,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  346,  555,  555,  555,  555,  555,  555,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,    0,
      555,  555,    0,  555,  555,    0,    0,    0,    0,  436,
        0,  435,  431,  432,  555,  555,  555,  555,  436,  555,
      435,  431,  432,  429,  555,  555,  555,  555,  555,  555,
      555,   63,  179,    0,    0,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,  555,  555,  555,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  170,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  495,  555,
      555,  204,  555,  555,  209,    0,  209,  555,    0,  555,
      223,  555,  555,  555,  555,  555,    0,  555,  555,  236,
       70,   71,  555,   68,   69,  555,  555,  263,  555,  555,
      555,  555,  555,  255,  555,  575,  574,    0,  555,  555,
      555,  555,  555,  555,  241,  555,  552,  555,  555,  512,
      555,    0,    0,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,    0,  555,  555,    0,    0,    0,
      555,  555,  555,  555,  555,  555,  520,  555,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      448,  555,    0,  555,  294,   94,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  537,  555,    0,
      555,  319,  319,  555,  103,  456,    0,    0,    0,    0,
      568,    0,  555,  555,  555,  555,  555,  555,    0,    0,
      555,  555,    0,    0,    0,    0,    0,  555,  555,  555,
      555,  555,   52,  555,  555,  555,    0,  555,  465,  555,
      131,  555,  555,  555,  469,  555,    0,  555,  142,  471,
      555,  555,    0,    0,  555,  555,    0,  555,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  347,    0,    0,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  347,
      555,  555,  555,  555,  555,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,    0,  555,  547,    0,    0,
        0,    0,  555,  555,  555,  555,  555,    0,    0,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  157,  555,  555,  555,    0,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,
      555,  555,  555,  441,    0,    0,  181,    0,  184,    0,
        0,    0,    0,  555,  555,  181,  555,  184,  555,  555,

      555,  555,  172,  555,  423,  555,  555,  492,  493,  555,
      555,  555,  555,  555,  555,  555,  205,    0,  555,    0,
      555,  555,  555,  555,  555,  555,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  239,
      555,  555,  251,  271,  555,  272,  555,  555,  573,  555,
      555,  555,  555,  555,  242,  555,  509,  555,    0,    0,
      555,  555,  555,  555,  516,  555,  555,  555,  555,  274,
      555,  339,  340,  555,  281,    0,    0,    0,  555,  555,
      555,  555,    0,  555,  555,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
        0,  555,  555,  525,  526,  527,  555,  555,  555,  555,
      555,  555,  555,  308,  555,  555,    0,    0,    0,    0,
      555,  555,  555,  555,  555,  555,    0,    0,    0,  559,
        0,  555,  555,  555,  555,  555,    0,    0,    0,  555,
      555,  555,    0,  123,    0,  121,  119,  555,  123,  555,
      121,  119,  555,  555,  555,  129,  129,  555,  555,  555,
      555,  555,  135,  135,  472,  473,  555,    0,    0,  555,
      555,    0,  555,    0,  348,    0,    0,    0,    0,    0,
        0,    0,    0,  359,  555,  348,  555,  555,  555,  555,

      555,  555,  555,  555,  359,  555,  477,  555,  572,    0,
        0,    0,    0,  555,  555,  555,  555,  555,  149,  149,
        0,    0,    0,    0,  555,  555,  555,  555,  555,    0,
      430,    0,    0,    0,    0,    0,  555,  430,  555,  555,
      555,  555,  555,  555,  555,  555,  158,  555,  555,  555,
      166,    0,    0,    0,    0,  173,    0,  166,  555,  555,
      555,  555,  173,  555,    0,    0,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  494,  555,  555,  555,  555,  201,  555,    0,  555,
        0,  555,  555,  232,  229,  555,  555,    0,    0,    0,

        0,    0,    0,  555,  555,  555,  555,  555,  555,  555,
      555,  555,    0,  555,  555,  270,    0,  555,  555,  505,
      555,  267,    0,    0,  555,  555,  555,   79,   76,   77,
      447,  555,  518,  555,    0,  285,  283,  555,  285,  283,
      519,  341,  342,  555,  555,    0,    0,    0,    0,    0,
        0,  366,    0,    0,    0,    0,  360,  361,  555,  555,
      555,  555,  555,  555,  366,  555,  555,  555,  555,  360,
      361,  521,    0,  555,  555,  555,  555,  555,  531,  555,
      555,  555,  555,  538,    0,    0,    0,    0,  555,  555,
      555,  555,  555,  555,  556,    0,    0,    0,    0,  560,

      555,  555,  555,  555,  555,  555,    0,    0,    0,  555,
      555,  555,  122,    0,  122,  555,   51,  555,  555,  466,
      133,  555,  468,  470,  555,    0,   92,  555,   92,    0,
      555,    0,  349,    0,    0,    0,    0,  356,    0,  354,
      555,  349,  555,  555,  555,  555,  356,  555,  354,  555,
      555,    0,    0,    0,  571,    0,  555,  555,  555,  555,
      555,    0,    0,    0,    0,  555,  555,  555,  555,  555,
        0,    0,    0,  433,    0,    0,  555,  555,  555,  433,
      555,  555,  484,  555,  555,  555,  555,  485,    0,  167,
        0,    0,    0,  555,  167,  555,  555,  555,    0,    0,

        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  196,  197,  443,  555,  555,
        0,  555,  215,  215,  499,  555,  500,    0,    0,    0,
        0,    0,    0,  555,  555,  555,  555,  555,  555,  231,
      555,  555,  334,  333,  264,  555,  336,  335,  506,  507,
      555,    0,  248,  555,  248,  555,   78,  555,   75,  555,
      517,  555,  284,  284,  555,  287,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,    0,  555,  522,  528,
      555,  555,  532,  533,  555,  313,    0,    0,    0,    0,

      555,  555,  555,  555,  325,  555,    0,    0,    0,    0,
      555,  555,  555,  555,    0,    0,    0,  555,  555,  555,
        0,  555,  555,  464,  555,  555,    0,  555,    0,  555,
        0,    0,    0,    0,    0,    0,  555,  555,  555,  555,
      555,  555,  476,  555,    0,    0,    0,    0,    0,  570,
      555,  555,  555,  555,  555,  555,  578,  577,    0,  576,
      555,  555,  555,  555,  555,  557,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,  555,  555,  483,  555,
      162,    0,    0,    0,    0,  555,  555,  555,  555,    0,
        0,  177,    0,    0,  169,    0,  555,  555,  177,  555,

      555,  169,  555,  555,  191,  491,  555,  555,    0,  555,
      555,    0,    0,    0,    0,    0,    0,    0,  555,  555,
      555,  555,  555,  555,  555,  261,  258,  259,   82,    0,
      555,  555,  555,  555,  280,   83,  364,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  364,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,    0,  555,
      529,  555,  555,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  457,    0,    0,    0,    0,
      555,  555,  555,  555,    0,    0,    0,  555,  555,  555,
      120,  120,  555,  555,  474,    0,  555,    0,  555,  353,

        0,    0,    0,    0,    0,  353,  555,  555,  555,  555,
      555,  555,    0,    0,    0,    0,    0,  555,  555,  555,
      555,  555,  579,  555,  482,    0,    0,    0,    0,  154,
      155,  555,  555,  555,  555,  154,  155,  555,  555,    0,
      176,    0,    0,  555,  176,  555,  555,    0,    0,    0,
        0,  183,  555,  555,  555,  555,  183,  555,  203,  555,
        0,  555,  228,    0,    0,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,  555,  555,    0,  555,   81,
      555,  555,  365,    0,    0,    0,    0,    0,  372,  373,
        0,    0,    0,  365,  555,  555,  555,  555,  555,  372,

      373,  555,  555,  555,  295,  295,  530,  311,    0,    0,
        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
      555,  555,    0,    0,    0,    0,  555,  555,  555,  555,
        0,    0,    0,  555,  555,  555,  555,  555,    0,  555,
      140,  140,    0,    0,    0,    0,    0,  555,  555,  555,
      555,  555,  555,    0,    0,    0,    0,    0,  555,  555,
      555,  555,  555,    0,  152,    0,    0,    0,    0,    0,
      555,  152,  555,  555,  555,  555,  555,  555,  555,    0,
        0,  182,  555,  555,  182,    0,  180,  171,  175,  555,
      180,  171,  175,  190,  202,    0,  555,    0,    0,    0,

        0,    0,    0,    0,  406,  555,  555,  555,  555,  555,
      555,  555,  406,    0,  555,   80,  555,    0,    0,    0,
        0,  370,  371,    0,    0,    0,  555,  555,  555,  555,
      370,  371,  555,  555,  555,    0,  555,    0,    0,    0,
        0,    0,  383,    0,    0,    0,    0,    0,  555,  555,
      555,  555,  555,  383,  555,  555,  555,  555,  555,    0,
        0,    0,    0,  555,  555,  555,  555,    0,    0,    0,
      555,  555,  555,  555,  555,    0,  555,    0,  555,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,  555,
        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,

      153,    0,    0,    0,    0,  434,  153,  555,  555,  555,
      555,  434,  555,  555,    0,  174,  555,  174,    0,  555,
        0,  555,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,  247,  247,   72,  367,
        0,  362,    0,    0,    0,    0,  367,  555,  362,  555,
      555,  555,  555,    0,  555,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,    0,    0,    0,    0,  555,
      555,  555,  555,    0,    0,  561,  555,  555,  555,  463,
      132,    0,  555,    0,  555,    0,    0,    0,    0,  352,

      555,  555,  555,  555,  352,  555,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,    0,    0,    0,    0,
      555,  555,  555,  555,  160,  161,    0,  555,    0,  555,
        0,  555,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,    0,  363,    0,  369,
      374,  555,  363,  555,  369,  374,    0,  555,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,    0,    0,
        0,    0,    0,  555,  555,  555,  555,  555,    0,  567,
      555,  555,    0,  555,    0,  555,    0,    0,  355,    0,

      555,  555,  355,  555,  478,    0,  144,  145,    0,    0,
      555,  144,  145,  555,  555,  439,  438,    0,  437,  439,
      438,  555,  437,    0,  555,    0,  555,    0,  555,    0,
        0,    0,    0,    0,    0,    0,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  375,  376,    0,  375,  376,
      555,    0,  555,    0,    0,    0,    0,  390,    0,    0,
        0,    0,  379,  380,    0,    0,  384,    0,    0,  555,
      555,  555,  555,  390,  555,  555,  555,  555,  379,  380,
      555,  555,  384,  555,  555,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,    0,  555,   91,   91,    0,

      555,    0,    0,    0,    0,  555,  555,  555,  555,    0,
        0,    0,  555,  555,  555,  440,  440,    0,  555,    0,
      555,    0,  555,    0,    0,    0,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,  555,  555,  555,    0,
      555,    0,  555,    0,    0,    0,    0,    0,  387,  385,
      381,  382,    0,    0,    0,  377,  555,  555,  555,  555,
      555,  387,  385,  381,  382,  555,  555,  555,  377,    0,
        0,    0,    0,    0,  555,  555,  555,  555,  555,    0,
      555,    0,  555,    0,  350,    0,  357,  555,  350,  555,
      357,    0,    0,    0,  555,  555,  555,    0,  555,    0,

      555,    0,  555,    0,    0,  404,    0,    0,    0,    0,
        0,  555,  555,  404,  555,  555,  555,  555,  555,    0,
      555,    0,  555,    0,    0,    0,    0,  386,    0,    0,
      378,  555,  555,  555,  555,  386,  555,  555,  378,  563,
        0,    0,    0,    0,  555,  555,  555,  555,  555,    0,
      555,    0,  555,  351,    0,  351,  555,    0,    0,    0,
      555,  555,  555,    0,  555,    0,  555,    0,  555,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  368,  368,    0,
      555,    0,    0,    0,    0,    0,    0,    0,  555,  555,

      555,  555,  555,  555,  555,    0,  113,    0,    0,  555,
      113,  555,  555,    0,  555,    0,  555,  358,  358,    0,
      564,    0,  555,  555,  555,    0,  555,    0,  555,    0,
      555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,    0,  555,    0,    0,    0,  393,  391,
        0,  389,  555,  555,  555,  393,  391,  555,  389,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,    0,
      555,    0,  555,  146,  147,  146,  147,    0,  555,  565,

      555,    0,  555,    0,    0,    0,  405,    0,    0,    0,
        0,    0,    0,  407,  555,  555,  555,  405,  555,  555,
      555,  555,  555,  555,  407,    0,  555,    0,    0,  392,
      388,  555,  555,  392,  388,    0,    0,    0,    0,    0,
        0,  111,    0,  106,    0,  555,  555,  555,  555,  555,
      555,  111,  555,  106,  555,    0,  555,    0,  555,  562,
      555,    0,  555,    0,    0,    0,  408,    0,    0,    0,
        0,    0,    0,  555,  555,  555,  408,  555,  555,  555,
      555,  555,  555,  296,  296,    0,    0,  555,  555,  108,
        0,    0,  110,  107,    0,    0,    0,    0,  108,  555,

      555,  110,  107,  555,  555,  555,  555,    0,  555,  139,
      139,  207,  207,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,    0,    0,  555,  555,  109,  112,    0,
        0,    0,    0,  109,  112,  555,  555,  555,  555,  566,
      555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,    0,    0,  555,  555,    0,    0,    0,  118,  555,
      555,  555,  118,    0,    0,    0,    0,    0,    0,    0,
      420,    0,    0,    0,  555,  555,  555,  555,  555,  555,

      555,  420,  555,  555,  555,    0,    0,  555,  555,    0,
      117,    0,  555,  117,  555,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,    0,    0,  555,  555,    0,
        0,  555,  555,    0,    0,    0,    0,    0,    0,  418,
      419,    0,    0,    0,  555,  555,  555,  555,  555,  555,
      418,  419,  555,  555,  555,    0,    0,  555,  555,    0,
        0,  555,  555,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  555,  555,  555,  555,  555,  555,  555,  555,
      555,    0,    0,  555,  555,  116,    0,  116,  555,    0,

      412,    0,    0,    0,    0,    0,    0,    0,  555,  412,
      555,  555,  555,  555,  555,  555,  555,    0,    0,  555,
      555,    0,    0,  555,  555,    0,    0,    0,    0,    0,
      421,  422,    0,    0,  555,  555,  555,  555,  555,  421,
      422,  555,  555,    0,    0,    0,    0,    0,    0,    0,
      555,  555,  555,  555,  555,  555,  555,    0,    0,  555,
      555,    0,    0,    0,    0,    0,    0,  409,  555,  555,
      555,  555,  555,  555,  409,    0,    0,    0,    0,    0,
      402,    0,  555,  555,  555,  555,  555,  402,  555,    0,
        0,  555,  555,    0,    0,    0,    0,  410,  411,  555,

      555,  555,  555,  410,  411,    0,    0,    0,  401,    0,
        0,  555,  555,  555,  401,  555,  555,    0,    0,  555,
      555,    0,    0,    0,    0,  555,  555,  555,  555,    0,
      400,  403,    0,  394,  395,  555,  400,  403,  555,  394,
      395,    0,  115,  555,  115,    0,    0,    0,  417,  555,
      555,  555,  417,  398,  399,  396,  397,  398,  399,  396,
      397,    0,  555,    0,  416,    0,  555,  416,  555,    0,
      555,    0,    0,  555,  555,    0,  555,    0,    0,  555,
      555,    0,  555,  415,    0,  415,  555,  114,  114,    0,
        0,  555,  555,    0,    0,  555,  555,    0,    0,  555,

      555,    0,    0,  555,  555,    0,  414,  555,  414,    0,
      555,    0,  555,    0,  555,    0,  555,  413,  413,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,    1,    1,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,    1,   61,   62,   63,    1,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,    1,   90,    1,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1

    } ;

static yyconst short int yy_base[4701] =
    {   0,
        0,    0,  598,13892,   90,   90,   93,   96,  565,  589,
    13892,13892,  527,13892,13892,  521,13892,13892,  511,   83,
    13892,   95,13892,   96,  495,13892,  494,   89,  105,  156,
      144,   80,  221,  142,  102,  151,   76,  139,  209,  216,
      151,  213,  287,    0,  263,  350,  347,  228,  255,  220,
      282,  302,   84,13892,13892,  462,  404,  360,    0,  426,
       94,  415,  453,  161,    0,  155,  411,  457,  190,  433,
    13892,  144,  146,  149,13892,  515,    0,13892,13892,  524,
      534,  544,  556,  270,13892,13892,13892,    0,  201,  278,
      228,  310,  261,  271,  266,  466,  269,  354,  540,  269,

      317,  333,  343,  368,  370,  400,  411,  410,  540,  451,
      451,  457,    0,  555,    0,  459,  532,  555,  553,  546,
      607,  600,  571,  562,  560,  604,  579,  568,  593,  592,
      614,  615,  616,  598,    0,  606,  614,  622,  619,  610,
      697,  678,    0,  604,  678,  623,  677,  619,  672,  683,
      675,  684,  684,  728,  776,  678,  686,  728,  683,  681,
        0,  707,  704,  736,  695,  771,  741,  729,  840,  789,
      749,  765,  795,  759,  837,  835,  839,  753,  766,  828,
      786,  842,  843,  825,  831,    0,    0,  852,  846,  836,
      837,  838,  853,  853,  859,  860,  866,  875,  893,  893,

      894,13892,  894,13892,  513,  928,  958,    0,  897,  884,
        0,  899,  900,  986,  884,  891,  896,  898,  899,  965,
      958,  968,  960,  974,  969,  967,  978,  976,  975,  969,
      976,  980,  989,  976,  982,  978,    0,  977,  987, 1000,
     1011,  995, 1025, 1012, 1017, 1020, 1012, 1024, 1035, 1027,
     1036, 1028, 1035, 1051, 1045, 1032, 1036, 1039, 1048, 1077,
     1051, 1036, 1038, 1043, 1068, 1066, 1058, 1123, 1061, 1069,
     1095, 1077, 1102, 1091, 1085, 1093, 1105, 1109, 1112, 1113,
     1114, 1116, 1130, 1130, 1208, 1132, 1156, 1162,    0, 1165,
     1163, 1184, 1182, 1194, 1177,    0, 1197, 1198, 1205, 1210,

     1196, 1198, 1206, 1216, 1213, 1210, 1205, 1220, 1207, 1224,
     1229, 1248, 1247, 1212, 1215, 1219, 1231, 1287, 1264, 1248,
     1256, 1262, 1269, 1259, 1260, 1273, 1259, 1266, 1370, 1276,
     1278, 1279, 1283, 1288, 1285, 1287, 1278, 1279, 1353, 1280,
     1313, 1282, 1324, 1352,    0, 1323, 1318, 1321, 1329, 1321,
     1347, 1358, 1368, 1370, 1359, 1363, 1357, 1393, 1417, 1358,
     1372, 1380, 1367, 1403, 1384, 1390, 1380, 1392, 1390, 1415,
     1407, 1423, 1418,  512,  510, 1421,    0, 1431, 1417, 1466,
     1518, 1419, 1424, 1422, 1445, 1450,    0, 1447, 1473, 1440,
        0, 1437,    0, 1454,    0, 1456, 1474, 1471, 1472, 1495,

     1500,    0, 1493, 1504, 1494, 1496, 1514, 1497, 1524, 1512,
     1522, 1603, 1526, 1520, 1518, 1527, 1694, 1785, 1518, 1545,
     1557, 1552, 1571, 1575, 1876, 1572, 1572, 1575, 1589,    0,
     1576, 1577,    0, 1591, 1596, 1591, 1591, 1599, 1595, 1606,
     1967, 1604, 1608, 1610, 1590, 1601, 1613, 1677, 1616, 1666,
     1624, 1687, 1618, 1624, 1633, 1651, 1635, 1649, 1635, 1673,
     1674, 1684, 2058,    0, 1694, 1695, 1684, 1774, 1689, 1697,
     1695, 1695, 1689, 1690, 1698, 1705, 1783,    0, 1711, 1704,
        0, 1755, 1711, 1771, 1713, 1742, 1745, 1754,    0, 1763,
     1762, 1787, 1790, 1776, 1794, 1778, 1794, 1785, 1795, 1793,

     1831, 1821, 1822, 1812, 1824, 1826, 1846, 1858, 1858, 1859,
     1866, 1853, 1876, 1864, 1878, 1859, 1868, 1868, 1870, 2149,
     1874, 1869, 1870, 1876, 1924, 1891, 1894, 1921, 1949, 1885,
     1897, 1953, 1916, 1952, 2240, 1954,    0, 1959, 1953, 1957,
     1951, 1967, 1968, 1955, 1957, 1954, 1976, 1973, 1969, 1960,
     1967, 1964, 1980,    0,    0, 1973, 1985, 1999, 2010, 2012,
     2018, 2015, 2023, 2018, 2021, 2048, 2048, 2046, 2331, 2054,
     2053, 2047, 2054,    0, 2052, 2064, 2061,    0, 2055, 2067,
        0,    0,  509,13892,    0, 2049, 2061, 2057, 2072, 2059,
     2132, 2070, 2067, 2058, 2055, 2077, 2070, 2106, 2093, 2135,

     2106, 2104, 2114, 2114, 2135, 2141, 2148, 2128,    0, 2139,
     2228, 2147, 2217, 2154, 2140, 2151, 2146, 2163, 2167, 2215,
     2157, 2201, 2218, 2223, 2228,    0, 2219,  492, 2227, 2238,
     2235, 2240, 2389, 2441,    0, 2243, 2233, 2248, 2315, 2330,
     2235, 2236, 2251, 2271, 2252, 2288, 2286,  493, 2285, 2493,
     2548, 2280, 2310, 2321, 2318,    0, 2336, 2330, 2334, 2339,
     2332, 2323, 2321, 2330, 2326, 2345, 2636, 2341, 2345, 2357,
     2365, 2380,    0, 2365, 2386, 2382, 2396,    0, 2396, 2397,
     2382, 2403, 2385, 2396, 2398, 2414, 2403, 2415, 2425, 2430,
     2430, 2449, 2450, 2456, 2493, 2448, 2453, 2448, 2475, 2501,

     2498, 2490, 2497, 2487, 2500, 2491, 2497, 2501, 2501, 2496,
     2515, 2510, 2530, 2549, 2550, 2531, 2548, 2538, 2557, 2547,
     2552, 2545, 2549, 2555, 2553, 2556, 2581, 2583, 2617, 2607,
     2604, 2601, 2607, 2619, 2614, 2626, 2632, 2633, 2623, 2620,
     2638, 2639, 2727,    0, 2625, 2641, 2627, 2629, 2646, 2632,
     2637,13892,13892, 2655, 2657, 2663, 2668, 2715, 2667, 2679,
     2718, 2728, 2729, 2734, 2749, 2738, 2677, 2686, 2706, 2696,
    13892, 2722, 2729, 2735, 2728, 2756, 2748, 2762, 2760, 2765,
     2768, 2766, 2765, 2785, 2819, 2874, 2771, 2778, 2780, 2793,
     2786, 2962, 2826, 2784, 2783, 2802, 2786, 2791, 2800, 2822,

     2820, 2824,    0, 2837,    0, 2840, 2831,  444, 2851, 2844,
     2839,13892,13892, 2860, 2855, 2862, 2857, 2875, 2889, 2890,
     2868,    0, 2870, 2889, 2913, 2915, 2912, 2922, 2942, 2930,
     2938, 2943, 2950, 2937, 2944, 2948, 2944, 2945, 2959, 2951,
     2956, 2960, 2967, 2953, 2960, 2958, 2954, 2955, 2970, 2962,
     2967, 2966, 2980, 2972, 2987, 3000, 3006, 2993, 2991, 3008,
     3010, 3007, 3008, 3007, 3004, 3006, 3088, 3014, 3037, 3043,
     3024, 3036, 3073, 3179, 3035, 3048, 3071, 3063, 3072,  438,
      396,  392, 3270, 3061, 3070,    0, 3087, 3089, 3096, 3074,
     3084, 3084, 3091, 3088, 3088, 3094, 3154, 3105, 3168, 3091,

     3100, 3120, 3127, 3126, 3127, 3152, 3163, 3145, 3147, 3166,
     3167, 3165, 3175, 3180, 3171, 3172, 3170, 3180, 3185, 3185,
     3186, 3181,13892, 3190, 3181, 3190, 3201,    0,    0, 3191,
     3227, 3213, 3220, 3225, 3225, 3232, 3234, 3247, 3270, 3249,
     3256, 3267, 3264, 3252, 3254, 3256, 3256,    0, 3274, 3275,
     3266, 3262, 3279,    0, 3274, 3274, 3266, 3284, 3267, 3267,
     3361, 3417, 3467, 3290, 3284, 3306, 3308, 3310,    0,  395,
        0, 3331, 3346, 3336, 3342, 3345, 3334, 3335, 3345, 3349,
     3359, 3393, 3358, 3363, 3367, 3350, 3366, 3366, 3352,    0,
     3372, 3366, 3353, 3378, 3384, 3379, 3382, 3402, 3393, 3395,

     3400, 3412, 3398, 3403,    0, 3411, 3407, 3412, 3407, 3410,
     3412, 3413, 3414, 3438, 3433, 3448, 3445, 3453, 3446, 3456,
     3460, 3474, 3467, 3469, 3466, 3465, 3465, 3477, 3481,    0,
     3476,  388,    0, 3473, 3487, 3489,  356, 3480,  320,    0,
     3476,    0, 3481, 3498,    0,    0, 3524, 3527, 3549, 3509,
     3521, 3512, 3515, 3526, 3532,    0, 3533,    0, 3538, 3541,
     3545, 3543, 3548, 3530, 3531, 3537, 3534, 3541, 3549, 3545,
     3541, 3584, 3567,    0, 3570, 3585, 3591, 3575, 3580, 3591,
     3594, 3594, 3597, 3598, 3587, 3589, 3605, 3597, 3607, 3594,
        0, 3603, 3592, 3595, 3609, 3607, 3601, 3621, 3612, 3626,

     3638, 3630, 3632, 3647, 3645, 3637, 3648, 3638, 3641, 3653,
        0, 3656, 3649, 3640, 3651, 3661, 3662, 3664, 3655, 3664,
     3667, 3671, 3656,    0, 3738, 3672, 3675, 3676, 3679, 3673,
     3685, 3693,    0,    0, 3711,    0,    0,    0, 3688,    0,
        0, 3715, 3694, 3721, 3700, 3707, 3721, 3723,    0, 3725,
        0,    0, 3727, 3727, 3732, 3721, 3725, 3725, 3729, 3729,
     3741, 3731, 3758, 3762, 3753, 3762, 3765, 3763, 3766, 3768,
     3775, 3765, 3779, 3783, 3774, 3787, 3780, 3855,    0, 3785,
     3807, 3813, 3805, 3800, 3829, 3824, 3840, 3841, 3833, 3833,
     3852, 3853, 3854, 3856, 3858, 3856, 3855,    0, 3859, 3864,

     3851, 3866, 3848, 3849, 3848,    0, 3857, 3854, 3871, 3946,
      320,  305,  301, 3875, 3896,    0, 3898, 3887, 3886, 3902,
     3897, 3915, 3933, 3917,    0, 3935, 3924, 3947, 3937, 3932,
     3931, 3946, 3941, 3939, 3954, 3936, 4037, 3952, 3936, 3960,
     3950, 3950, 3946, 3946, 3947, 3951, 3963, 3974, 3985, 3979,
     3983, 4012, 4003, 4013, 4020, 4022, 4024, 4031, 4020, 4034,
     4031, 4032, 4029, 4037, 4022, 4033, 4043, 4034, 4043, 4044,
     4041, 4039, 4048, 4035, 4048, 4058, 4050, 4062, 4076, 4069,
     4066, 4068, 4083, 4083, 4091, 4089, 4093, 4094, 4099, 4083,
     4097,    0, 4131, 4182, 4080, 4097, 4097, 4099, 4101, 4113,

     4129, 4119, 4128, 4116, 4118, 4137, 4148, 4140, 4154, 4152,
     4161, 4144, 4147, 4149,  289, 4150, 4157, 4182, 4189,    0,
        0, 4176, 4192, 4194, 4199,    0, 4181, 4204, 4201, 4208,
     4201, 4207,    0, 4201, 4216, 4219, 4224, 4222, 4207, 4227,
     4236, 4240, 4224,13892,    0, 4308,    0,    0,    0, 4243,
     4242,    0, 4259,    0,13892,    0,    0, 4241, 4246, 4250,
     4253, 4250, 4267, 4268, 4288, 4284, 4285, 4296, 4307,    0,
     4299, 4305, 4310, 4309, 4311, 4309, 4305, 4311, 4296, 4298,
     4317, 4306, 4301, 4319, 4318, 4325, 4309, 4322, 4329, 4313,
     4348,13892, 4358, 4368,  283, 4357, 4366,    0, 4369, 4353,

        0, 4349,    0, 4372, 4353, 4358, 4359, 4355, 4361, 4363,
     4363, 4365, 4382, 4366, 4379, 4371, 4434, 4397, 4406, 4406,
     4420, 4413,    0, 4410, 4434, 4425,13892, 4426,    0, 4517,
     4419, 4424, 4425, 4428, 4422, 4437, 4426, 4425, 4445, 4433,
     4448, 4446, 4436, 4451, 4450, 4474, 4483, 4483, 4503, 4490,
     4509, 4502, 4493, 4508, 4508, 4509, 4506,    0,    0,    0,
     4502, 4503, 4504, 4517,    0, 4511, 4509,    0, 4505,    0,
    13892, 4518, 4510, 4528, 4521, 4517, 4517, 4538, 4542, 4556,
     4545, 4559, 4591, 4562,    0, 4551, 4563, 4544, 4567, 4567,
     4569, 4572, 4574, 4570,    0,    0,    0, 4588, 4583, 4577,

    13892, 4598,13892, 4584, 4596, 4598, 4596,13892, 4606, 4590,
        0, 4606,    0, 4592, 4604, 4605, 4603,    0, 4613, 4679,
     4631, 4666, 4679,    0,    0, 4642,    0,    0, 4653, 4649,
        0,    0, 4667, 4666, 4673, 4674, 4665, 4674, 4675, 4685,
     4685,    0, 4673, 4677, 4676, 4687, 4696, 4704, 4716, 4726,
     4712, 4727, 4728, 4715, 4716, 4717, 4716, 4720,    0, 4730,
     4740, 4737, 4731, 4743, 4727, 4730, 4744, 4746, 4746, 4747,
     4735, 4733, 4746, 4764, 4761, 4755, 4768, 4767, 4771, 4783,
     4785, 4785, 4786, 4774, 4772, 4773, 4793, 4785, 4787, 4788,
     4800, 4784, 4790, 4792, 4793, 4805, 4789, 4795, 4792, 4793,

        0, 4795,    0, 4876, 4802, 4847, 4861, 4858, 4845, 4853,
     4851, 4862, 4856, 4857, 4857, 4870, 4872, 4859, 4867, 4865,
     4876, 4870, 4871, 4864, 4877, 4867, 4883, 4887, 4875, 4886,
     4901,    0, 4888,    0, 4902, 4921, 4908, 4906, 4916, 4914,
     4902, 4923, 4928, 4915, 4913, 4926, 4925, 4913, 4934, 4924,
     4923, 4924, 4924, 4924, 4933, 4925, 4938, 4947, 4937, 4933,
     4944, 4944, 4944, 4954, 4959, 4973, 4982, 4972, 4978, 4972,
    13892,    0, 4971, 4968, 4971, 4989, 4986, 4990, 4988, 4978,
     4984,    0,13892,13892, 4980, 4981, 4993, 4991, 4986,    0,
     5005, 4996, 4994,13892,13892, 4998, 4997,    0,    0, 5002,

     5003,    0,    0, 5006, 5010, 5039, 5038, 5038, 5039, 5107,
     5029,    0, 5057,    0,    0, 5059, 5046, 5060, 5062, 5047,
        0, 5067, 5054, 5056, 5081, 5086,13892,13892,    0, 5088,
     5093, 5095, 5096, 5087, 5109, 5102, 5102, 5112, 5105, 5105,
     5100, 5102, 5112,13892, 5117, 5109, 5149, 5106, 5121,    0,
        0,    0, 5122,    0, 5127, 5126, 5132, 5134, 5155, 5160,
     5150, 5162, 5182, 5169, 5170, 5164, 5168, 5178,  274, 5174,
     5165,13892,    0, 5187, 5192,    0, 5165, 5168, 5183, 5190,
     5191,    0, 5198, 5177, 5181, 5199, 5197,    0, 5195, 5203,
     5213, 5219, 5283, 5238, 5217, 5220, 5238, 5236, 5374, 5235,

     5242, 5246, 5247, 5262, 5265, 5275, 5276,    0, 5281, 5282,
     5269, 5275, 5275, 5288, 5286, 5270, 5293, 5283,    0,    0,
     5277,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5286, 5284, 5287, 5282, 5465, 5291,13892, 5292,    0,
        0, 5299, 5293, 5302, 5283, 5291,13892, 5314, 5345, 5355,
     5352, 5337, 5345,    0, 5345, 5353, 5362, 5359, 5372, 5377,
        0, 5375, 5354, 5373, 5379, 5378, 5358, 5377, 5446,    0,
     5368, 5376,    0, 5374, 5384, 5370, 5403, 5403, 5406, 5421,
     5418, 5426, 5444, 5434, 5452, 5447, 5453, 5450, 5456, 5450,
     5469, 5451, 5464, 5453, 5466,    0,    0,    0, 5467, 5468,

     5457, 5477, 5468,    0, 5463, 5481, 5481, 5484, 5473,13892,
     5473, 5484, 5496, 5490, 5511, 5505, 5582, 5516, 5534, 5535,
     5539, 5528,    0, 5527, 5535, 5534, 5557, 5559, 5571, 5580,
     5579, 5565, 5577, 5584, 5585, 5584, 5570, 5582, 5589, 5588,
     5589,  263, 5625, 5626, 5591, 5578, 5593, 5589, 5597,13892,
     5584,13892, 5592, 5593, 5609, 5627, 5629, 5636,    0, 5625,
        0, 5633, 5634,    0, 5649, 5642, 5650, 5641, 5650, 5656,
     5641,    0,    0, 5660, 5647, 5651, 5647, 5659, 5653, 5658,
     5683, 5669, 5674, 5671, 5683, 5678, 5689, 5697, 5689, 5692,
     5685, 5686, 5695, 5689, 5705, 5692, 5696, 5698, 5701, 5694,

     5695, 5706, 5701, 5719, 5707, 5711,    0, 5723, 5723, 5711,
     5711, 5733, 5727, 5737, 5747, 5743, 5732, 5752,    0, 5746,
     5744,    0, 5744, 5752,13892, 5759,    0, 5760, 5759, 5760,
        0, 5758, 5768, 5767, 5755, 5755, 5804, 5808, 5761,    0,
        0,    0, 5765,    0,    0, 5782, 5768,    0, 5767, 5784,
     5789, 5801, 5803,    0, 5806,13892,13892, 5819,    0,    0,
     5820, 5806, 5827, 5811,    0, 5811,13892, 5808, 5826,    0,
     5826, 5840, 5844, 5844, 5848, 5838, 5862, 5861, 5862, 5855,
     5856, 5859, 5867, 5869, 5857, 5859, 5878, 5883, 5862, 5881,
     5886, 5865, 5884, 5876,  272, 5867,    0, 5873, 5901, 5890,

        0, 5880,    0, 5892, 5889,    0, 5891, 5897, 5898, 5923,
     5923, 5992, 5913, 6083, 5920, 5916, 6174, 5931, 5936, 5937,
        0, 5930, 5948, 5949,    0, 5934, 5949, 5981, 5970, 5978,
     5988, 5989, 5975, 5995, 5992, 5986, 5978,    0, 5995, 6066,
     6068,13892,    0, 5996,    0, 5982, 5987, 5988,    0, 6000,
    13892, 5986, 5991, 5992, 6265, 6004,    0, 5990, 5998, 6006,
     6027, 6040, 6067, 6067, 6064, 6053, 6072, 6084, 6084, 6081,
     6071, 6080,    0, 6081, 6086, 6087, 6078, 6082,    0, 6100,
        0, 6088, 6094, 6116,    0, 6126, 6128, 6129,    0,  250,
     6131, 6123, 6152, 6149, 6159, 6154, 6166, 6172, 6169, 6166,

     6175, 6175, 6164,    0, 6163, 6174, 6160,13892, 6170, 6180,
     6179, 6176, 6186, 6186, 6175, 6356, 6175, 6186, 6173,    0,
     6184, 6195, 6203, 6219, 6215, 6224, 6231, 6242, 6240, 6245,
     6251, 6240, 6251, 6253, 6258, 6248, 6249,13892, 6257, 6253,
     6264, 6264, 6261, 6257, 6268, 6268, 6258, 6255, 6277, 6282,
     6286, 6284, 6288, 6310, 6289, 6311, 6315, 6319, 6335, 6339,
     6342, 6336, 6330, 6350, 6345,    0, 6343, 6350, 6351, 6350,
     6348, 6349, 6344, 6361, 6361, 6352, 6357, 6355, 6357, 6353,
     6370, 6371, 6363,    0, 6375, 6362,13892, 6377,13892, 6395,
     6397, 6394, 6404, 6404, 6391,    0, 6406,    0, 6412, 6413,

     6408, 6417,    0, 6403,    0, 6413, 6422,    0,    0, 6419,
     6412, 6421, 6414, 6427, 6409, 6422,    0, 6428, 6429, 6423,
     6425, 6425, 6422, 6439, 6425, 6441, 6451, 6444, 6450, 6446,
     6449, 6470, 6466, 6459, 6463, 6458, 6460, 6480, 6477,    0,
     6474, 6475,  254,    0, 6465,    0, 6477, 6482,13892,    0,
      231, 6484, 6484, 6471,    0, 6484,    0, 6479, 6485, 6486,
     6489, 6490, 6483, 6484,    0, 6502, 6515, 6517, 6510,    0,
     6521,13892,13892, 6509,    0, 6528, 6531, 6516, 6535, 6535,
     6519, 6537, 6518, 6535, 6540, 6545, 6529, 6537, 6534, 6547,
     6537, 6534, 6541, 6559, 6535, 6557, 6559, 6565, 6562, 6571,

     6570, 6583, 6573, 6571, 6580, 6596, 6575, 6594, 6596, 6577,
     6583, 6584, 6600,    0,    0,    0, 6592, 6606, 6590, 6604,
     6607, 6608, 6611,    0, 6602, 6598, 6611, 6601, 6602, 6623,
     6617, 6619, 6621, 6644, 6644, 6640, 6646, 6634, 6656,13892,
     6633, 6654, 6639, 6660,    0, 6637, 6646, 6647, 6654, 6650,
     6651, 6659, 6662,13892, 6667,13892,13892, 6667,    0, 6675,
        0,    0, 6678, 6668, 6685,13892,    0, 6680, 6682, 6701,
     6687, 6689,13892,    0,    0,    0, 6710, 6709, 6712, 6712,
     6714, 6700, 6701, 6715,13892, 6718, 6719, 6720, 6707, 6708,
     6713, 6715, 6716,13892, 6726,    0, 6729, 6731, 6733, 6721,

     6723, 6728, 6730, 6731,    0, 6755,    0, 6753,    0, 6749,
     6752, 6764, 6751, 6834, 6772, 6776, 6788, 6774,13892,    0,
     6780, 6793, 6819, 6809, 6809, 6822, 6828, 6822, 6827, 6821,
    13892, 6833, 6828, 6822, 6832, 6833, 6827,    0, 6839, 6834,
     6828, 6838, 6839, 6844, 6831, 6850,    0, 6850, 6837, 6845,
    13892, 6855, 6844, 6871, 6877,13892, 6882,    0, 6882, 6869,
     6884, 6890,    0, 6893, 6879, 6878, 6886, 6880, 6881, 6888,
     6894, 6886, 6885, 6893, 6887, 6888, 6895, 6902, 6894, 6895,
     6909,    0, 6913, 6902, 6916, 6901,    0, 6910, 6939, 6941,
     6940, 6942, 6945,    0,    0, 6944, 6935, 6938, 6942, 6935,

     6946, 6959, 6958, 6944, 6948, 6941, 6952, 6965, 6964, 6964,
     6955, 6951, 6949, 6971, 6958,    0, 6956, 6978, 6964,    0,
     6981,    0,    0, 6997, 7065, 7000, 7010, 7034, 7080,    0,
        0, 7047,    0, 7047, 7042,13892,13892, 7044,    0,    0,
        0,13892,13892, 7037, 7037, 7055, 7044,    0, 7054,    0,
     7061,13892, 7058, 7058, 7064, 7065,13892,13892, 7088, 7080,
     7163, 7090, 7254, 7082,    0, 7079, 7079, 7088, 7102,    0,
        0,    0, 7110, 7111, 7104, 7144, 7148, 7152,    0, 7151,
     7136, 7142, 7138,    0, 7146, 7152, 7152, 7155, 7150, 7156,
     7156, 7159, 7152, 7160,13892, 7155, 7166, 7158, 7159,13892,

        0, 7159, 7170, 7162, 7166,    0, 7175, 7199, 7197, 7199,
     7203, 7201,13892, 7209,    0, 7210,    0, 7236, 7228,    0,
        0, 7219,    0,    0, 7231, 7250,13892, 7251,    0, 7248,
     7249, 7247,13892, 7254, 7243, 7246, 7254,13892,    0,13892,
     7252,    0, 7259, 7248, 7251, 7260,    0, 7345,    0, 7251,
     7256, 7322, 7252, 7261,13892, 7251, 7324, 7256, 7264,    0,
     7255, 7292, 7315, 7314, 7330, 7324, 7321, 7321, 7341, 7335,
     7345,  156, 7346, 7332, 7333, 7334, 7350,  150, 7351, 7337,
     7338, 7340,    0, 7355, 7360, 7350, 7369,    0, 7373,13892,
     7379, 7373, 7386, 7378,    0, 7384, 7378, 7390, 7384, 7395,

     7401, 7398, 7399, 7394, 7390, 7395, 7403, 7408, 7405, 7406,
     7401, 7397, 7409, 7400, 7419,    0,    0,    0, 7412, 7428,
     7419, 7421,13892,    0,    0, 7430,    0, 7441, 7431, 7439,
     7439, 7442, 7454, 7520, 7439, 7460, 7460, 7463, 7475,    0,
     7473, 7459,13892,13892,    0, 7484,13892,13892,    0,    0,
     7491, 7508,13892, 7509,    0, 7502, 5540, 7512, 6791, 7502,
        0, 7519,13892,    0, 7504,    0, 7514, 7512, 7523, 7522,
     7527, 7512,    0, 7512, 7515, 7529, 7525, 7523, 7534, 7534,
     7544, 7525, 7613, 7549, 7552, 7566, 7558, 7560,    0,    0,
     7593, 7596,    0,    0, 7590,    0, 7596, 7591, 7598, 7603,

     7704, 7599, 7795, 7605,    0, 7612, 7610, 7601, 7605, 7612,
     7614, 7605, 7609, 7616, 7621, 7608, 7626, 7626, 7612, 7630,
     7615, 7619, 7645,    0, 7660, 7662, 7649, 7650, 7673, 7676,
     7687, 7688, 7676, 7698, 7686, 7686, 7702, 7703, 7690, 7709,
     7692, 7692,    0, 7711, 7697, 7710, 7716, 7700,    0,13892,
     7702, 7718, 7725, 7708, 7886,    0,13892,13892, 7723,13892,
        0,    0, 7725,    0, 7746,13892, 7766,    0, 7743, 7728,
     7730,    0, 7775, 7977, 7750, 7759, 7761, 7776,    0, 7793,
        0, 7782, 7794, 7791, 7781, 7786, 7798, 7795, 7786, 7786,
     7795,13892, 7797, 7798,13892, 7787, 7792, 7802,    0, 7806,

     7808,    0, 7819, 7827,    0,    0, 7842, 7843, 7841, 7861,
     7852, 7866, 7868, 7876,    0,    0, 7877, 7882, 7881, 7883,
     7888, 8068, 8159, 7888, 7888,    0,    0,    0,    0, 7885,
     7886, 7891, 7884, 7889,    0,    0,13892, 7879, 7892, 7887,
     7906, 7890,    0, 7915, 7911, 7930, 7929,    0, 7921, 7952,
     7945, 7965, 7949, 8250, 7954, 7967, 7969, 7974, 7967, 7968,
        0, 7979, 7980, 7978, 7979,    0, 7986, 8050,    0, 7980,
     7982, 8341, 7993, 8052, 8432,    0,    0, 7972, 7972, 7985,
     8523, 8009, 8011, 8039, 8041, 8040, 8052, 8045, 8049, 8061,
    13892,    0, 8071, 8065,    0,    0, 8614, 8061, 8062,13892,

     8063, 8069, 8061, 8060, 8072,    0, 8069, 8078, 8074, 8074,
     8106, 8101, 8103, 8113, 8117, 8113, 8103, 8128, 8141, 8149,
     8146, 8140,13892,    0,    0, 8140, 8146, 8163, 8150,13892,
    13892, 8144, 8150, 8235, 8154,    0,    0, 8164, 8161, 8150,
    13892, 8159, 8149, 8154,    0, 8163, 8153, 8161, 8176, 8180,
     8202,13892, 8193, 8209, 8229, 8233,    0, 8219,    0, 8216,
     8230, 8232,    0, 8247, 8240, 8246, 8254, 8254,    0, 8246,
     8254, 8248, 8254, 8261, 8262, 8705, 8260, 8255, 8257,    0,
     8293, 8286,13892, 8281, 8296, 8300, 8290, 8318,13892,13892,
     8322, 8326, 8313,    0, 8315, 8331, 8341, 8330, 8322,    0,

        0, 8345, 8348, 8331,    0, 8796,    0,    0, 8346, 8339,
     8419, 8352, 8331, 8343, 8357, 8353, 8347, 8420, 8360, 8342,
     8354, 8414, 8372, 8413, 8405,    0, 8401, 8422, 8421, 8887,
     8420, 8428, 8418, 8423, 8431, 8421, 8424, 8424, 8427, 8434,
        0, 8978, 8455, 8460, 8469, 8472, 8469, 8480, 8466, 8475,
     8478, 8494, 8513, 8497, 8505, 8522,    0, 8518, 8506, 8509,
     8526, 9069, 8522, 8519,13892, 8519, 8515, 8526, 8526, 8531,
     8526,    0, 8526, 8522, 8533, 8533, 8538, 8540, 8527, 8528,
     8544,13892, 8555, 8573,    0, 8590,13892,13892,13892, 8592,
        0,    0,    0,    0,    0,    0, 9160, 8581, 8586,    0,

     8588, 8587, 8598, 8601,13892, 8589, 8599, 9251, 8601, 8599,
     8610, 8613,    0, 8600, 8601,    0, 8617, 8603, 8604, 8614,
     8612,13892,13892, 8616, 8617, 8629, 8618, 8620, 8650, 8648,
        0,    0, 8652, 8653, 8661, 8647, 8649, 8669, 8678, 8697,
     8677, 8701,13892, 8704, 8704, 8693, 8709, 8688, 8692, 8697,
     8713, 8692, 8711,    0, 8714, 8714, 8704, 8720, 8699, 8718,
     8722, 8722, 8720, 8724, 8728, 8750, 8751, 8739, 8767, 8757,
     8762, 8772, 8761, 8783, 8769, 8782, 8788, 8778, 8779, 8795,
     8781, 8788, 8789, 8799, 8800, 8786, 8793, 8794, 8804, 8793,
     8800, 8813, 8815, 8800, 8825, 8831, 8841, 8842, 8827, 8833,

    13892, 8855, 8869, 8877, 8867,13892,    0, 8866, 8883, 8888,
     8877,    0, 8867, 8872, 8885,13892, 8886,    0,    0, 9342,
     8875, 8876, 8889,    0, 8892, 8878, 8891, 8901, 8885, 8897,
     9433, 8900, 8886, 8900, 8910, 8895,13892,    0,    0,13892,
        0,13892, 8914,    0, 8933, 8920,    0, 9524,    0, 8922,
     9615, 8957, 8945, 8958, 8959, 8961,    0, 8968, 8969, 8958,
     8969,    0,    0, 8978, 8978, 8975, 9706, 8981, 8981, 8965,
     8976, 9797, 9888, 8985, 8985, 8978, 8976, 8982, 8975, 8986,
     8987, 9013, 8986, 9007, 9022,13892, 9010, 9028,    0,    0,
        0, 9040, 9045, 9052, 9054,   87, 9055, 9055, 9067,13892,

       66, 9063, 9058, 9070,    0, 9071, 9072, 9057, 9066, 9074,
     9075, 9077, 9062, 9072, 9080, 9081, 9075, 9072, 9072, 9088,
     9083, 9101, 9101, 9117,    0,    0,    0, 9979, 9102, 9122,
     9138, 9139, 9140, 9147, 9133, 9139, 9159, 9149, 9155, 9156,
     9158, 9149, 9154, 9166, 9156, 9162, 9183,13892, 9169,13892,
    13892, 9185,    0, 9171,    0,    0, 9164, 9166, 9177, 9239,
     9202,    0,    0,    0, 9230, 9240, 9233,    0, 9243, 9329,
     9245,10070,10161,10252, 9233, 9271, 9248,10343, 9245, 9239,
     9257, 9258, 9252, 9253, 9247, 9265, 9297, 9289, 9298,13892,
     9320,    0, 9324, 9325, 9315, 9319, 9331, 9331,13892, 9341,

     9334, 9334,    0, 9344,    0, 9338,13892,13892, 9339, 9334,
     9344,    0,    0, 9345, 9343,13892,13892, 9359,13892,    0,
        0, 9361,    0, 9346, 9367, 9385, 9386, 9375, 9377, 9377,
     9412, 9401, 9415, 9423, 9408, 9427, 9432, 9416, 9432, 9417,
     9430, 9437, 9421, 9435, 9440,13892,13892, 9435,    0,    0,
     9436, 9441, 9443, 9429, 9449, 9428, 9448,13892,    0, 9431,
     9433, 9464,13892,13892, 9481, 9461,13892,    0, 9462, 9488,
     9509, 9488, 9508,    0,10434, 9491, 9493, 9501,    0,    0,
     9526, 9505,    0,10525, 9505, 9524, 9526, 9510, 9530, 9513,
     9529, 9531, 9515, 9536, 9521,    0,10616,13892,    0, 9539,

     9541, 9527, 9533, 9546, 9547, 9552, 9559, 9573, 9575, 9597,
     9589, 9598, 9603, 9594, 9602,13892,    0, 9611, 9612, 9606,
     9607, 9615, 9616,    0, 9613, 9610, 9621, 9620, 9617, 9622,
     9608,10707, 9621, 9618, 9630, 9630, 9628, 9636, 9642, 9645,
     9647, 9649, 9650,    0, 9667, 9686, 9672, 9671,13892,13892,
    13892,13892, 9694, 9697, 9683,13892,10798, 9705, 9705, 9689,
     9687,    0,    0,    0,    0, 9709, 9709, 9690,    0, 9709,
     9698, 9712, 9703, 9705, 9715, 9704, 9719, 9711, 9714, 9707,
     9708, 9713, 9734, 9743,13892, 9752,13892, 9749,    0, 9776,
        0, 9762, 9780, 9773, 9767, 9784, 9777, 9786, 9787, 9785,

     9786, 9783, 9784, 9803, 9798,13892, 9786,    0, 9792, 9807,
     9800, 9871, 9805,    0, 9793,10889, 9800, 9816, 9812, 9824,
     9826, 9841, 9842, 9874, 9841,    0,    0,13892, 9866,    0,
    13892, 9882, 9879,10980,11071,    0, 9881,11162,    0,13892,
        0, 9881, 9872, 9891,    0,11253, 9884, 9875, 9894, 9894,
     9895, 9893, 9895,13892, 9880,    0, 9882, 9904, 9904, 9900,
     9909, 9929, 9925, 9923, 9926, 9937, 9957, 9958, 9961, 9961,
     9954, 9956, 9972, 9972, 9976, 9968, 9970, 9970, 9977, 9969,
     9970, 9981, 9981,10047, 9978, 9980, 9980,13892,    0, 9982,
     9983, 9994, 9987,    0,10002,10005,    0,10006,10025,10039,

    11344,10034,10037,11435,10039,11493,13892,10060,10059,11548,
        0,10068,10062,10063,10064,10062,10063,13892,    0,10067,
    13892,10076,10069,    0,10078,10077,10079,10080,10083,10075,
    10079,10078,10102,10109,10101,10107,10105,10119,10144,    0,
    10140,10136,10136,10141,10153,10143,10149,10147,10160,10166,
    11636,10159,10155,10158,10159,10154,10158,10150,13892,13892,
    10152,13892,10159,10163,10157,    0,    0,10158,    0,10179,
    10184,10172,10186,10189,10206,10200,10235,10220,10236,10238,
    10242,10230,10224,10232,10246,10239,10255,10239,10253,10244,
    10245,10249,10250,13892,13892,    0,    0,10257,10258,13892,

        0,10253,10255,10251,10249,10258,13892,10262,10263,10295,
    10299,10283,10292,    0,10289,10306,10313,    0,10316,10319,
    10330,10335,10324,10332,11727,10342,10343,10330,10328,13892,
    13892,10332,10330,    0,    0,10348,10350,10331,10351,10344,
    10340,13892,10358,    0,10340,10359,10362,10344,10365,10378,
    10376,    0,10393,11818,10376,10412,10415,10418,10419,13892,
        0,10421,10423,10424,10421,    0,    0,10415,10418,10435,
    10431,    0,10420,10436,10428,11909,12000,10422,10425,10442,
    10438,12091,10427,13892,    0,10444,10436,10449,10442,13892,
    10447,10446,13892,13892,10476,10479,10476,10480,    0,10476,

    10475,    0,    0,10504,10511,10509,10513,10514,10520,13892,
        0,13892,    0,10524,10524,10522,10510,10517,10527,10528,
    10516,10515,10528,10534,10534,10533,10521,10528,10538,10540,
    10529,10529,10543,10571,10572,10575,10576,13892,13892,10581,
    10597,10585,10593,    0,    0,10588,10604,10593,10605,13892,
        0,10603,10607,10602,10613,10618,10603,10612,10621,10619,
    10610,10614,10622,10613,10628,10634,10622,10651,10660,10659,
    10651,10656,10673,10679,10678,10690,10688,10687,13892,10700,
    10697,10695,    0,10689,10707,10708,10699,10697,10704,    0,
    13892,10698,10700,10714,10698,10717,10718,10710,10709,10717,

    12182,    0,10712,10715,10749,10734,10753,10738,10757,10767,
    13892,10764,10772,    0,10768,10786,10771,10796,10779,10796,
    10797,10779,10797,10801,10788,10803,10787,10807,10790,10808,
    10809,10821,10810,10815,10803,10819,10844,10844,10848,10841,
    10859,10866,10866,10864,10879,10875,10877,10873,10871,13892,
    13892,10879,10876,10888,10879,10893,10884,10886,10882,10880,
        0,    0,10889,10886,10898,10889,10894,10893,10898,10911,
    10934,10936,10938,    0,10932,10942,10962,10959,10964,10959,
    10965,10960,12273,10969,10960,10979,10976,10980,10974,10979,
    10973,    0,10967,12364,10968,13892,10979,    0,12455,10973,

    13892,10987,10983,10985,10990,11000,10991,11015,11035,    0,
    11024,11019,11018,11023,11054,11047,11052,11074,11061,11150,
    11067,11053,11069,11057,11077,11071,11080,11065,11079,11074,
    13892,13892,11079,11089,11110,11119,11128,11144,11141,    0,
        0,11143,11153,11160,11164,11151,11144,11147,11153,11152,
    11168,11172,11159,11152,11156,11162,11162,11180,11187,11203,
    11190,11195,11211,    0,11193,11212,11213,13892,11219,11237,
    12546,11226,11250,11251,    0,11252,11254,11235,11255,11248,
    13892,    0,11257,11259,11240,11260,11253,    0,12637,11248,
    11263,11251,11266,11267,11270,11267,11270,13892,13892,11271,

    11274,11272,11295,    0,    0,    0,11297,11314,13892,    0,
    11307,12728,11322,11320,    0,12819,11311,11332,11327,11340,
    11334,11328,11343,11331,11338,11332,11347,11335,11342,11331,
    13892,13892,11335,13892,13892,11367,    0,    0,11369,    0,
        0,11338,13892,11349,    0,11362,11383,11381,13892,11389,
    11387,11404,    0,13892,13892,13892,13892,    0,    0,    0,
        0,11420,11422,11421,13892,11416,11423,    0,11418,11425,
    11426,11430,11429,11432,11431,11434,11435,11444,11446,11447,
    11448,11449,11450,13892,11443,    0,12910,13892,    0,11436,
    11482,11439,11485,11453,11457,11488,11476,11482,11496,11485,

    11499,11502,11496,11505,11499,11493,13892,11496,    0,11508,
    11513,11508,11532,11543,11544,11553,11554,13892,    0,13892,
    13001,13006,13008,  108,13013,13016,13021,13026,13031,13036,
    13041,13046,13051,13056,13061,13066,13071,13076,13081,13086,
    13091,13096,13101,13106,13111,13116,13121,13126,13131,13136,
    13141,13146,13151,13156,13161,13166,13171,13176,13181,13186,
    13191,13196,13201,13206,13211,13216,13221,13226,13231,13236,
    13241,13246,13251,13256,13261,13266,13271,13276,13281,13286,
    13291,13296,13301,13306,13311,13316,13321,13326,13331,13336,
    13341,13346,13351,13356,13361,13366,13371,13376,13381,13386,

    13391,13396,13401,13406,13411,13416,13421,13426,13431,13436,
    13441,13446,13451,13456,13461,13466,13471,13476,13481,13486,
    13491,13496,13501,13506,13511,13516,13521,13526,13531,13536,
    13541,13546,13551,13556,13561,13566,13571,13576,13581,13586,
    13591,13596,13601,13606,13611,13616,13621,13626,13631,13636,
    13641,13646,13651,13656,13661,13666,13671,13676,13681,13686,
    13691,13696,13701,13706,13711,13716,13721,13726,13731,13736,
    13741,13746,13751,13756,13761,13766,13771,13776,13781,13786,
    13791,13796,13801,13806,13811,13816,13821,13826,13831,13836,
    13841,13846,13851,13856,13861,13866,13871,13876,13881,13886

    } ;

static yyconst short int yy_def[4701] =
    {   0,
     4520,    1, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4521,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4522, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523,   30, 4523,
       33, 4523, 4523, 4523,   46, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4521, 4524, 4520, 4520, 4520,
     4520, 4520, 4520, 4522, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4525, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4520, 4523, 4520, 4526, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4527, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4528, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4529, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4530, 4526, 4523, 4523, 4523, 4523, 4520,
     4523,  381,  381,  381, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4531, 4523, 4523, 4523, 4523, 4532, 4533, 4523, 4523,
     4523, 4523, 4523, 4523, 4534, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4535, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4536, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4537,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4538, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4539, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4530, 4520, 4523, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523,  651,  651, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4540, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4523, 4520, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4541, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4542, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4543, 4523, 4523, 4523,
     4523, 4523, 4523, 4544, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4545, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4546, 4520, 4523,  963,  963,  963, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4547, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4548,
     4523, 4523, 4523, 4520, 4523, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4549, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4550, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 1294, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4523, 4551, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523,
     4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4552,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4553,
     4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4520, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523,

     4523, 4523, 4523, 4554, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4555,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4556, 4520, 4520, 4520, 4520, 4520, 4557, 4520, 4520,
     4520, 4520, 4558, 4523, 4523, 4523, 4523, 4523, 4559, 4523,

     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4560, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523,

     4520, 4520, 4520, 4561, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4562, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4523, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4523, 4523, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,

     4563, 4520, 4564, 4520, 4520, 4565, 4520, 4520, 4520, 4523,
     4523, 4566, 4523, 4567, 4523, 4523, 4568, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4523, 4523, 4523, 4520, 4520, 4569, 4520,
     4520, 4520, 4523, 4523, 4570, 4523, 4523, 4523, 4520, 4520,
     4523, 4523, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4520, 4520, 4523, 4523, 4520, 4523, 4520, 4520,

     4520, 4520, 4520, 4571, 4520, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4572, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523,
     4523, 4523, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4520, 4520, 4523,
     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4573, 4520,
     4520, 4520, 4520, 4574, 4523, 4523, 4523, 4523, 4520, 4523,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520,

     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4575, 4520, 4576, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4577, 4520, 4578,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523,
     4579, 4523, 4580, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520,

     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523,
     4523, 4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4581, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4582, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4520, 4523, 4523, 4523, 4523, 4583, 4520, 4520,
     4520, 4520, 4520, 4584, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4520, 4523, 4523, 4520, 4520, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4520, 4585, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4586, 4523, 4523, 4523, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4587, 4520, 4588, 4520,

     4589, 4523, 4590, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520, 4523,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4591, 4520,
     4523, 4523, 4523, 4523, 4592, 4523, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4593, 4520, 4520,
     4520, 4523, 4523, 4594, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4523, 4520, 4520, 4520, 4595, 4596, 4520, 4520, 4523, 4523,
     4523, 4597, 4598, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4520, 4599, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4600, 4523, 4523, 4523, 4523, 4520, 4523,
     4523, 4523, 4523, 4520, 4520, 4601, 4520, 4520, 4602, 4523,
     4523, 4603, 4523, 4523, 4604, 4523, 4605, 4520, 4520, 4520,
     4606, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523, 4523,
     4520, 4523, 4523, 4523, 4523, 4607, 4608, 4520, 4523, 4520,

     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4609, 4520,
     4523, 4523, 4523, 4523, 4523, 4610, 4523, 4520, 4523, 4523,
     4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,

     4523, 4523, 4523, 4523, 4611, 4612, 4523, 4523, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4520, 4520, 4520, 4613, 4523, 4523, 4523, 4614,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523,
     4615, 4616, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4617, 4520, 4523, 4523,
     4523, 4618, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4619, 4620, 4520, 4520, 4621,

     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4622, 4523, 4523,
     4523, 4523, 4523, 4520, 4523, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,

     4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4623, 4624,
     4520, 4523, 4520, 4625, 4520, 4520, 4520, 4520, 4520, 4523,
     4626, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4523, 4520,
     4627, 4520, 4520, 4628, 4520, 4520, 4523, 4629, 4523, 4523,
     4630, 4523, 4523, 4520, 4523, 4520, 4631, 4520, 4520, 4520,
     4520, 4632, 4633, 4520, 4520, 4523, 4634, 4523, 4523, 4523,
     4523, 4635, 4636, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523, 4523, 4523,
     4523, 4520, 4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520,

     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4637, 4638, 4520, 4523,
     4520, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520, 4520,
     4520, 4639, 4640, 4641, 4520, 4520, 4520, 4642, 4523, 4523,
     4523, 4643, 4644, 4645, 4523, 4523, 4523, 4646, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520, 4520,
     4523, 4523, 4520, 4523, 4520, 4523, 4520, 4520, 4520, 4520,

     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4523, 4523,
     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520, 4647, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4648, 4520, 4523,
     4523, 4523, 4523, 4523, 4649, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4650, 4523, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4651, 4652, 4520, 4523, 4520,

     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520,
     4523, 4520, 4523, 4653, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4654, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4655, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4656, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4520, 4520, 4520, 4523, 4523, 4523, 4520, 4523, 4520,

     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4657, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4658, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4659, 4660, 4520, 4520, 4661,
     4520, 4523, 4523, 4662, 4663, 4523, 4523, 4664, 4523, 4520,
     4665, 4520, 4520, 4520, 4523, 4666, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520,
     4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520,
     4523, 4520, 4520, 4667, 4520, 4520, 4668, 4520, 4523, 4523,

     4669, 4523, 4523, 4670, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520, 4523, 4520,
     4520, 4520, 4523, 4523, 4523, 4520, 4523, 4520, 4523, 4520,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4671,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4672, 4523, 4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4523, 4523, 4520, 4523, 4520,

     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4673, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4674, 4520, 4523, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4675, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4676, 4523, 4520, 4523, 4520, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4677, 4678, 4520, 4520, 4520,
     4520, 4679, 4520, 4523, 4523, 4680, 4681, 4523, 4523, 4523,
     4523, 4682, 4523, 4520, 4523, 4520, 4520, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523,

     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4523, 4520,
     4523, 4520, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520,
     4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523, 4520,
     4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4683,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,

     4684, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520,
     4520, 4520, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520,
     4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523, 4523, 4520,
     4520, 4523, 4523, 4685, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4686, 4523, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4687, 4520, 4688, 4523, 4520, 4689, 4523, 4690, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4523, 4523,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523,
     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4523, 4523, 4523, 4523, 4523, 4523, 4523, 4520, 4520, 4523,
     4523, 4520, 4520, 4691, 4520, 4520, 4520, 4520, 4523, 4523,
     4692, 4523, 4523, 4523, 4523, 4520, 4520, 4520, 4520, 4520,
     4520, 4693, 4523, 4523, 4523, 4523, 4523, 4523, 4694, 4520,
     4520, 4523, 4523, 4520, 4520, 4520, 4520, 4520, 4520, 4523,

     4523, 4523, 4523, 4523, 4523, 4695, 4520, 4520, 4520, 4696,
     4520, 4697, 4523, 4523, 4523, 4698, 4523, 4520, 4520, 4523,
     4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4520,
     4520, 4520, 4520, 4520, 4520, 4523, 4523, 4523, 4523, 4523,
     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4520, 4520, 4523,
     4523, 4523, 4523, 4520, 4520, 4520, 4520, 4523, 4523, 4523,
     4523, 4520, 4523, 4520, 4520, 4520, 4523, 4523, 4523, 4520,
     4523, 4520, 4520, 4523, 4523, 4520, 4523, 4520, 4520, 4523,
     4523, 4520, 4523, 4520, 4699, 4523, 4700, 4520, 4523, 4520,
     4520, 4523, 4523, 4520, 4520, 4523, 4523, 4520, 4520, 4523,

     4523, 4520, 4520, 4523, 4523, 4520, 4520, 4523, 4523, 4520,
     4523, 4520, 4523, 4520, 4523, 4520, 4523, 4520, 4523,    0,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520

    } ;

static yyconst short int yy_nxt[13984] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   44,   57,   58,   59,   60,   32,   61,   34,
       35,   62,   37,   38,   63,   40,   41,   64,   43,   44,
       45,   65,   47,   66,   49,   50,   67,   68,   69,   70,
       71,   72,   74,   74,   73,   74,   74,   73,   85,   85,

       73,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   82,  205,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   89,   90,   91,  119,   92, 3601,  139,
       93,  201,   88,   94,   95,   96,  120,   97,  101,  133,
       98,   99,  100,  134,  102,   72,  103,   73,   73, 3597,
       73,   74,   74,   89,   90,   91,  119,   92,  104,  139,
       93,  201,   88,   94,   95,   96,  120,   97,  101,  133,
       98,   99,  100,  134,  102,  128,  103,  112,  113,  129,
      140,  114,  115,  130,  149,  116,  141,  135,  104,  105,
      136,  117,  131,  106,  118,  132,  107,  137,  150,  152,

      108,  188,  138,  109,  151,  128,  110,  112,  111,  129,
      140,  114, 2973,  130,  149,  116,  141,  135, 2967,  105,
      136,  117,  131,  106,  118,  132,  107,  137,  150,  152,
      108,  188,  138,  109,  151, 2617,  110,  201,  111,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  145,
      142,  152,  208,  192,  122,  143,  144,  146, 2613,  123,
      153,  193,  186,  147,  211,  124,  187,  201,  125,  148,
     2475,  126,   85,   85,  188,  127, 2383, 2238, 2085,  145,
      142,  152,  208,  192,  122,  143,  144,  146,  189,  123,
      153,  193,  190,  147,  211,  124,  165, 1744,  125,  148,

      166,  126,  191, 1315,  188,  127,  154,  155,  156,  157,
      167,  214,  215,  209,  217,  216,  168,  220,  189, 1556,
      158,  225,  190, 1555,  159,  210,  165,  160,  161,  194,
      166,  162,  191,  195,  163,  197,  196,  164, 1554, 1382,
      167,  214,  215,  209,  217,  216,  168,  220,  212,  198,
      158,  225,  226,  199,  159,  210,  200,  160,  161,  194,
     1380,  162,  213,  195,  163,  197,  196,  164,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  212,  198,
      180,  227,  226,  199,  181,  170,  200,  171,  182,  228,
      172,  173,  213,  101,  174,  221,  175,  183,  176,  102,

      184,  103,  177,  178,  185,  222,  229,  179, 1375, 1315,
      180,  227, 1213,  104,  181,  170,  230,  171,  182,  228,
      172,  173, 1212,  101,  174,  221,  175,  183,  176,  102,
      184,  103,  177,  178,  185,  222,  229,  179,   89,   90,
       91,  231,   92,  104,  232,   93,  230,  233,   94,   95,
       96,  135,   97,  123,  136,   98,   99,  100,  194,  112,
     1211,  137,  195,  114, 1133,  196,  138,  116,   89,   90,
       91,  231,   92,  117,  232,   93,  118,  233,   94,   95,
       96,  135,   97,  123,  136,   98,   99,  100,  194,  112,
      197,  137,  195,  114,  142,  196,  138,  116,  238,  143,

      203,  239,  240,  117,  198,  218,  118,  219,  199,  241,
      245,  200,  880,  928,  881,  584,  374,  882,  584,  374,
      197,   77,  204,  202,  142,   87,   86,   80,  238,  143,
      203,  239,  240,   79,  198,  218,   78,  219,  199,  241,
      245,  200,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,   82,  223,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  234,  235,  236,  246,  247,  242,
      248,  237,  224,  243,  250,   77,   75, 4520, 4520, 4520,

     4520, 4520, 4520,  223, 4520, 4520,  244,  249,  253,  254,
      255, 4520,  258,  259,  234,  235,  236,  246,  247,  242,
      248,  237,  224,  243,  250,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  251,  244,  249,  253,  254,
      255,  256,  258,  259,  252,  260,  261,  262,  264,  265,
      268,  257,  269,  270,  276,  281,  272,  266,  274,  285,
      267,  263,  273,  289,  275,  251,  271, 4520, 4520,  286,
     4520,  256, 4520, 4520,  252,  260,  261,  262,  264,  265,
      268,  257,  269,  270,  276,  281,  272,  266,  274,  285,
      267,  263,  273,  289,  275, 4520,  271,  277,  277,  286,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  287,  277,  279,  280,  290,  291,  293,
      294,  282,  295,  296,  310,  277,  277,  277,  277,  277,
      283,  288,  311,  315,  284,  292, 4520, 4520,  316, 4520,
      317,  323, 4520,  287, 4520,  279,  280,  290,  291,  293,
      294,  282,  295,  296,  310,  318,  277,  277,  277,  319,
      283,  288,  311,  315,  284,  292,  297,  298,  316,  299,
      317,  323,  312,  320,  300,  329, 4520,  321,  313,  301,
     4520,  314, 4520,  322, 4520,  318,  277,  277,  327,  319,
     4520, 4520, 4520,  332,  328, 4520,  297,  298,  333,  299,

      336,  343,  312,  320,  300,  329,  324,  321,  313,  301,
      302,  314,  303,  322,  304,  305,  325,  344,  327,  347,
      306,  307,  308,  332,  328,  326,  330,  309,  333, 4520,
      336,  343, 4520, 4520, 4520, 4520,  324, 4520, 4520,  331,
      302,  334,  303, 4520,  304,  305,  325,  344, 4520,  347,
      306,  307,  308,  335, 4520,  326,  330,  309,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  339,  331,
      337,  334,  341,  338,  345,  352,  350,  348,  346,  353,
      359,  360,  361,  335,  351,  340,  342,  349,  354,  363,
      357,  365,  362,  355,  366,  356,  358,  367,  339,  364,

      337,  368,  341,  338,  345,  352,  350,  348,  346,  353,
      359,  360,  361,  369,  351,  340,  342,  349,  354,  363,
      357,  365,  362,  355,  366,  356,  358,  367,  370,  364,
      371,  368,  372,  296,  376,  377,  378,  379,  385,  386,
      387,  373,  388,  369,  389,  281,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206, 4520, 4520,  370, 4520,
      371, 4520,  372,  296,  376,  377,  378,  379,  385,  386,
      387,  373,  388, 4520,  389,  281,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  380,  380, 4520,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  390,  380,  391,  392,  393,  394, 4520,  396,
      397,  398,  399,  400,  380,  380,  380,  380,  380,  401,
      402,  403,  405,  406,  395,  382,  404,  407,  383,  408,
      409,  410,  390,  411,  391,  392,  393,  394,  384,  396,
      397,  398,  399,  400,  412,  380,  380,  380,  413,  401,
      402,  403,  405,  406,  395,  382,  404,  407,  383,  408,
      409,  410,  414,  411,  415,  416,  417,  418,  384,  419,
      420,  422,  425,  423,  412,  380,  380,  424,  413,  426,
      429,  430,  431,  432,  427,  434,  421, 4520,  437,  433,
      438,  439,  414,  440,  415,  416,  417,  418,  428,  419,

      420,  422,  425,  423,  441,  442,  443,  424,  455,  426,
      429,  430,  431,  432,  427,  434,  421,  435,  437,  433,
      438,  439,  456,  440,  459,  436, 4520, 4520,  428, 4520,
      462, 4520,  457,  463,  441,  442,  443,  464,  455,  460,
     4520, 4520,  465,  458, 4520, 4520,  466,  435,  467,  461,
      468,  469,  456,  470,  459,  436,  444,  445,  446,  447,
      462,  448,  457,  463,  449,  471,  472,  464,  475,  460,
      450,  451,  465,  458,  452,  453,  466,  454,  467,  461,
      468,  469, 4520,  470, 4520, 4520,  444,  445,  446,  447,
     4520,  448, 4520, 4520,  449,  471,  472,  476,  475,  477,

      450,  451,  478,  479,  452,  453, 4520,  454,  473,  473,
     4520,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  480,  473,  481,  476,  486,  477,
      487,  482,  478,  479,  483,  488,  473,  473,  473,  473,
      473,  489,  484,  490,  491,  493,  485,  494,  492,  495,
      496,  497,  498,  499,  480,  500,  481,  502,  486,  501,
      487,  482,  503,  508,  483,  488,  509,  473,  473,  473,
      510,  489,  484,  490,  491,  493,  485,  494,  492,  495,
      496,  497,  498,  499,  506,  500,  504,  502,  511,  501,
     4520,  512,  503,  508,  505, 4520,  509,  473,  473,  507,

      510,  517,  518,  519,  520,  521,  522,  523, 4520, 4520,
      524,  525,  526,  530,  506,  531,  504,  532,  511,  533,
      513,  534,  535,  536,  505,  514,  537,  538,  541,  507,
      544,  517,  518,  519,  520,  521,  522,  523,  515,  516,
      524,  525,  526,  530, 4520,  531, 4520,  532, 4520,  533,
      513,  534,  535,  536, 4520,  514,  537,  538,  541,  542,
      544,  545,  548,  549,  550,  543,  551,  552,  515,  516,
      527,  527, 4520,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  553,  527,  539,  542,
      546,  545,  548,  549,  550,  543,  551,  552,  527,  527,

      527,  527,  527,  540,  554,  555,  547,  556,  557,  558,
      559,  568,  529, 4520, 4520,  569,  553,  570,  539,  571,
      546,  563,  574,  575,  576, 4520,  560,  577,  578,  527,
      527,  527, 4520,  540,  554,  555,  547,  556,  557,  558,
      559,  568,  529,  561,  562,  569,  572,  570,  579,  571,
      564,  580,  574,  575,  576,  573,  560,  577,  578,  527,
      527,  581,  565,  582,  566,  585,  586,  587,  567, 4520,
     4520, 4520,  606,  561,  562, 4520,  572,  607,  579,  608,
      564,  580,  609,  610,  611,  573,  614,  615, 4520,  616,
     4520,  581,  565,  582,  566,  585,  586,  587,  567,  588,

      589,  590,  606,  617,  591,  592,  593,  607,  594,  608,
      612,  618,  609,  610,  611,  619,  614,  615,  595,  616,
      596, 4520, 4520, 4520,  620,  613, 4520, 4520, 4520,  588,
      589,  590,  621,  617,  591,  592,  593,  622,  594,  623,
      612,  618, 4520,  624,  625,  619,  626,  627,  595,  628,
      596,  597,  598,  599,  620,  613,  600,  601,  602,  629,
      603,  632,  621,  630,  631,  635,  636,  622,  637,  623,
      604,  638,  605,  624,  625,  644,  626,  627, 4520,  628,
     4520,  597,  598,  599, 4520, 4520,  600,  601,  602,  629,
      603,  632,  645,  630,  631,  635,  636,  646,  637,  647,

      604,  638,  605,  633,  633,  644,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  648,
      633,  649,  645,  654,  655,  656,  657,  646,  658,  647,
      659,  633,  633,  633,  633,  633,  660,  662,  663,  664,
      665,  666,  667,  661,  670,  671,  672,  673,  674,  648,
      675,  649,  678,  654,  655,  656,  657,  681,  658,  684,
      659,  685,  633,  633,  633, 4520,  660,  662,  663,  664,
      665,  666,  667,  661,  670,  671,  672,  673,  674, 4520,
      675, 4520,  678,  686,  687,  688,  689,  681,  690,  684,
     4520,  685,  633,  633,  639,  639, 4520,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      676,  639,  679,  686,  687,  688,  689,  691,  690,  692,
      680,  677,  639,  639,  639,  639,  639,  682,  693,  696,
      697,  698,  702,  704,  683,  705,  706,  707,  708,  709,
      676,  703,  679,  710,  717,  718,  725,  691,  721,  692,
      680,  677,  722,  639,  639,  639, 4520,  682,  693,  696,
      697,  698,  702,  704,  683,  705,  706,  707,  708,  709,
     4520,  703, 4520,  710,  717,  718,  725, 4520,  721,  726,
      727, 4520,  722,  639,  639,  641,  641, 4520,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  719,  641, 4520,  723, 4520,  728,  699,  729,  726,
      727,  720,  730,  641,  641,  641,  641,  641,  711,  700,
      731,  724,  712,  713,  643,  701,  732,  733,  714,  734,
      735,  719,  736,  715,  723,  716,  728,  699,  729,  737,
      738,  720,  730,  739,  641,  641,  641, 4520,  711,  700,
      731,  724,  712,  713,  643,  701,  732,  733,  714,  734,
      735, 4520,  736,  715,  740,  716,  741,  742,  743,  737,
      738,  744,  745,  739,  641,  641,  650,  650, 4520,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  746,  650,  740,  747,  741,  742,  743,  748,

      749,  744,  745,  750,  650,  650,  650,  650,  650,  752,
      753,  652,  754,  653,  755,  756,  757,  751,  758,  759,
      760,  767,  746,  768,  769,  747,  770,  773,  774,  748,
      749,  779,  775,  750,  780,  650,  650,  650,  771,  752,
      753,  652,  754,  653,  755,  756,  757,  751,  758,  759,
      760,  767, 4520,  768,  769,  776,  770,  773,  774,  777,
      772,  779,  775,  783,  780,  650,  650,  668,  668, 4520,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  776,  668,  776,  781,  777,  784,  777,
      772,  787,  788,  783,  789,  668,  668,  668,  668,  668,

      790,  791,  778,  792,  782,  793,  794,  795,  796,  797,
      798,  801,  802,  776,  799,  803,  781,  777,  784,  804,
      800,  787,  788,  805,  789,  806,  668,  668,  668, 4520,
      790,  791,  778,  792,  782,  793,  794,  795,  796,  797,
      798,  801,  802, 4520,  799,  803,  807,  808,  809,  804,
      800,  810,  811,  805,  814,  806,  668,  668,  694,  694,
     4520,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  815,  694,  807,  808,  809,  812,
      813,  810,  811,  816,  814,  817,  694,  694,  694,  694,
      694,  818,  821,  822,  823,  824,  825,  826,  827,  828,

      829,  830,  831,  832,  815,  833,  834,  837,  838,  812,
      813,  839,  840,  816,  841,  817,  842,  694,  694,  694,
     4520,  818,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832, 4520,  833,  834,  837,  838,  843,
      844,  839,  840,  847,  841,  848,  842,  694,  694,  761,
      761, 4520,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  835,  761,  849,  845,  843,
      844,  850,  851,  847,  852,  848,  855,  761,  761,  761,
      761,  761,  836,  856,  763,  846,  764,  853,  765,  766,
      865,  861,  866,  854,  867,  835,  868,  849,  845,  869,

      870,  850,  851,  862,  852,  871,  855,  874,  761,  761,
      761, 4520,  836,  856,  763,  846,  764,  853,  765,  766,
      865,  861,  866,  854,  867, 4520,  868, 4520, 4520,  869,
      870, 4520, 4520,  862, 4520,  871,  875,  874,  761,  761,
      785,  785, 4520,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  872,  785,  863,  876,
      877,  857,  873,  878,  858,  879,  875,  883,  785,  785,
      785,  785,  785,  859,  864,  884,  885,  886,  907,  860,
      908,  909,  920,  921,  922,  923,  872, 4520,  863,  876,
      877,  857,  873,  878,  858,  879,  925,  883,  921,  785,

      785,  785, 4520,  859,  864,  884,  885,  886,  907,  860,
      908,  909,  920,  921,  922, 4520, 4520,  924, 4520, 4520,
     4520,  926,  927, 4520,  929, 4520,  925,  946,  921,  785,
      785,  819,  819, 4520,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  924,  819,  910,
      911,  926,  927,  912,  929,  913,  947,  946,  948,  819,
      819,  819,  819,  819,  915,  916,  949,  953,  917,  914,
      918,  954,  955,  956,  950,  957,  958,  959,  960,  910,
      911,  961,  951,  912,  919,  913,  947,  952,  948,  967,
      819,  819,  819,  968,  915,  916,  949,  953,  917,  914,

      918,  954,  955,  956,  950,  957,  958,  959,  960,  969,
     4520,  961,  951, 4520,  919,  970,  971,  952,  972,  967,
      819,  819,  887,  968,  973,  888,  974,  889,  890,  975,
      891,  976,  892,  893,  977,  978,  979,  894,  980,  969,
      895,  981,  982,  896, 4520,  970,  971, 4520,  972, 4520,
     4520,  983,  887,  984,  973,  888,  974,  889,  890,  975,
      891,  976,  892,  893,  977,  978,  979,  894,  980,  985,
      895,  981,  982,  896,  897,  986,  987,  898,  988,  899,
      900,  983,  901,  984,  902,  903,  989,  990,  999,  904,
      991,  992,  905, 1000,  993,  906, 4520, 4520, 4520,  985,

     4520, 4520,  994, 1001,  897,  986,  987,  898,  988,  899,
      900, 1002,  901, 4520,  902,  903,  989,  990,  999,  904,
      991,  992,  905, 1000,  993,  906,  930,  995,  996,  931,
      932,  997,  994, 1001, 1003, 1004,  933, 1005, 1006,  998,
     1007, 1002, 1010,  934, 1011,  935, 1008, 1009, 1012,  936,
      937, 4520, 1013, 1014, 4520, 4520,  930,  995,  996,  931,
      932,  997, 1015, 1016, 1003, 1004,  933, 1005, 1006,  998,
     1007, 1017, 1010,  934, 1011,  935, 1008, 1009, 1012,  936,
      937,  938, 1013, 1014,  939,  940, 1018, 1019, 1020, 1021,
     1022,  941, 1015, 1016, 1023, 1024, 1025, 1026,  942, 1027,

      943, 1017, 1028, 1029,  944,  945, 4520, 4520, 1030, 4520,
     4520,  938, 4520, 4520,  939,  940, 1018, 1019, 1020, 1021,
     1022,  941, 1031, 4520, 1023, 1024, 1025, 1026,  942, 1027,
      943, 1032, 1028, 1029,  944,  945,  962,  962, 1030,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962, 1031,  962, 1033, 1034, 1035, 4520, 1036, 1037,
     1038, 1032, 1039, 1040,  962,  962,  962,  962,  962, 1041,
     1042, 1043, 1044,  964,  965, 1045, 1046, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 1033, 1034, 1035,  966, 1036, 1037,
     1038, 1056, 1039, 1040, 1057,  962,  962,  962, 4520, 1041,

     1042, 1043, 1044,  964,  965, 1045, 1046, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 4520, 1058, 1059,  966, 4520, 1063,
     1064, 1056, 1074, 1075, 1057,  962,  962, 1047, 1047, 4520,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1076, 1047, 1058, 1059, 1077, 1060, 1063,
     1064, 1065, 1074, 1075, 1066, 1047, 1047, 1047, 1047, 1047,
     1061, 1067, 1069, 1078, 1068, 1068, 1062, 1067, 1081, 1071,
     1068, 1067, 4520, 1076, 1068, 1079, 1070, 1077, 1060, 1073,
     1080, 1065, 1067, 1082, 1066, 1068, 1047, 1047, 1047, 1083,
     1061, 1067, 1069, 1078, 1068, 1068, 1062, 1067, 1081, 1071,

     1068, 1067, 1072, 1084, 1068, 1079, 1070, 1085, 1086, 1073,
     1080, 1087, 1067, 1082, 1088, 1068, 1047, 1047, 1089, 1083,
     1090, 1091, 4520, 1110, 1111, 4520, 1112, 1115, 4520, 4520,
     1121, 1122, 1072, 1084, 4520, 1123, 1124, 1085, 1086, 1113,
     4520, 1087, 4520, 1125, 1088, 4520, 4520, 1126, 1089, 1114,
     1090, 1091, 1092, 1110, 1111, 1093, 1112, 1115, 1094, 1095,
     1121, 1122, 1118, 1127, 1096, 1123, 1124, 1097, 1128, 1113,
     1098, 1129, 1119, 1125, 1130, 1099, 1100, 1126, 1120, 1114,
     4520, 1131, 1092, 4520, 4520, 1093, 1132, 1134, 1094, 1095,
     1135, 1136, 1118, 1127, 1096, 4520, 1137, 1097, 1128, 1138,

     1098, 1129, 1119, 1139, 1130, 1099, 1100, 1101, 1120, 1140,
     1102, 1131, 1141, 1103, 1104, 1146, 1132, 1134, 1147, 1105,
     1135, 1136, 1106, 1142, 1144, 1107, 1137, 1143, 1145, 1138,
     1108, 1109, 4520, 1139, 1148, 4520, 4520, 1101, 4520, 1140,
     1102, 4520, 1141, 1103, 1104, 1146, 4520, 4520, 1147, 1105,
     1149, 1150, 1106, 1142, 1144, 1107, 1151, 1143, 1145, 1152,
     1108, 1109, 1116, 1116, 1148, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1153, 1116,
     1149, 1150, 1154, 1155, 1156, 1157, 1151, 1158, 1159, 1152,
     1116, 1116, 1116, 1116, 1116, 1160, 1161, 1162, 1163, 1164,

     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1153, 1173,
     1174, 1175, 1154, 1155, 1156, 1157, 1176, 1158, 1159, 1177,
     1178, 1116, 1116, 1116, 1179, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1180, 1173,
     1174, 1175, 1181, 1182, 1183, 1184, 1176, 1185, 1186, 1177,
     1178, 1116, 1116, 1187, 1179, 1188, 1189, 1190, 4520, 4520,
     1195, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 1180, 4520,
     4520, 4520, 1181, 1182, 1183, 1184, 1196, 1185, 1186, 1197,
     1198, 1199, 1205, 1187, 1206, 1188, 1189, 1190, 1191, 1191,
     1195, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1207, 1191, 1196, 1209, 1210, 1197,
     1198, 1199, 1205, 1216, 1206, 1217, 1191, 1191, 1191, 1191,
     1191, 1200, 1208, 1201, 1193, 1202, 1220, 1223, 1218, 1221,
     1224, 1225, 1226, 1194, 1207, 1227, 1228, 1209, 1210, 1219,
     1222, 1229, 1232, 1216, 1235, 1217, 1236, 1191, 1191, 1191,
     4520, 1200, 1208, 1201, 1193, 1202, 1220, 1223, 1218, 1221,
     1224, 1225, 1226, 1194, 4520, 1227, 1228, 1237, 1238, 1219,
     1222, 1229, 1232, 1239, 1235, 1240, 1236, 1191, 1191, 1203,
     1203, 4520, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1230, 1203, 1237, 1238, 1241,

     1242, 1233, 1243, 1239, 1244, 1240, 1231, 1203, 1203, 1203,
     1203, 1203, 1234, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1256, 1230, 1257, 1258, 1259, 1241,
     1242, 1233, 1243, 1260, 1244, 1261, 1231, 1262, 1203, 1203,
     1203, 4520, 1234, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1256, 4520, 1257, 1258, 1259, 1265,
     1263, 1266, 1267, 1260, 1264, 1261, 1268, 1262, 1203, 1203,
     1214, 1214, 4520, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1269, 1214, 1270, 1265,
     1263, 1266, 1267, 1271, 1264, 1274, 1268, 1275, 1214, 1214,

     1214, 1214, 1214, 1272, 1276, 1277, 1278, 1273, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1269, 1287, 1270, 1288,
     1289, 1290, 1291, 1271, 1292, 1274, 1310, 1275, 1311, 1214,
     1214, 1214, 4520, 1272, 1276, 1277, 1278, 1273, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 4520, 1287, 4520, 1288,
     1289, 1290, 1291, 1312, 1292, 1313, 1310, 1314, 1311, 1214,
     1214, 1293, 1293, 4520, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1316, 1293, 1317,
     1319, 1320, 1321, 1312, 1322, 1313, 1323, 1314, 1324, 1293,
     1293, 1293, 1293, 1293, 1318, 1325, 1326, 1327, 1329, 1330,

     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1316, 1338, 1317,
     1319, 1320, 1321, 1295, 1322, 1339, 1323, 1340, 1324, 1341,
     1293, 1293, 1293, 4520, 1318, 1325, 1326, 4520, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1342, 1338, 1343,
     1344, 4520, 1345, 1295, 1328, 1339, 1346, 1340, 1347, 1341,
     1293, 1293, 1296, 1297, 1348, 1349, 1350, 1298, 1351, 1352,
     1299, 1353, 1354, 1355, 1356, 1300, 1357, 1342, 1301, 1343,
     1344, 1302, 1345, 4520, 1328, 1358, 1346, 4520, 1347, 1359,
     4520, 1360, 1296, 1297, 1348, 1349, 1350, 1298, 1351, 1352,
     1299, 1353, 1354, 1355, 1356, 1300, 1357, 1361, 1301, 1362,

     1363, 1302, 1303, 1304, 1364, 1358, 1365, 1305, 1366, 1359,
     1306, 1360, 1367, 1368, 1369, 1307, 1370, 1371, 1308, 1372,
     1373, 1309, 1374, 1376, 1377, 1378, 1381, 1361, 1383, 1362,
     1363, 1384, 1303, 1304, 1364, 1385, 1365, 1305, 1366, 4520,
     1306, 1379, 1367, 1368, 1369, 1307, 1370, 1371, 1308, 1372,
     1373, 1309, 1374, 1376, 1377, 1378, 1381, 1386, 1383, 1395,
     1389, 1384, 1396, 1392, 1397, 1385, 1398, 1399, 1401, 1387,
     1402, 1379, 1390, 4520, 1400, 1403, 1388, 1404, 1405, 1391,
     1406, 1407, 1408, 1409, 1410, 1393, 1411, 1386, 1412, 1395,
     1389, 1414, 1396, 1415, 1397, 1413, 1398, 1399, 1401, 1387,

     1402, 1411, 1390, 1394, 1400, 1403, 1388, 1404, 1405, 1391,
     1406, 1407, 1408, 1409, 1410, 1393, 1411, 1416, 1412, 1417,
     1418, 1414, 1419, 1415, 1421, 1413, 1422, 1423, 1424, 1426,
     1427, 1411, 1428, 1394, 1429, 1430, 1431, 1420, 1434, 1432,
     1435, 1436, 1439, 1425, 1437, 1440, 1441, 1416, 1442, 1417,
     1418, 1443, 1419, 1433, 1421, 1438, 1422, 1423, 1424, 1426,
     1427, 1444, 1428, 1445, 1429, 1430, 1431, 1420, 1434, 1432,
     1435, 1436, 1439, 1425, 1437, 1440, 1441, 1446, 1442, 1447,
     1449, 1443, 1450, 1433, 1451, 1438, 1452, 1453, 1454, 1455,
     1448, 1444, 1456, 1445, 1457, 1458, 1459, 1460, 1461, 1462,

     1463, 1464, 1465, 1468, 1469, 1466, 1470, 1446, 1479, 1447,
     1449, 1480, 1450, 1481, 1451, 1482, 1452, 1453, 1454, 1455,
     1448, 1467, 1456, 1483, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1468, 1469, 1466, 1470, 1484, 1479, 1485,
     1488, 1480, 4520, 1481, 4520, 1482, 4520, 1486, 1489, 1490,
     1487, 1467, 1471, 1483, 1491, 1492, 4520, 1493, 1494, 4520,
     1495, 1496, 4520, 1497, 1498, 1499, 1500, 1484, 1501, 1485,
     1488, 1502, 1472, 1503, 1473, 1504, 1474, 1486, 1489, 1490,
     1487, 1505, 1475, 1506, 1491, 1492, 1476, 1493, 1494, 1477,
     1495, 1496, 1478, 1497, 1498, 1499, 1500, 1507, 1501, 1508,

     1509, 1502, 1472, 1503, 1473, 1504, 1474, 1510, 1511, 1512,
     1513, 1505, 1475, 1506, 1514, 1515, 1476, 1516, 1517, 1477,
     1518, 1519, 1478, 1520, 1521, 4520, 4520, 1507, 4520, 1508,
     1509, 4520, 4520, 4520, 4520, 4520, 4520, 1510, 1511, 1512,
     1513, 1524, 4520, 1525, 1514, 1515, 1526, 1516, 1517, 1527,
     1518, 1519, 1528, 1520, 1521, 1522, 1522, 4520, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1524, 1522, 1525, 1529, 1530, 1526, 1531, 1532, 1527,
     1533, 1534, 1528, 1522, 1522, 1522, 1522, 1522, 1535, 1536,
     1536, 1539, 1536, 1540, 1541, 1537, 1542, 1543, 1544, 1545,

     1546, 1547, 1548, 1549, 1529, 1530, 1550, 1531, 1532, 1538,
     1533, 1534, 1551, 1557, 1522, 1522, 1522, 4520, 1535, 1536,
     1536, 1539, 1536, 1540, 1541, 1537, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1558, 1559, 1550, 1560, 1561, 1538,
     1562, 1563, 1551, 1557, 1522, 1522, 1552, 1552, 4520, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1564, 1552, 1558, 1559, 1565, 1560, 1561, 1566,
     1562, 1563, 1568, 1569, 1552, 1552, 1552, 1552, 1552, 1570,
     1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1581,
     1582, 1583, 1564, 1584, 1585, 1586, 1565, 1587, 1588, 1566,

     1589, 1590, 1568, 1569, 1591, 1552, 1552, 1552, 4520, 1570,
     1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1581,
     1582, 1583, 4520, 1584, 1585, 1586, 1592, 1587, 1588, 1593,
     1589, 1590, 1594, 1595, 1591, 1552, 1552, 1567, 1567, 4520,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1596, 1567, 1597, 1592, 1598, 1599, 1593,
     1600, 1601, 1594, 1595, 1602, 1567, 1567, 1567, 1567, 1567,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1596, 1616, 1597, 1617, 1598, 1599, 1618,
     1600, 1601, 1619, 1620, 1602, 1621, 1567, 1567, 1567, 1622,

     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1623, 1616, 1624, 1617, 1625, 1626, 1618,
     1627, 1628, 1619, 1620, 1629, 1621, 1567, 1567, 1630, 1622,
     1631, 1632, 1633, 1634, 1635, 4520, 4520, 1650, 1653, 4520,
     1654, 4520, 1655, 1623, 1651, 1624, 1656, 1625, 1626, 1652,
     1627, 1628, 4520, 4520, 1629, 4520, 1659, 1662, 1630, 1663,
     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1650, 1653, 1638,
     1654, 1639, 1655, 1657, 1651, 1660, 1656, 1658, 1664, 1652,
     1661, 1665, 1640, 1641, 1666, 1642, 1659, 1662, 1667, 1663,
     4520, 1668, 4520, 1662, 1669, 1636, 1637, 1670, 1671, 1638,

     1672, 1639, 1673, 1657, 4520, 1660, 4520, 1658, 1664, 1674,
     1661, 1665, 1640, 1641, 1666, 1642, 1643, 1644, 1667, 1675,
     1645, 1668, 1646, 1662, 1669, 1676, 1679, 1670, 1671, 1680,
     1672, 1681, 1673, 1647, 1648, 1682, 1649, 1683, 1684, 1674,
     1677, 1685, 1686, 1678, 1687, 1688, 1643, 1644, 1689, 1675,
     1645, 1690, 1646, 1691, 1692, 1676, 1679, 1693, 1694, 1680,
     1695, 1681, 1696, 1647, 1648, 1682, 1649, 1683, 1684, 1697,
     1677, 1685, 1686, 1678, 1687, 1688, 1698, 1699, 1689, 4520,
     1702, 1690, 4520, 1691, 1692, 4520, 4520, 1693, 1694, 4520,
     1695, 4520, 1696, 4520, 1703, 4520, 1704, 1705, 1706, 1697,

     1707, 1708, 1710, 1709, 1711, 1712, 1698, 1699, 1700, 1700,
     1702, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1703, 1700, 1704, 1705, 1706, 1713,
     1707, 1708, 1710, 1709, 1711, 1712, 1700, 1700, 1700, 1700,
     1700, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1713,
     1732, 1735, 1736, 1737, 1733, 1738, 1739, 1700, 1700, 1700,
     1734, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1740,
     1732, 1735, 1736, 1737, 1733, 1738, 1739, 1700, 1700, 1741,

     1734, 1742, 1745, 1746, 1743, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1740,
     1761, 1762, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 1741,
     4520, 1742, 1745, 1746, 1743, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1765,
     1761, 1762, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1765,
     1785, 1786, 1788, 1789, 1790, 1791, 1764, 4520, 4520, 1787,
     4520, 4520, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,

     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1792,
     1785, 1786, 1788, 1789, 1790, 1791, 1764, 1774, 1774, 1787,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1793, 1774, 1794, 1795, 1796, 1799, 1792,
     1800, 1801, 1797, 1802, 1803, 1774, 1774, 1774, 1774, 1774,
     1798, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814, 1815, 1793, 1816, 1794, 1795, 1796, 1799, 1817,
     1800, 1801, 1797, 1802, 1803, 1818, 1774, 1774, 1774, 1819,
     1798, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814, 1815, 1820, 1816, 1821, 1822, 1833, 1834, 1817,

     1835, 1836, 1837, 1838, 1839, 1818, 1774, 1774, 1840, 1819,
     1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1841,
     1842, 1843, 1844, 1820, 1832, 1821, 1822, 1833, 1834, 1845,
     1835, 1836, 1837, 1838, 1839, 1846, 1847, 1848, 1840, 1849,
     1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1841,
     1842, 1843, 1844, 4520, 1832, 4520, 4520, 4520, 4520, 1845,
     4520, 4520, 4520, 4520, 4520, 1846, 1847, 1848, 1861, 1849,
     1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
     1859, 4520, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 4520, 1859, 1870, 1861, 1871,

     1862, 1873, 1874, 1875, 1863, 1872, 1864, 1859, 1859, 1859,
     1859, 1859, 1865, 1866, 1876, 1877, 1878, 1867, 1879, 1868,
     1880, 1881, 1882, 1883, 1884, 1869, 1885, 1870, 1886, 1871,
     1862, 1873, 1874, 1875, 1863, 1872, 1864, 1887, 1859, 1859,
     1859, 1888, 1865, 1866, 1876, 1877, 1878, 1867, 1879, 1868,
     1880, 1881, 1882, 1883, 1884, 1869, 1885, 1889, 1886, 1890,
     1891, 1892, 1894, 1896, 1897, 1898, 1899, 1887, 1859, 1859,
     1900, 1888, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1893,
     1895, 1908, 1909, 1910, 1911, 1912, 1913, 1889, 1914, 1890,
     1891, 1892, 1894, 1896, 1897, 1898, 1899, 1915, 1916, 1917,

     1900, 1918, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1893,
     1895, 1908, 1909, 1910, 1911, 1912, 1913, 1919, 1914, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1927, 1915, 1916, 1917,
     1928, 1918, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1937, 1938, 1939, 1940, 1941, 1942, 4520, 1919, 1945, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1927, 4520, 4520, 4520,
     1928, 4520, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1937, 1938, 1939, 1940, 1941, 1942, 1943, 1943, 1945, 1943,
     1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
     1943, 1943, 1946, 1943, 1947, 1948, 1949, 1950, 1951, 1952,

     1953, 1954, 1955, 1956, 1943, 1943, 1943, 1943, 1943, 1957,
     1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
     1968, 1969, 1946, 1970, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1956, 1971, 1943, 1943, 1943, 1972, 1957,
     1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
     1968, 1969, 1973, 1970, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1971, 1943, 1943, 1984, 1972, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
     1996, 1997, 1973, 1998, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1999, 2000, 2001, 1984, 2002, 1985,

     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
     1996, 1997, 2003, 1998, 2004, 2005, 2006, 2007, 2008, 2009,
     2010, 2011, 2012, 2013, 1999, 2000, 2001, 2014, 2002, 2015,
     2016, 2017, 2019, 2020, 2021, 2022, 2018, 2023, 2024, 2025,
     2026, 2027, 2003, 2028, 2004, 2005, 2006, 2007, 2008, 2009,
     2010, 2011, 2012, 2013, 2029, 2030, 2031, 2014, 2032, 2015,
     2016, 2017, 2019, 2020, 2021, 2022, 2018, 2023, 2024, 2025,
     2026, 2027, 2033, 2028, 2034, 2035, 2036, 4520, 4520, 2039,
     4520, 4520, 4520, 4520, 2029, 2030, 2031, 4520, 2032, 4520,
     4520, 4520, 4520, 2040, 4520, 2041, 2042, 2043, 2044, 2045,

     2046, 2047, 2033, 2048, 2034, 2035, 2036, 2037, 2037, 2039,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2040, 2037, 2041, 2042, 2043, 2044, 2045,
     2046, 2047, 2049, 2048, 2050, 2037, 2037, 2037, 2037, 2037,
     2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
     2061, 2062, 2063, 2064, 2065, 2066, 4520, 2069, 2070, 2071,
     2072, 2073, 2049, 2067, 2050, 2074, 2037, 2037, 2037, 2075,
     2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
     2061, 2062, 2063, 2064, 2065, 2066, 2068, 2069, 2070, 2071,
     2072, 2073, 2076, 2077, 2078, 2074, 2037, 2037, 2079, 2075,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     2080, 2081, 2082, 2083, 2084, 2086, 2068, 2087, 2094, 2095,
     2096, 2088, 2076, 2077, 2078, 2089, 2091, 2097, 2079, 2098,
     2092, 2100, 2101, 2090, 2102, 2103, 2104, 2106, 2093, 2107,
     2080, 2081, 2082, 2083, 2084, 2086, 2108, 2087, 2094, 2095,
     2096, 2088, 2109, 4520, 4520, 2089, 2091, 2097, 4520, 2098,
     2092, 2100, 2101, 2090, 2102, 2103, 2104, 2106, 2093, 2107,
     4520, 2111, 2112, 2113, 2114, 2115, 2108, 2117, 2118, 2119,
     2120, 4520, 2109, 2099, 2099, 4520, 2099, 2099, 2099, 2099,
     2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2121,

     2099, 2111, 2112, 2113, 2114, 2115, 2122, 2117, 2118, 2119,
     2120, 2099, 2099, 2099, 2099, 2099, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2121,
     2136, 2137, 2138, 2139, 2142, 2143, 2122, 2144, 2145, 2146,
     2147, 2148, 2099, 2099, 2099, 4520, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 4520,
     2136, 2137, 2138, 2139, 2142, 2143, 2149, 2144, 2145, 2146,
     2147, 2148, 2099, 2099, 2105, 2105, 4520, 2105, 2105, 2105,
     2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105,
     2150, 2105, 2151, 2152, 2153, 2154, 2149, 2155, 2156, 2157,

     2158, 4520, 2105, 2105, 2105, 2105, 2105, 2159, 2163, 2164,
     2165, 2168, 2161, 2169, 2170, 2173, 2166, 2174, 2175, 2176,
     2150, 2177, 2151, 2152, 2153, 2154, 2160, 2155, 2156, 2157,
     2158, 2162, 2167, 2105, 2105, 2105, 4520, 2159, 2163, 2164,
     2165, 2168, 2161, 2169, 2170, 2173, 2166, 2174, 2175, 2176,
     4520, 2177, 4520, 4520, 2178, 2179, 2160, 2180, 2181, 2182,
     2183, 2162, 2167, 2105, 2105, 2140, 2140, 4520, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2184, 2140, 2171, 2178, 2179, 2185, 2180, 2181, 2182,
     2183, 2186, 2187, 2140, 2140, 2140, 2140, 2140, 2188, 2172,

     2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2184, 2200, 2171, 2201, 2203, 2185, 2204, 2205, 2206,
     2207, 2186, 2187, 2208, 2140, 2140, 2140, 2209, 2188, 2172,
     2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2210, 2200, 2211, 2201, 2203, 2212, 2204, 2205, 2206,
     2207, 2213, 4520, 2208, 2140, 2140, 4520, 2209, 2857, 2857,
     2857, 2857, 2857, 2857, 2857, 2857, 2857, 2857, 2215, 4520,
     2216, 2210, 2217, 2211, 2218, 2219, 2212, 2220, 2221, 2222,
     4520, 2213, 2202, 2202, 4520, 2202, 2202, 2202, 2202, 2202,
     2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202, 2215, 2202,

     2216, 2223, 2217, 2224, 2218, 2219, 2225, 2220, 2221, 2222,
     2202, 2202, 2202, 2202, 2202, 2226, 2227, 2228, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2236, 2237, 2247, 4520, 4520,
     2248, 2223, 2249, 2224, 4520, 2250, 2225, 2251, 2252, 2253,
     2254, 2202, 2202, 2202, 4520, 2226, 2227, 2228, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2236, 2237, 2247, 2239, 2243,
     2248, 2255, 2249, 2240, 2244, 2250, 2256, 2251, 2252, 2253,
     2254, 2202, 2202, 2241, 2245, 2257, 2258, 2242, 2246, 2259,
     2260, 2261, 2262, 2263, 2264, 2265, 2266, 2269, 2239, 2243,
     2267, 2255, 2268, 2240, 2244, 2270, 2256, 2271, 2272, 2273,

     2274, 2275, 2276, 2241, 2245, 2257, 2258, 2242, 2246, 2259,
     2260, 2261, 2262, 2263, 2264, 2265, 2266, 2269, 2277, 2278,
     2267, 2279, 2268, 2280, 2281, 2270, 2282, 2271, 2272, 2273,
     2274, 2275, 2276, 2283, 2284, 2285, 2286, 2287, 2288, 2289,
     2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2277, 2278,
     2298, 2279, 2299, 2280, 2281, 2300, 2282, 2301, 2302, 2303,
     2304, 2305, 2306, 2283, 2284, 2285, 2286, 2287, 2288, 2289,
     2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2307, 2308,
     2298, 2309, 2299, 2310, 2311, 2300, 2312, 2301, 2302, 2303,
     2304, 2305, 2306, 2313, 2314, 2315, 2316, 2317, 2318, 2319,

     2320, 2321, 2322, 2323, 2324, 2325, 2326, 4520, 2307, 2308,
     4520, 2309, 2339, 2310, 2311, 2340, 2312, 2341, 2342, 2343,
     4520, 2344, 2345, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2346, 2328,
     2329, 2333, 2339, 2334, 2335, 2340, 2330, 2341, 2342, 2343,
     2336, 2344, 2345, 2347, 2348, 2331, 2349, 2350, 2351, 2337,
     2352, 2332, 2354, 2355, 2356, 2338, 2357, 2327, 2346, 2328,
     2329, 2333, 2358, 2334, 2335, 2359, 2330, 2360, 2353, 2361,
     2336, 2362, 2363, 2347, 2348, 2331, 2349, 2350, 2351, 2337,
     2352, 2332, 2354, 2355, 2356, 2338, 2357, 2364, 2365, 2366,

     2367, 2368, 2358, 2369, 2370, 2359, 2371, 2360, 2353, 2361,
     2374, 2362, 2363, 2372, 2373, 2375, 2376, 2377, 2378, 2379,
     2380, 2381, 2382, 2384, 2385, 2388, 2390, 2364, 2365, 2366,
     2367, 2368, 2392, 2369, 2370, 2386, 2371, 2393, 2395, 2387,
     2374, 2396, 2397, 2372, 2373, 2375, 2376, 2377, 2378, 2379,
     2380, 2381, 2382, 2384, 2385, 2388, 2390, 2398, 2400, 2402,
     2404, 2399, 2392, 4520, 2405, 2386, 4520, 2393, 2395, 2387,
     4520, 2396, 2397, 4520, 4520, 4520, 4520, 4520, 2407, 4520,
     2408, 2409, 2410, 2411, 2412, 2413, 2414, 2398, 2400, 2402,
     2404, 2399, 2389, 2389, 2405, 2389, 2389, 2389, 2389, 2389,

     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2407, 2389,
     2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417,
     2389, 2389, 2389, 2389, 2389, 2418, 2419, 2420, 2421, 2423,
     2424, 2425, 2426, 2435, 2436, 2437, 2438, 2440, 2441, 2442,
     2443, 2445, 2446, 2449, 4520, 2447, 2422, 2415, 2416, 2417,
     2448, 2389, 2389, 2389, 4520, 2418, 2419, 2420, 2421, 2423,
     2424, 2425, 2426, 2435, 2436, 2437, 2438, 2440, 2441, 2442,
     2443, 2445, 2446, 2449, 2450, 2447, 2422, 2452, 4520, 2451,
     2448, 2389, 2389, 2391, 2391, 4520, 2391, 2391, 2391, 2391,
     2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2427,

     2391, 2431, 2453, 2454, 2450, 2455, 2456, 2452, 2428, 2451,
     2432, 2391, 2391, 2391, 2391, 2391, 2429, 2457, 2433, 2458,
     2459, 2430, 2460, 2434, 2461, 2462, 2463, 2464, 2465, 2427,
     2466, 2431, 2453, 2454, 2467, 2455, 2456, 2468, 2428, 2469,
     2432, 2470, 2391, 2391, 2391, 4520, 2429, 2457, 2433, 2458,
     2459, 2430, 2460, 2434, 2461, 2462, 2463, 2464, 2465, 4520,
     2466, 4520, 2471, 2472, 2467, 2473, 2474, 2468, 2476, 2469,
     2477, 2470, 2391, 2391, 2394, 2394, 4520, 2394, 2394, 2394,
     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
     2478, 2394, 2471, 2472, 2479, 2473, 2474, 2480, 2476, 2481,

     2477, 2482, 2394, 2394, 2394, 2394, 2394, 2483, 2484, 2485,
     2486, 2487, 2488, 2490, 2491, 2492, 2493, 2494, 2495, 2496,
     2478, 2497, 2498, 2499, 2479, 2501, 2502, 2480, 2503, 2481,
     2504, 2482, 2505, 2394, 2394, 2394, 4520, 2483, 2484, 2485,
     2486, 2487, 2488, 2490, 2491, 2492, 2493, 2494, 2495, 2496,
     4520, 2497, 2498, 2499, 2506, 2501, 2502, 2507, 2503, 2508,
     2504, 2509, 2505, 2394, 2394, 2439, 2439, 4520, 2439, 2439,
     2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439,
     2439, 2510, 2439, 2511, 2506, 2512, 2513, 2507, 2514, 2508,
     2515, 2509, 2516, 2439, 2439, 2439, 2439, 2439, 2517, 2518,

     2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528,
     2529, 2510, 2530, 2511, 2531, 2512, 2513, 2532, 2514, 2533,
     2515, 2534, 2516, 2535, 2439, 2439, 2439, 4520, 2517, 2518,
     2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528,
     2529, 4520, 2530, 4520, 2531, 2536, 2537, 2532, 2538, 2533,
     2539, 2534, 2540, 2535, 2439, 2439, 2489, 2489, 4520, 2489,
     2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489,
     2489, 2489, 2541, 2489, 2542, 2536, 2537, 2543, 2538, 2544,
     2539, 2545, 2540, 2546, 2489, 2489, 2489, 2489, 2489, 2547,
     2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557,

     2558, 2559, 2541, 2560, 2542, 2561, 2562, 2543, 2563, 2544,
     2564, 2545, 2565, 2546, 2566, 2489, 2489, 2489, 2567, 2547,
     2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557,
     2558, 2559, 2568, 2560, 2569, 2561, 2562, 2570, 2563, 2571,
     2564, 2572, 2565, 2573, 2566, 2489, 2489, 2574, 2567, 2575,
     2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585,
     2586, 2587, 2568, 2588, 2569, 2589, 2590, 2570, 2591, 2571,
     2592, 2572, 2593, 2573, 2594, 2595, 2596, 2574, 2597, 2575,
     2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585,
     2586, 2587, 2598, 2588, 2599, 2589, 2590, 2600, 2591, 2601,

     2592, 2602, 2593, 2603, 2594, 2595, 2596, 2604, 2597, 2605,
     2606, 2607, 2608, 2609, 2610, 2611, 2612, 2614, 2615, 2616,
     2618, 2619, 2598, 2620, 2599, 2621, 2622, 2600, 2623, 2601,
     2624, 2602, 2625, 2603, 2626, 2627, 2628, 2604, 2629, 2605,
     2606, 2607, 2608, 2609, 2610, 2611, 2612, 2614, 2615, 2616,
     2618, 2619, 2630, 2620, 2631, 2621, 2622, 2632, 2623, 2633,
     2624, 2634, 2625, 2635, 2626, 2627, 2628, 2636, 2629, 2637,
     2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
     2648, 2649, 2630, 2650, 2631, 2651, 2652, 2632, 2653, 2633,
     2656, 2634, 2654, 2635, 2657, 2655, 2658, 2636, 2659, 2637,

     2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
     2648, 2649, 2660, 2650, 2661, 2651, 2652, 2662, 2653, 2663,
     2656, 2664, 2654, 2665, 2657, 2655, 2658, 2666, 2659, 2667,
     2669, 2670, 2668, 2671, 2672, 2673, 2674, 2675, 2676, 2677,
     2678, 2679, 2660, 2680, 2661, 2681, 2682, 2662, 2683, 2663,
     2684, 2664, 2685, 2665, 2686, 2687, 2688, 2666, 2689, 2667,
     2669, 2670, 2668, 2671, 2672, 2673, 2674, 2675, 2676, 2677,
     2678, 2679, 2690, 2680, 2691, 2681, 2682, 2692, 2683, 2693,
     2684, 2694, 2685, 2695, 2686, 2687, 2688, 2696, 2689, 2697,
     2700, 2701, 2702, 2703, 2706, 2698, 2707, 2708, 2709, 2704,

     2710, 2711, 2690, 2712, 2691, 2713, 2714, 2692, 2699, 2693,
     2715, 2694, 2705, 2695, 2716, 2717, 2718, 2696, 2719, 2697,
     2700, 2701, 2702, 2703, 2706, 2698, 2707, 2708, 2709, 2704,
     2710, 2711, 2720, 2712, 2721, 2713, 2714, 2722, 2699, 2723,
     2715, 2724, 2705, 2725, 2716, 2717, 2718, 2726, 2719, 2727,
     2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737,
     2738, 2739, 2720, 2740, 2721, 2741, 2742, 2722, 2743, 2723,
     2744, 2724, 2745, 2725, 2746, 2747, 2748, 2726, 2749, 2727,
     2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737,
     2738, 2739, 2750, 2740, 2751, 2741, 2742, 2753, 2743, 2754,

     2744, 2755, 2745, 2756, 2746, 2747, 2748, 4520, 2749, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 4520,
     2758, 4520, 2750, 2759, 2751, 2760, 2761, 2753, 2762, 2754,
     2763, 2755, 4520, 2756, 2752, 2752, 4520, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2758, 2752, 2764, 2759, 2765, 2760, 2761, 2766, 2762, 2767,
     2763, 2768, 2752, 2752, 2752, 2752, 2752, 2769, 2770, 2771,
     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2764, 2784, 2765, 2785, 2786, 2766, 2787, 2767,
     2788, 2768, 2789, 2752, 2752, 2752, 2790, 2769, 2770, 2771,

     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2791, 2784, 2792, 2785, 2786, 2793, 2787, 2794,
     2788, 2795, 2789, 2752, 2752, 2796, 2790, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2791, 2812, 2792, 2813, 2814, 2793, 2815, 2794,
     2816, 2795, 2817, 2818, 2819, 2796, 2820, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2821, 2812, 2822, 2813, 2814, 2823, 2815, 2824,
     2816, 2825, 2817, 2818, 2819, 2826, 2820, 2827, 2828, 2829,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839,

     2840, 2841, 2821, 2842, 2822, 2843, 2844, 2823, 2845, 2824,
     2846, 2825, 2847, 2848, 2849, 2826, 2850, 2827, 2828, 2829,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839,
     2840, 2841, 2851, 2842, 2853, 2843, 2844, 2855, 2845, 4520,
     2846, 4520, 2847, 2848, 2849, 4520, 2850, 4520, 4520, 4520,
     4520, 2856, 2857, 2857, 2857, 2857, 2857, 2857, 2857, 2857,
     2857, 2857, 2851, 4520, 2853, 2852, 2852, 2855, 2852, 2852,
     2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852,
     2852, 2856, 2852, 2861, 2862, 2863, 2858, 2864, 2865, 2866,
     2867, 2868, 2870, 2852, 2852, 2852, 2852, 2852, 2859, 2859,

     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2872, 2873,
     2874, 2875, 2876, 2861, 2862, 2863, 2858, 2864, 2865, 2866,
     2867, 2868, 2870, 2877, 2852, 2852, 2852, 2878, 2880, 2882,
     2883, 2884, 2860, 4520, 4520, 2885, 4520, 4520, 2872, 2873,
     2874, 2875, 2876, 4520, 4520, 4520, 4520, 4520, 4520, 2886,
     4520, 2887, 2888, 2877, 2852, 2852, 2889, 2878, 2880, 2882,
     2883, 2884, 2860, 2869, 2869, 2885, 2869, 2869, 2869, 2869,
     2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2886,
     2869, 2887, 2888, 2890, 2891, 2892, 2889, 2893, 2894, 2895,
     2896, 2869, 2869, 2869, 2869, 2869, 2897, 2898, 2899, 2900,

     2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910,
     2911, 2912, 2913, 2890, 2891, 2892, 2914, 2893, 2894, 2895,
     2896, 2915, 2869, 2869, 2869, 4520, 2897, 2898, 2899, 2900,
     2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910,
     2911, 2912, 2913, 2916, 2917, 2918, 2914, 2919, 2920, 2921,
     2922, 2915, 2869, 2869, 2871, 2871, 4520, 2871, 2871, 2871,
     2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871,
     2923, 2871, 2924, 2916, 2917, 2918, 2925, 2919, 2920, 2921,
     2922, 2926, 2871, 2871, 2871, 2871, 2871, 2927, 2928, 2929,
     2930, 2931, 2932, 2933, 2934, 2935, 2937, 2938, 2939, 2940,

     2923, 2941, 2924, 2943, 2944, 2948, 2925, 2949, 2950, 2954,
     2955, 2926, 2956, 2871, 2871, 2871, 4520, 2927, 2928, 2929,
     2930, 2931, 2932, 2933, 2934, 2935, 2937, 2938, 2939, 2940,
     4520, 2941, 4520, 2943, 2944, 2948, 2957, 2949, 2950, 2954,
     2955, 4520, 2956, 2871, 2871, 2936, 2936, 4520, 2936, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936,
     2936, 2945, 2936, 2951, 2958, 2959, 2957, 2960, 2961, 2946,
     2962, 2952, 2963, 2936, 2936, 2936, 2936, 2936, 2964, 2947,
     2965, 2953, 2966, 2968, 2969, 2970, 2971, 2972, 2974, 2975,
     2976, 2945, 2977, 2951, 2958, 2959, 2978, 2960, 2961, 2946,

     2962, 2952, 2963, 2979, 2936, 2936, 2936, 2980, 2964, 2947,
     2965, 2953, 2966, 2968, 2969, 2970, 2971, 2972, 2974, 2975,
     2976, 2981, 2977, 2982, 2983, 2984, 2978, 2985, 2986, 2987,
     2988, 2989, 2990, 2979, 2936, 2936, 2991, 2980, 2992, 2993,
     2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003,
     3004, 2981, 3005, 2982, 2983, 2984, 3006, 2985, 2986, 2987,
     2988, 2989, 2990, 3007, 3008, 3009, 2991, 3010, 2992, 2993,
     2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003,
     3004, 3011, 3005, 3013, 3014, 3015, 3006, 3016, 3017, 3018,
     4520, 4520, 3021, 3007, 3008, 3009, 4520, 3010, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 3022, 4520, 3023, 3024,
     3025, 3011, 3026, 3013, 3014, 3015, 3027, 3016, 3017, 3018,
     3012, 3012, 3021, 3012, 3012, 3012, 3012, 3012, 3012, 3012,
     3012, 3012, 3012, 3012, 3012, 3012, 3022, 3012, 3023, 3024,
     3025, 3028, 3026, 3029, 3030, 3031, 3027, 3032, 3012, 3012,
     3012, 3012, 3012, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
     3040, 3041, 3020, 3043, 3045, 3042, 3046, 3047, 3048, 3049,
     3050, 3028, 3051, 3029, 3030, 3031, 3054, 3032, 3052, 3012,
     3012, 3012, 3053, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
     3040, 3041, 3020, 3043, 3045, 3042, 3046, 3047, 3048, 3049,

     3050, 3056, 3051, 3057, 3058, 3059, 3054, 3060, 3052, 3012,
     3012, 4520, 3053, 3044, 3044, 4520, 3044, 3044, 3044, 3044,
     3044, 3044, 3044, 3044, 3044, 3044, 3044, 3044, 3044, 3061,
     3044, 3056, 3062, 3057, 3058, 3059, 3063, 3060, 3065, 3066,
     3068, 3044, 3044, 3044, 3044, 3044, 3069, 3072, 3075, 3076,
     3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3061,
     3086, 3087, 3062, 3088, 3089, 3090, 3063, 3091, 3065, 3066,
     3068, 3092, 3044, 3044, 3044, 4520, 3069, 3072, 3075, 3076,
     3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 4520,
     3086, 3087, 3093, 3088, 3089, 3090, 3094, 3091, 3095, 3096,

     3097, 3092, 3044, 3044, 3064, 3064, 4520, 3064, 3064, 3064,
     3064, 3064, 3064, 3064, 3064, 3064, 3064, 3064, 3064, 3064,
     3098, 3064, 3093, 3099, 3100, 3101, 3094, 3102, 3095, 3096,
     3097, 3103, 3064, 3064, 3064, 3064, 3064, 3104, 3105, 3106,
     3107, 3108, 3109, 3110, 3111, 3112, 3071, 3113, 3114, 3115,
     3098, 3116, 3118, 3099, 3100, 3101, 3119, 3102, 3120, 3121,
     3123, 3103, 3124, 3064, 3064, 3064, 4520, 3104, 3105, 3106,
     3107, 3108, 3109, 3110, 3111, 3112, 3071, 3113, 3114, 3115,
     4520, 3116, 3118, 3125, 3129, 3130, 3119, 3131, 3120, 3121,
     3123, 3135, 3124, 3064, 3064, 3067, 3067, 4520, 3067, 3067,

     3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
     3067, 3126, 3067, 3125, 3129, 3130, 3136, 3131, 3137, 3127,
     3132, 3135, 3138, 3067, 3067, 3067, 3067, 3067, 3133, 3139,
     3140, 3141, 3142, 3143, 3144, 3145, 3146, 3074, 3147, 3148,
     3149, 3126, 3150, 3151, 3152, 3153, 3136, 3154, 3137, 3127,
     3132, 3155, 3138, 3156, 3067, 3067, 3067, 4520, 3133, 3139,
     3140, 3141, 3142, 3143, 3144, 3145, 3146, 3074, 3147, 3148,
     3149, 4520, 3150, 3151, 3152, 3153, 3157, 3154, 3158, 3159,
     3160, 3155, 3161, 3156, 3067, 3067, 3117, 3117, 4520, 3117,
     3117, 3117, 3117, 3117, 3117, 3117, 3117, 3117, 3117, 3117,

     3117, 3117, 3162, 3117, 3163, 3164, 3157, 3164, 3158, 3159,
     3160, 3166, 3161, 3169, 3117, 3117, 3117, 3117, 3117, 3170,
     3171, 3165, 3171, 3173, 3176, 3177, 3178, 3179, 3180, 3181,
     3182, 3183, 3162, 3184, 3163, 3164, 3172, 3164, 3185, 3186,
     3187, 3166, 4520, 3169, 3191, 3117, 3117, 3117, 4520, 3170,
     3171, 3165, 3171, 3173, 3176, 3177, 3178, 3179, 3180, 3181,
     3182, 3183, 4520, 3184, 4520, 3192, 3172, 3193, 3185, 3186,
     3187, 3189, 3190, 3194, 3191, 3117, 3117, 3128, 3128, 4520,
     3128, 3128, 3128, 3128, 3128, 3128, 3128, 3128, 3128, 3128,
     3128, 3128, 3128, 3195, 3128, 3192, 3196, 3193, 3197, 3198,

     3202, 3189, 3190, 3194, 3203, 3128, 3128, 3128, 3128, 3128,
     3200, 3201, 3204, 3205, 3206, 3207, 3208, 3209, 3209, 3216,
     3212, 3216, 3224, 3195, 3213, 3225, 3196, 3219, 3197, 3198,
     3202, 3220, 3210, 3226, 3203, 3217, 3128, 3128, 3128, 4520,
     3200, 3201, 3204, 3205, 3206, 3207, 3208, 3209, 3209, 3216,
     3212, 3216, 3224, 4520, 3213, 3225, 4520, 3219, 4520, 3228,
     4520, 3220, 3210, 3226, 3229, 3217, 3128, 3128, 3167, 3167,
     4520, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167,
     3167, 3167, 3167, 3167, 3212, 3167, 3219, 3230, 3213, 3228,
     3220, 3231, 3232, 3233, 3229, 3234, 3167, 3167, 3167, 3167,

     3167, 3235, 3236, 3214, 3237, 3221, 3238, 3241, 3242, 3243,
     3244, 3245, 3246, 3247, 3212, 3248, 3219, 3230, 3213, 3249,
     3220, 3231, 3232, 3233, 3250, 3234, 3251, 3167, 3167, 3167,
     4520, 3235, 3236, 3214, 3237, 3221, 3238, 3241, 3242, 3243,
     3244, 3245, 3246, 3247, 4520, 3248, 4520, 3252, 3253, 3249,
     3254, 3255, 3256, 3257, 3250, 3258, 3251, 3167, 3167, 3168,
     3168, 4520, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168,
     3168, 3168, 3168, 3168, 3168, 3259, 3168, 3252, 3253, 3260,
     3254, 3255, 3256, 3257, 3261, 3258, 3262, 3168, 3168, 3168,
     3168, 3168, 3263, 3264, 3265, 3270, 3266, 3271, 3272, 3277,

     3278, 3267, 3279, 3280, 3281, 3259, 3282, 3283, 3284, 3260,
     3285, 3268, 3286, 3287, 3261, 3269, 3262, 3288, 3168, 3168,
     3168, 4520, 3263, 3264, 3265, 3270, 3266, 3271, 3272, 3277,
     3278, 3267, 3279, 3280, 3281, 4520, 3282, 3283, 3284, 3289,
     3285, 3268, 3286, 3287, 3290, 3269, 3291, 3288, 3168, 3168,
     3188, 3188, 4520, 3188, 3188, 3188, 3188, 3188, 3188, 3188,
     3188, 3188, 3188, 3188, 3188, 3188, 3292, 3188, 3273, 3289,
     3293, 3294, 3295, 3274, 3290, 3296, 3291, 3297, 3188, 3188,
     3188, 3188, 3188, 3275, 3298, 3299, 3300, 3276, 3301, 3303,
     3305, 3306, 3302, 3307, 3308, 3309, 3292, 3311, 3273, 3310,

     3293, 3294, 3295, 3274, 3313, 3296, 3314, 3297, 3315, 3188,
     3188, 3188, 4520, 3275, 3298, 3299, 3300, 3276, 3301, 3303,
     3305, 3306, 3302, 3307, 3308, 3309, 4520, 3311, 4520, 3310,
     3316, 3317, 3318, 3319, 3313, 3320, 3314, 3321, 3315, 3188,
     3188, 3211, 3211, 4520, 3211, 3211, 3211, 3211, 3211, 3211,
     3211, 3211, 3211, 3211, 3211, 3211, 3211, 3324, 3211, 3325,
     3316, 3317, 3318, 3319, 3326, 3320, 3327, 3321, 3328, 3211,
     3211, 3211, 3211, 3211, 3322, 3323, 3329, 3330, 3331, 3332,
     3333, 3334, 3335, 3338, 3339, 3344, 3345, 3324, 3346, 3325,
     3349, 3347, 3350, 3355, 3326, 3348, 3327, 3356, 3328, 3357,

     3211, 3211, 3211, 4520, 3322, 3323, 3329, 3330, 3331, 3332,
     3333, 3334, 3335, 3338, 3339, 3344, 3345, 4520, 3346, 4520,
     3349, 3347, 3350, 3355, 4520, 3348, 3360, 3356, 4520, 3357,
     3211, 3211, 3215, 3215, 4520, 3215, 3215, 3215, 3215, 3215,
     3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3358, 3215,
     3361, 3362, 3359, 3340, 3351, 3364, 3360, 3341, 3352, 3365,
     3215, 3215, 3215, 3215, 3215, 3342, 3353, 3366, 3368, 3369,
     3370, 3371, 3372, 3373, 3374, 3375, 3343, 3354, 3358, 3376,
     3361, 3362, 3359, 3340, 3351, 3364, 3377, 3341, 3352, 3365,
     3380, 3215, 3215, 3215, 4520, 3342, 3353, 3366, 3368, 3369,

     3370, 3371, 3372, 3373, 3374, 3375, 3343, 3354, 4520, 3376,
     4520, 3381, 3382, 3383, 3384, 3385, 3377, 3386, 3387, 3388,
     3380, 3215, 3215, 3223, 3223, 4520, 3223, 3223, 3223, 3223,
     3223, 3223, 3223, 3223, 3223, 3223, 3223, 3223, 3223, 3389,
     3223, 3381, 3382, 3383, 3384, 3385, 3390, 3386, 3387, 3388,
     3391, 3223, 3223, 3223, 3223, 3223, 3392, 3393, 3395, 3396,
     3397, 3398, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3389,
     3407, 3408, 3409, 3410, 3411, 3412, 3390, 3413, 3414, 3415,
     3391, 3416, 3223, 3223, 3223, 4520, 3392, 3393, 3395, 3396,
     3397, 3398, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 4520,

     3407, 3408, 3409, 3410, 3411, 3412, 3417, 3413, 3414, 3415,
     3418, 3416, 3223, 3223, 3239, 3239, 4520, 3239, 3239, 3239,
     3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239, 3239,
     3419, 3239, 3420, 3423, 3424, 3426, 3417, 3427, 3428, 3429,
     3418, 3430, 3239, 3239, 3239, 3239, 3239, 3431, 3433, 3434,
     3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444,
     3419, 3445, 3420, 3423, 3424, 3426, 3446, 3427, 3428, 3429,
     3447, 3430, 3448, 3239, 3239, 3239, 4520, 3431, 3433, 3434,
     3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444,
     4520, 3445, 4520, 3449, 3450, 3451, 3446, 3452, 3453, 3454,

     3447, 3455, 3448, 3239, 3239, 3304, 3304, 4520, 3304, 3304,
     3304, 3304, 3304, 3304, 3304, 3304, 3304, 3304, 3304, 3304,
     3304, 3456, 3304, 3449, 3450, 3451, 3457, 3452, 3453, 3454,
     3458, 3455, 3459, 3304, 3304, 3304, 3304, 3304, 3460, 3461,
     3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471,
     3472, 3456, 3473, 3474, 3475, 3476, 3457, 3477, 3478, 3479,
     3458, 3480, 3459, 3481, 3304, 3304, 3304, 4520, 3460, 3461,
     3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471,
     3472, 4520, 3473, 3474, 3475, 3476, 3482, 3477, 3478, 3479,
     3483, 3480, 3484, 3481, 3304, 3304, 3336, 3336, 4520, 3336,

     3336, 3336, 3336, 3336, 3336, 3336, 3336, 3336, 3336, 3336,
     3336, 3336, 3485, 3336, 3486, 3487, 3482, 3488, 3489, 3490,
     3483, 3491, 3484, 3492, 3336, 3336, 3336, 3336, 3336, 3493,
     3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503,
     3504, 3505, 3485, 3506, 3486, 3487, 3507, 3488, 3489, 3490,
     3508, 3491, 3509, 3492, 3510, 3336, 3336, 3336, 4520, 3493,
     3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503,
     3504, 3505, 4520, 3506, 4520, 3511, 3507, 3512, 3513, 3514,
     3508, 3515, 3509, 3516, 3510, 3336, 3336, 3363, 3363, 4520,
     3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363,

     3363, 3363, 3363, 3517, 3363, 3511, 3518, 3512, 3513, 3514,
     3519, 3515, 3520, 3516, 3521, 3363, 3363, 3363, 3363, 3363,
     3522, 3523, 3524, 3525, 3526, 3527, 3528, 3531, 3532, 3533,
     3535, 3536, 3537, 3517, 3538, 3539, 3518, 3540, 3542, 3543,
     3519, 3544, 3520, 3545, 3521, 3546, 3363, 3363, 3363, 4520,
     3522, 3523, 3524, 3525, 3526, 3527, 3528, 3531, 3532, 3533,
     3535, 3536, 3537, 4520, 3538, 3539, 3548, 3540, 3542, 3543,
     3550, 3544, 3551, 3545, 3553, 3546, 3363, 3363, 3378, 3378,
     4520, 3378, 3378, 3378, 3378, 3378, 3378, 3378, 3378, 3378,
     3378, 3378, 3378, 3378, 3555, 3378, 3548, 3556, 3557, 3558,

     3550, 3559, 3551, 3561, 3553, 3562, 3378, 3378, 3378, 3378,
     3378, 3563, 3564, 3567, 3568, 3569, 3571, 3572, 3573, 3574,
     3577, 3578, 3579, 3580, 3555, 3583, 3581, 3556, 3557, 3558,
     3584, 3559, 3582, 3561, 3585, 3562, 3588, 3378, 3378, 3378,
     4520, 3563, 3564, 3567, 3568, 3569, 3571, 3572, 3573, 3574,
     3577, 3578, 3579, 3580, 4520, 3583, 3581, 3586, 3589, 3590,
     3584, 3591, 3582, 3587, 3585, 3592, 3588, 3378, 3378, 3394,
     3394, 4520, 3394, 3394, 3394, 3394, 3394, 3394, 3394, 3394,
     3394, 3394, 3394, 3394, 3394, 3593, 3394, 3586, 3589, 3590,
     3594, 3591, 3595, 3587, 3596, 3592, 3598, 3394, 3394, 3394,

     3394, 3394, 3599, 3600, 3602, 3603, 3604, 3605, 3606, 3607,
     3608, 3609, 3610, 3611, 3612, 3593, 3613, 3614, 3615, 3616,
     3594, 3617, 3595, 3618, 3596, 3619, 3598, 3620, 3394, 3394,
     3394, 4520, 3599, 3600, 3602, 3603, 3604, 3605, 3606, 3607,
     3608, 3609, 3610, 3611, 3612, 4520, 3613, 3614, 3615, 3616,
     3621, 3617, 3622, 3618, 3623, 3619, 3626, 3620, 3394, 3394,
     3421, 3421, 4520, 3421, 3421, 3421, 3421, 3421, 3421, 3421,
     3421, 3421, 3421, 3421, 3421, 3421, 3627, 3421, 3628, 3629,
     3621, 3630, 3622, 3633, 3623, 3634, 3626, 3631, 3421, 3421,
     3421, 3421, 3421, 3632, 3635, 3636, 3637, 3638, 3639, 3641,

     3642, 3643, 3644, 3645, 3640, 3648, 3627, 3651, 3628, 3629,
     4520, 3630, 4520, 3633, 3652, 3634, 3653, 3631, 3654, 3421,
     3421, 3421, 4520, 3632, 3635, 3636, 3637, 3638, 3639, 3641,
     3642, 3643, 3644, 3645, 3640, 3648, 4520, 3651, 4520, 3646,
     3647, 3649, 3650, 4520, 3652, 3659, 3653, 4520, 3654, 3421,
     3421, 3425, 3425, 4520, 3425, 3425, 3425, 3425, 3425, 3425,
     3425, 3425, 3425, 3425, 3425, 3425, 3425, 4520, 3425, 3646,
     3647, 3649, 3650, 3655, 3665, 3659, 3668, 3656, 3666, 3425,
     3425, 3425, 3425, 3425, 3670, 3657, 3663, 3664, 3675, 3679,
     3680, 3684, 3686, 3687, 3688, 3689, 3658, 3667, 4520, 3690,

     3691, 3692, 3693, 3655, 3665, 3681, 3668, 3656, 3666, 3682,
     3425, 3425, 3425, 4520, 3670, 3657, 3663, 3664, 3675, 3679,
     3680, 3684, 3686, 3687, 3688, 3689, 3658, 3667, 3683, 3690,
     3691, 3692, 3693, 4520, 3694, 3681, 3695, 4520, 3696, 3682,
     3425, 3425, 3529, 3529, 4520, 3529, 3529, 3529, 3529, 3529,
     3529, 3529, 3529, 3529, 3529, 3529, 3529, 3529, 3683, 3529,
     3697, 3698, 3699, 3671, 3694, 3700, 3695, 3672, 3696, 3701,
     3529, 3529, 3529, 3529, 3529, 3673, 3702, 3704, 3705, 3706,
     3708, 3709, 3710, 3711, 3703, 3712, 3674, 3707, 3713, 3714,
     3697, 3698, 3699, 3671, 3715, 3700, 3716, 3672, 3717, 3701,

     3718, 3529, 3529, 3529, 4520, 3673, 3702, 3704, 3705, 3706,
     3708, 3709, 3710, 3711, 3703, 3712, 3674, 3707, 3713, 3714,
     4520, 3719, 3720, 3721, 3715, 3722, 3716, 3723, 3717, 3724,
     3718, 3529, 3529, 3534, 3534, 4520, 3534, 3534, 3534, 3534,
     3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3725,
     3534, 3719, 3720, 3721, 3726, 3722, 3727, 3723, 3728, 3724,
     3729, 3534, 3534, 3534, 3534, 3534, 3730, 3731, 3732, 3733,
     3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3725,
     3743, 3744, 3745, 3746, 3726, 3747, 3727, 3749, 3728, 3750,
     3729, 4520, 3534, 3534, 3534, 4520, 3730, 3731, 3732, 3733,

     3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 4520,
     3743, 3744, 3745, 3746, 3753, 3747, 3754, 3749, 3756, 3750,
     3751, 3752, 3534, 3534, 3547, 3547, 4520, 3547, 3547, 3547,
     3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547,
     3757, 3547, 3758, 3759, 3753, 3760, 3754, 3762, 3756, 3763,
     3751, 3752, 3547, 3547, 3547, 3547, 3547, 3764, 3765, 3766,
     3767, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777,
     3757, 3778, 3758, 3759, 3779, 3760, 3782, 3762, 3783, 3763,
     3784, 3785, 3786, 3547, 3547, 3547, 4520, 3764, 3765, 3766,
     3767, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777,

     4520, 3778, 4520, 3787, 3779, 3788, 3782, 3789, 3783, 3790,
     3784, 3785, 3786, 3547, 3547, 3549, 3549, 4520, 3549, 3549,
     3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3549,
     3549, 3791, 3549, 3787, 3792, 3788, 3793, 3789, 3794, 3790,
     3795, 3796, 3797, 3549, 3549, 3549, 3549, 3549, 3798, 3799,
     3800, 3801, 3802, 3803, 3805, 3806, 3807, 3808, 3809, 3810,
     3811, 3791, 3813, 3814, 3792, 3815, 3793, 3816, 3794, 3817,
     3795, 3796, 3797, 3818, 3549, 3549, 3549, 4520, 3798, 3799,
     3800, 3801, 3802, 3803, 3805, 3806, 3807, 3808, 3809, 3810,
     3811, 4520, 3813, 3814, 3819, 3815, 3820, 3816, 3821, 3817,

     3822, 3823, 3825, 3818, 3549, 3549, 3560, 3560, 4520, 3560,
     3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560,
     3560, 3560, 3826, 3560, 3819, 3827, 3820, 3828, 3821, 3829,
     3822, 3823, 3825, 3830, 3560, 3560, 3560, 3560, 3560, 3831,
     3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842,
     3843, 3844, 3826, 3845, 3846, 3827, 3847, 3828, 3848, 3829,
     3849, 3850, 3851, 3830, 3852, 3560, 3560, 3560, 4520, 3831,
     3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842,
     3843, 3844, 4520, 3845, 3846, 3853, 3847, 3854, 3848, 3855,
     3849, 3850, 3851, 3856, 3852, 3560, 3560, 3565, 3565, 4520,

     3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565,
     3565, 3565, 3565, 3857, 3565, 3853, 3858, 3854, 3859, 3855,
     3860, 3861, 3862, 3856, 3863, 3565, 3565, 3565, 3565, 3565,
     3864, 3865, 3866, 3867, 3868, 3869, 3870, 3873, 3874, 3876,
     3877, 3878, 3871, 3857, 3882, 3883, 3858, 3885, 3859, 3886,
     3860, 3861, 3862, 3887, 3863, 3872, 3565, 3565, 3565, 4520,
     3864, 3865, 3866, 3867, 3868, 3869, 3870, 3873, 3874, 3876,
     3877, 3878, 3871, 4520, 3882, 3883, 3888, 3885, 3889, 3886,
     4520, 3890, 3891, 3887, 3894, 3872, 3565, 3565, 3566, 3566,
     4520, 3566, 3566, 3566, 3566, 3566, 3566, 3566, 3566, 3566,

     3566, 3566, 3566, 3566, 3879, 3566, 3888, 3892, 3889, 3897,
     3880, 3890, 3891, 3893, 3894, 3899, 3566, 3566, 3566, 3566,
     3566, 3900, 3901, 3881, 3904, 3907, 3908, 3909, 3911, 3912,
     3913, 3914, 3915, 3916, 3879, 3917, 3918, 3892, 3919, 3897,
     3880, 3920, 3921, 3893, 3922, 3899, 3923, 3566, 3566, 3566,
     4520, 3900, 3901, 3881, 3904, 3907, 3908, 3909, 3911, 3912,
     3913, 3914, 3915, 3916, 4520, 3917, 3918, 3924, 3919, 3925,
     3926, 3920, 3921, 3927, 3922, 3928, 3923, 3566, 3566, 3624,
     3624, 4520, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3929, 3624, 3924, 3930, 3925,

     3926, 3931, 3932, 3927, 3933, 3928, 3934, 3624, 3624, 3624,
     3624, 3624, 3935, 3936, 3940, 3937, 3941, 3942, 3943, 3944,
     3945, 3946, 3947, 3938, 3951, 3929, 3952, 3953, 3930, 3954,
     3955, 3931, 3932, 3939, 3933, 3956, 3934, 3957, 3624, 3624,
     3624, 4520, 3935, 3936, 3940, 3937, 3941, 3942, 3943, 3944,
     3945, 3946, 3947, 3938, 3951, 4520, 3952, 3953, 3959, 3954,
     3955, 3960, 3962, 3939, 4520, 3956, 3963, 3957, 3624, 3624,
     3660, 3660, 4520, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3948, 3660, 3959, 3964,
     3966, 3960, 3962, 3967, 3949, 3969, 3963, 3978, 3660, 3660,

     3660, 3660, 3660, 3979, 3950, 3988, 3989, 3990, 3991, 3992,
     3993, 3994, 3995, 3996, 3997, 3998, 3948, 3999, 4000, 3964,
     3966, 4001, 4002, 3967, 3949, 3969, 4003, 3978, 4004, 3660,
     3660, 3660, 4520, 3979, 3950, 3988, 3989, 3990, 3991, 3992,
     3993, 3994, 3995, 3996, 3997, 3998, 4520, 3999, 4000, 4005,
     4006, 4001, 4002, 4007, 4008, 4009, 4003, 4010, 4004, 3660,
     3660, 3661, 3661, 4520, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 4011, 3661, 4005,
     4006, 4013, 4014, 4007, 4008, 4009, 4015, 4010, 4016, 3661,
     3661, 3661, 3661, 3661, 4017, 4018, 4019, 4020, 4021, 4022,

     4024, 4025, 4026, 4027, 4028, 4029, 4030, 4011, 4031, 4032,
     4033, 4013, 4014, 4034, 4035, 4036, 4015, 4037, 4016, 4038,
     3661, 3661, 3661, 4520, 4017, 4018, 4019, 4020, 4021, 4022,
     4024, 4025, 4026, 4027, 4028, 4029, 4030, 4520, 4031, 4032,
     4033, 4039, 4040, 4034, 4035, 4036, 4041, 4037, 4042, 4038,
     3661, 3661, 3662, 3662, 4520, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 4043, 3662,
     4044, 4039, 4040, 4045, 4046, 4047, 4041, 4048, 4042, 4049,
     3662, 3662, 3662, 3662, 3662, 4050, 4051, 4052, 4053, 4054,
     4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4043, 4063,

     4044, 4064, 4065, 4045, 4046, 4047, 4066, 4048, 4067, 4049,
     4068, 3662, 3662, 3662, 4520, 4050, 4051, 4052, 4053, 4054,
     4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4520, 4063,
     4520, 4064, 4065, 4069, 4070, 4071, 4066, 4072, 4067, 4074,
     4068, 3662, 3662, 3669, 3669, 4520, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 4075,
     3669, 4076, 4077, 4069, 4070, 4071, 4078, 4072, 4079, 4074,
     4080, 3669, 3669, 3669, 3669, 3669, 4081, 4082, 4084, 4085,
     4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4075,
     4095, 4076, 4077, 4096, 4098, 4099, 4078, 4100, 4079, 4101,

     4080, 4102, 3669, 3669, 3669, 4520, 4081, 4082, 4084, 4085,
     4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4520,
     4095, 4520, 4103, 4096, 4098, 4099, 4104, 4100, 4105, 4101,
     4107, 4102, 3669, 3669, 3748, 3748, 4520, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     4108, 3748, 4103, 4109, 4110, 4111, 4104, 4112, 4105, 4113,
     4107, 4114, 3748, 3748, 3748, 3748, 3748, 4115, 4118, 4119,
     4120, 4121, 4123, 4124, 4125, 4128, 4129, 4130, 4131, 4133,
     4108, 4134, 4135, 4109, 4110, 4111, 4136, 4112, 4137, 4113,
     4138, 4114, 4139, 3748, 3748, 3748, 4520, 4115, 4118, 4119,

     4120, 4121, 4123, 4124, 4125, 4128, 4129, 4130, 4131, 4133,
     4520, 4134, 4135, 4140, 4141, 4142, 4136, 4143, 4137, 4144,
     4138, 4145, 4139, 3748, 3748, 3755, 3755, 4520, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 4146, 3755, 4140, 4141, 4142, 4147, 4143, 4148, 4144,
     4149, 4145, 4150, 3755, 3755, 3755, 3755, 3755, 4151, 4152,
     4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162,
     4163, 4146, 4164, 4165, 4166, 4167, 4147, 4168, 4148, 4169,
     4149, 4170, 4150, 4171, 3755, 3755, 3755, 4520, 4151, 4152,
     4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162,

     4163, 4520, 4164, 4165, 4166, 4167, 4172, 4168, 4173, 4169,
     4174, 4170, 4175, 4171, 3755, 3755, 3780, 3780, 4520, 3780,
     3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780,
     3780, 3780, 4176, 3780, 4177, 4178, 4172, 4179, 4173, 4180,
     4174, 4181, 4175, 4182, 3780, 3780, 3780, 3780, 3780, 4183,
     4184, 4185, 4187, 4188, 4189, 4190, 4191, 4186, 4192, 4193,
     4194, 4195, 4176, 4198, 4177, 4178, 4196, 4179, 4199, 4180,
     4200, 4181, 4197, 4182, 4201, 3780, 3780, 3780, 4520, 4183,
     4184, 4185, 4187, 4188, 4189, 4190, 4191, 4186, 4192, 4193,
     4194, 4195, 4520, 4198, 4520, 4202, 4196, 4203, 4199, 4204,

     4200, 4205, 4197, 4206, 4201, 3780, 3780, 3804, 3804, 4520,
     3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804,
     3804, 3804, 3804, 4207, 3804, 4202, 4208, 4203, 4209, 4204,
     4210, 4205, 4211, 4206, 4212, 3804, 3804, 3804, 3804, 3804,
     4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4223,
     4224, 4225, 4226, 4207, 4227, 4228, 4208, 4229, 4209, 4230,
     4210, 4231, 4211, 4233, 4212, 4234, 3804, 3804, 3804, 4520,
     4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4223,
     4224, 4225, 4226, 4520, 4227, 4228, 4235, 4229, 4236, 4230,
     4237, 4231, 4238, 4233, 4239, 4234, 3804, 3804, 3824, 3824,

     4520, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
     3824, 3824, 3824, 3824, 4240, 3824, 4235, 4241, 4236, 4242,
     4237, 4243, 4238, 4244, 4239, 4245, 3824, 3824, 3824, 3824,
     3824, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254,
     4255, 4256, 4257, 4258, 4240, 4259, 4260, 4241, 4520, 4242,
     4263, 4243, 4264, 4244, 4265, 4245, 4266, 3824, 3824, 3824,
     4520, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254,
     4255, 4256, 4257, 4258, 4520, 4259, 4260, 4261, 4262, 4267,
     4263, 4268, 4264, 4269, 4265, 4270, 4266, 3824, 3824, 3875,
     3875, 4520, 3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875,

     3875, 3875, 3875, 3875, 3875, 4271, 3875, 4261, 4262, 4267,
     4272, 4268, 4273, 4269, 4274, 4270, 4275, 3875, 3875, 3875,
     3875, 3875, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283,
     4284, 4285, 4286, 4287, 4288, 4271, 4289, 4290, 4291, 4292,
     4272, 4293, 4273, 4294, 4274, 4295, 4275, 4296, 3875, 3875,
     3875, 4520, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283,
     4284, 4285, 4286, 4287, 4288, 4520, 4289, 4290, 4291, 4292,
     4297, 4293, 4298, 4294, 4299, 4295, 4301, 4296, 3875, 3875,
     3895, 3895, 4520, 3895, 3895, 3895, 3895, 3895, 3895, 3895,
     3895, 3895, 3895, 3895, 3895, 3895, 4302, 3895, 4303, 4304,

     4297, 4305, 4298, 4306, 4299, 4307, 4301, 4308, 3895, 3895,
     3895, 3895, 3895, 4310, 4311, 4312, 4313, 4314, 4315, 4316,
     4317, 4319, 4321, 4323, 4328, 4326, 4302, 4329, 4303, 4304,
     4327, 4305, 4330, 4306, 4331, 4307, 4332, 4308, 4333, 3895,
     3895, 3895, 4520, 4310, 4311, 4312, 4313, 4314, 4315, 4316,
     4317, 4319, 4321, 4323, 4328, 4326, 4520, 4329, 4520, 4334,
     4327, 4337, 4330, 4338, 4331, 4339, 4332, 4340, 4333, 3895,
     3895, 3896, 3896, 4520, 3896, 3896, 3896, 3896, 3896, 3896,
     3896, 3896, 3896, 3896, 3896, 3896, 3896, 4335, 3896, 4334,
     4341, 4337, 4336, 4338, 4342, 4339, 4343, 4340, 4350, 3896,

     3896, 3896, 3896, 3896, 4357, 4358, 4359, 4344, 4345, 4360,
     4346, 4362, 4347, 4363, 4361, 4364, 4365, 4335, 4366, 4348,
     4341, 4358, 4336, 4367, 4342, 4368, 4343, 4349, 4350, 4360,
     3896, 3896, 3896, 4520, 4357, 4358, 4359, 4344, 4345, 4360,
     4346, 4362, 4347, 4363, 4361, 4364, 4365, 4520, 4366, 4348,
     4369, 4358, 4370, 4367, 4520, 4368, 4520, 4349, 4520, 4360,
     3896, 3896, 3898, 3898, 4520, 3898, 3898, 3898, 3898, 3898,
     3898, 3898, 3898, 3898, 3898, 3898, 3898, 3898, 4371, 3898,
     4369, 4372, 4370, 4351, 4352, 4373, 4353, 4374, 4354, 4375,
     3898, 3898, 3898, 3898, 3898, 4355, 4376, 4377, 4378, 4379,

     4380, 4381, 4382, 4356, 4383, 4384, 4385, 4386, 4371, 4387,
     4388, 4372, 4389, 4351, 4352, 4373, 4353, 4374, 4354, 4375,
     4390, 3898, 3898, 3898, 4520, 4355, 4376, 4377, 4378, 4379,
     4380, 4381, 4382, 4356, 4383, 4384, 4385, 4386, 4520, 4387,
     4388, 4391, 4389, 4392, 4393, 4394, 4395, 4397, 4398, 4399,
     4390, 3898, 3898, 3906, 3906, 4520, 3906, 3906, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 4400,
     3906, 4391, 4401, 4392, 4393, 4394, 4395, 4397, 4398, 4399,
     4403, 3906, 3906, 3906, 3906, 3906, 4404, 4405, 4406, 4407,
     4408, 4409, 4410, 4412, 4413, 4414, 4415, 4416, 4418, 4400,

     4419, 4420, 4401, 4421, 4422, 4423, 4424, 4425, 4426, 4427,
     4403, 4428, 3906, 3906, 3906, 4520, 4404, 4405, 4406, 4407,
     4408, 4409, 4410, 4412, 4413, 4414, 4415, 4416, 4418, 4520,
     4419, 4420, 4429, 4421, 4422, 4423, 4424, 4425, 4426, 4427,
     4431, 4428, 3906, 3906, 3958, 3958, 4520, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     4432, 3958, 4429, 4434, 4435, 4437, 4438, 4440, 4441, 4442,
     4431, 4443, 3958, 3958, 3958, 3958, 3958, 4444, 4445, 4446,
     4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4462,
     4432, 4456, 4457, 4434, 4435, 4437, 4438, 4440, 4441, 4442,

     4463, 4443, 4464, 3958, 3958, 3958, 4520, 4444, 4445, 4446,
     4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4462,
     4520, 4456, 4457, 4458, 4459, 4460, 4461, 4465, 4466, 4467,
     4463, 4468, 4464, 3958, 3958, 3961, 3961, 4520, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 4469, 3961, 4458, 4459, 4460, 4461, 4465, 4466, 4467,
     4470, 4468, 4471, 3961, 3961, 3961, 3961, 3961, 4472, 4473,
     4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483,
     4484, 4469, 4485, 4486, 4487, 4488, 4489, 4491, 4494, 4520,
     4470, 4496, 4471, 4498, 3961, 3961, 3961, 4520, 4472, 4473,

     4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483,
     4484, 4499, 4485, 4486, 4487, 4488, 4489, 4491, 4494, 4495,
     4520, 4496, 4497, 4498, 3961, 3961, 3970, 3971, 4500, 3972,
     4501, 3973, 4502, 4503, 4494, 4504, 4505, 4496, 3974, 4506,
     4507, 4499, 4508, 4509, 4510, 3975, 3976, 4511, 4512, 4495,
     3977, 4520, 4497, 4513, 4520, 4514, 3970, 3971, 4500, 3972,
     4501, 3973, 4502, 4503, 4494, 4504, 4505, 4496, 3974, 4506,
     4507, 4520, 4508, 4509, 4510, 3975, 3976, 4511, 4512, 4515,
     3977, 3980, 3981, 4513, 3982, 4514, 3983, 4516, 4517, 4518,
     4519, 4520, 4520, 3984, 4520, 4520, 4520, 4520, 4520, 4520,

     3985, 3986, 4520, 4520, 4520, 3987, 4520, 4520, 4520, 4515,
     4520, 3980, 3981, 4520, 3982, 4520, 3983, 4516, 4517, 4518,
     4519, 4520, 4520, 3984, 4520, 4520, 4520, 4520, 4520, 4520,
     3985, 3986, 4520, 4520, 4520, 3987, 4012, 4012, 4520, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4520, 4012, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4012, 4012, 4012, 4012, 4012, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4012, 4012, 4012, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4012, 4012, 4073, 4073, 4520,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073,
     4073, 4073, 4073, 4520, 4073, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4073, 4073, 4073, 4073, 4073,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4073, 4073, 4073, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4073, 4073, 4097, 4097,
     4520, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097,
     4097, 4097, 4097, 4097, 4520, 4097, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4097, 4097, 4097, 4097,
     4097, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4097, 4097, 4097,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4097, 4097, 4116,
     4116, 4520, 4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116,
     4116, 4116, 4116, 4116, 4116, 4520, 4116, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4116, 4116, 4116,
     4116, 4116, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4116, 4116,
     4116, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4116, 4116,

     4117, 4117, 4520, 4117, 4117, 4117, 4117, 4117, 4117, 4117,
     4117, 4117, 4117, 4117, 4117, 4117, 4520, 4117, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4117, 4117,
     4117, 4117, 4117, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4117,
     4117, 4117, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4117,
     4117, 4122, 4122, 4520, 4122, 4122, 4122, 4122, 4122, 4122,

     4122, 4122, 4122, 4122, 4122, 4122, 4122, 4520, 4122, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4122,
     4122, 4122, 4122, 4122, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4122, 4122, 4122, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4122, 4122, 4222, 4222, 4520, 4222, 4222, 4222, 4222, 4222,
     4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4520, 4222,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4222, 4222, 4222, 4222, 4222, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4222, 4222, 4222, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4222, 4222, 4300, 4300, 4520, 4300, 4300, 4300, 4300,
     4300, 4300, 4300, 4300, 4300, 4300, 4300, 4300, 4300, 4520,
     4300, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4300, 4300, 4300, 4300, 4300, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4300, 4300, 4300, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4300, 4300, 4318, 4318, 4520, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318,
     4520, 4318, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4318, 4318, 4318, 4318, 4318, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4318, 4318, 4318, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4318, 4318, 4322, 4322, 4520, 4322, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322,
     4322, 4520, 4322, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4322, 4322, 4322, 4322, 4322, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4325,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4322, 4322, 4322, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4325,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4322, 4322, 4396, 4396, 4520, 4396,
     4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396,
     4396, 4396, 4520, 4396, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4396, 4396, 4396, 4396, 4396, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4396, 4396, 4396, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4396, 4396, 4411, 4411, 4520,
     4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411,
     4411, 4411, 4411, 4520, 4411, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4411, 4411, 4411, 4411, 4411,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4411, 4411, 4411, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4411, 4411, 4430, 4430,
     4520, 4430, 4430, 4430, 4430, 4430, 4430, 4430, 4430, 4430,
     4430, 4430, 4430, 4430, 4520, 4430, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4430, 4430, 4430, 4430,
     4430, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4430, 4430, 4430,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4430, 4430, 4433,
     4433, 4520, 4433, 4433, 4433, 4433, 4433, 4433, 4433, 4433,
     4433, 4433, 4433, 4433, 4433, 4520, 4433, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4433, 4433, 4433,
     4433, 4433, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4433, 4433,
     4433, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4433, 4433,
     4490, 4490, 4520, 4490, 4490, 4490, 4490, 4490, 4490, 4490,
     4490, 4490, 4490, 4490, 4490, 4490, 4520, 4490, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4490, 4490,
     4490, 4490, 4490, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4493, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4490,
     4490, 4490, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4493, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4490,

     4490,   76,   76,   76,   76,   76,   84,   84,   84,   84,
       84,   88,   88,  278, 4520,  278,  278,  278,  375,  375,
      375,  381, 4520,  381,  381,  381,  474, 4520,  474,  474,
      474,  528, 4520,  528,  528,  528,  583,  583,  583,  583,
      583,  634, 4520,  634,  634,  634,  640, 4520,  640,  640,
      640,  642, 4520,  642,  642,  642,  651, 4520,  651,  651,
      651,  669, 4520,  669,  669,  669,  695, 4520,  695,  695,
      695,  762, 4520,  762,  762,  762,  786, 4520,  786,  786,
      786,  820, 4520,  820,  820,  820,  963, 4520,  963,  963,
      963, 1048, 4520, 1048, 1048, 1048, 1117, 4520, 1117, 1117,

     1117, 1192, 4520, 1192, 1192, 1192, 1204, 4520, 1204, 1204,
     1204, 1215, 4520, 1215, 1215, 1215, 1294, 4520, 1294, 1294,
     1294, 1523, 4520, 1523, 1523, 1523, 1553, 4520, 1553, 1553,
     1553, 1567, 4520, 1567, 1567, 1567, 1580, 4520, 1580, 1580,
     1580, 1701, 4520, 1701, 1701, 1701, 1775, 4520, 1775, 1775,
     1775, 1860, 4520, 1860, 1860, 1860, 1944, 4520, 1944, 1944,
     1944, 2038, 4520, 2038, 2038, 2038, 2099, 4520, 2099, 2099,
     2099, 2105, 4520, 2105, 2105, 2105, 2110, 4520, 2110, 2110,
     2110, 2116, 4520, 2116, 2116, 2116, 2141, 4520, 2141, 2141,
     2141, 2202, 4520, 2202, 2202, 2202, 2214, 4520, 2214, 2214,

     2214, 2389, 4520, 2389, 2389, 2389, 2391, 4520, 2391, 2391,
     2391, 2394, 4520, 2394, 2394, 2394, 2401, 4520, 2401, 2401,
     2401, 2403, 4520, 2403, 2403, 2403, 2406, 4520, 2406, 2406,
     2406, 2439, 4520, 2439, 2439, 2439, 2444, 4520, 2444, 2444,
     2444, 2489, 4520, 2489, 2489, 2489, 2500, 4520, 2500, 2500,
     2500, 2752, 4520, 2752, 2752, 2752, 2757, 4520, 2757, 2757,
     2757, 2852, 4520, 2852, 2852, 2852, 2854, 4520, 2854, 2854,
     2854, 2869, 4520, 2869, 2869, 2869, 2871, 4520, 2871, 2871,
     2871, 2879, 4520, 2879, 2879, 2879, 2881, 4520, 2881, 2881,
     2881, 2936, 4520, 2936, 2936, 2936, 2942, 4520, 2942, 2942,

     2942, 3012, 4520, 3012, 3012, 3012, 3019, 4520, 3019, 3019,
     3019, 3044, 4520, 3044, 3044, 3044, 3055, 4520, 3055, 3055,
     3055, 3064, 4520, 3064, 3064, 3064, 3067, 4520, 3067, 3067,
     3067, 3070, 4520, 3070, 3070, 3070, 3073, 4520, 3073, 3073,
     3073, 3117, 4520, 3117, 3117, 3117, 3122, 4520, 3122, 3122,
     3122, 3128, 4520, 3128, 3128, 3128, 3134, 4520, 3134, 3134,
     3134, 3167, 4520, 3167, 3167, 3167, 3168, 4520, 3168, 3168,
     3168, 3174, 4520, 3174, 3174, 3174, 3175, 4520, 3175, 3175,
     3175, 3188, 4520, 3188, 3188, 3188, 3199, 4520, 3199, 3199,
     3199, 3211, 4520, 3211, 3211, 3211, 3215, 4520, 3215, 3215,

     3215, 3218, 4520, 3218, 3218, 3218, 3222, 4520, 3222, 3222,
     3222, 3223, 4520, 3223, 3223, 3223, 3227, 4520, 3227, 3227,
     3227, 3239, 4520, 3239, 3239, 3239, 3240, 4520, 3240, 3240,
     3240, 3304, 4520, 3304, 3304, 3304, 3312, 4520, 3312, 3312,
     3312, 3336, 4520, 3336, 3336, 3336, 3337, 4520, 3337, 3337,
     3337, 3363, 4520, 3363, 3363, 3363, 3367, 4520, 3367, 3367,
     3367, 3378, 4520, 3378, 3378, 3378, 3379, 4520, 3379, 3379,
     3379, 3394, 4520, 3394, 3394, 3394, 3399, 4520, 3399, 3399,
     3399, 3421, 4520, 3421, 3421, 3421, 3422, 4520, 3422, 3422,
     3422, 3425, 4520, 3425, 3425, 3425, 3432, 4520, 3432, 3432,

     3432, 3529, 4520, 3529, 3529, 3529, 3530, 4520, 3530, 3530,
     3530, 3534, 4520, 3534, 3534, 3534, 3541, 4520, 3541, 3541,
     3541, 3547, 4520, 3547, 3547, 3547, 3549, 4520, 3549, 3549,
     3549, 3552, 4520, 3552, 3552, 3552, 3554, 4520, 3554, 3554,
     3554, 3560, 4520, 3560, 3560, 3560, 3565, 4520, 3565, 3565,
     3565, 3566, 4520, 3566, 3566, 3566, 3570, 4520, 3570, 3570,
     3570, 3575, 4520, 3575, 3575, 3575, 3576, 4520, 3576, 3576,
     3576, 3624, 4520, 3624, 3624, 3624, 3625, 4520, 3625, 3625,
     3625, 3660, 4520, 3660, 3660, 3660, 3661, 4520, 3661, 3661,
     3661, 3662, 4520, 3662, 3662, 3662, 3669, 4520, 3669, 3669,

     3669, 3676, 4520, 3676, 3676, 3676, 3677, 4520, 3677, 3677,
     3677, 3678, 4520, 3678, 3678, 3678, 3685, 4520, 3685, 3685,
     3685, 3748, 4520, 3748, 3748, 3748, 3755, 4520, 3755, 3755,
     3755, 3761, 4520, 3761, 3761, 3761, 3768, 4520, 3768, 3768,
     3768, 3780, 4520, 3780, 3780, 3780, 3781, 4520, 3781, 3781,
     3781, 3804, 4520, 3804, 3804, 3804, 3812, 4520, 3812, 3812,
     3812, 3824, 4520, 3824, 3824, 3824, 3832, 4520, 3832, 3832,
     3832, 3875, 4520, 3875, 3875, 3875, 3884, 4520, 3884, 3884,
     3884, 3895, 4520, 3895, 3895, 3895, 3896, 4520, 3896, 3896,
     3896, 3898, 4520, 3898, 3898, 3898, 3902, 4520, 3902, 3902,

     3902, 3903, 4520, 3903, 3903, 3903, 3905, 4520, 3905, 3905,
     3905, 3906, 4520, 3906, 3906, 3906, 3910, 4520, 3910, 3910,
     3910, 3958, 4520, 3958, 3958, 3958, 3961, 4520, 3961, 3961,
     3961, 3965, 4520, 3965, 3965, 3965, 3968, 4520, 3968, 3968,
     3968, 4012, 4520, 4012, 4012, 4012, 4023, 4520, 4023, 4023,
     4023, 4073, 4520, 4073, 4073, 4073, 4083, 4520, 4083, 4083,
     4083, 4097, 4520, 4097, 4097, 4097, 4106, 4520, 4106, 4106,
     4106, 4116, 4520, 4116, 4116, 4116, 4117, 4520, 4117, 4117,
     4117, 4122, 4520, 4122, 4122, 4122, 4126, 4520, 4126, 4126,
     4126, 4127, 4520, 4127, 4127, 4127, 4132, 4520, 4132, 4132,

     4132, 4222, 4520, 4222, 4222, 4222, 4232, 4520, 4232, 4232,
     4232, 4300, 4520, 4300, 4300, 4300, 4309, 4520, 4309, 4309,
     4309, 4318, 4520, 4318, 4318, 4318, 4320, 4520, 4320, 4320,
     4320, 4322, 4520, 4322, 4322, 4322, 4324, 4520, 4324, 4324,
     4324, 4396, 4520, 4396, 4396, 4396, 4402, 4520, 4402, 4402,
     4402, 4411, 4520, 4411, 4411, 4411, 4417, 4520, 4417, 4417,
     4417, 4430, 4520, 4430, 4430, 4430, 4433, 4520, 4433, 4433,
     4433, 4436, 4520, 4436, 4436, 4436, 4439, 4520, 4439, 4439,
     4439, 4490, 4520, 4490, 4490, 4490, 4492, 4520, 4492, 4492,
     4492,    3, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520
    } ;

static yyconst short int yy_chk[13984] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    5,    7,    7,    8,   24,   24,

        8,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   22, 4524,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   28,   28,   28,   32,   28, 3501,   37,
       28,   53,   61,   28,   28,   28,   32,   28,   29,   35,
       28,   28,   28,   35,   29,   72,   29,   73,   72, 3496,
       73,   74,   74,   28,   28,   28,   32,   28,   29,   37,
       28,   53,   61,   28,   28,   28,   32,   28,   29,   35,
       28,   28,   28,   35,   29,   34,   29,   31,   31,   34,
       38,   31,   31,   34,   41,   31,   38,   36,   29,   30,
       36,   31,   34,   30,   31,   34,   30,   36,   41,   64,

       30,   66,   36,   30,   41,   34,   30,   31,   30,   34,
       38,   31, 2778,   34,   41,   31,   38,   36, 2772,   30,
       36,   31,   34,   30,   31,   34,   30,   36,   41,   64,
       30,   66,   36,   30,   41, 2351,   30,   69,   30,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   40,
       39,   42,   89,   50,   33,   39,   39,   40, 2343,   33,
       42,   50,   48,   40,   91,   33,   48,   69,   33,   40,
     2190,   33,   84,   84,   48,   33, 2095, 1942, 1769,   40,
       39,   42,   89,   50,   33,   39,   39,   40,   49,   33,
       42,   50,   49,   40,   91,   33,   45, 1395,   33,   40,

       45,   33,   49, 1315,   48,   33,   43,   43,   43,   43,
       45,   93,   94,   90,   95,   94,   45,   97,   49, 1213,
       43,  100,   49, 1212,   43,   90,   45,   43,   43,   51,
       45,   43,   49,   51,   43,   52,   51,   43, 1211, 1039,
       45,   93,   94,   90,   95,   94,   45,   97,   92,   52,
       43,  100,  101,   52,   43,   90,   52,   43,   43,   51,
     1037,   43,   92,   51,   43,   52,   51,   43,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   92,   52,
       47,  102,  101,   52,   47,   46,   52,   46,   47,  103,
       46,   46,   92,   58,   46,   98,   46,   47,   46,   58,

       47,   58,   46,   46,   47,   98,  104,   46, 1032,  970,
       47,  102,  882,   58,   47,   46,  105,   46,   47,  103,
       46,   46,  881,   58,   46,   98,   46,   47,   46,   58,
       47,   58,   46,   46,   47,   98,  104,   46,   57,   57,
       57,  106,   57,   58,  107,   57,  105,  108,   57,   57,
       57,   62,   57,   62,   62,   57,   57,   57,   67,   60,
      880,   62,   67,   60,  808,   67,   62,   60,   57,   57,
       57,  106,   57,   60,  107,   57,   60,  108,   57,   57,
       57,   62,   57,   62,   62,   57,   57,   57,   67,   60,
       68,   62,   67,   60,   63,   67,   62,   60,  110,   63,

       63,  111,  112,   60,   68,   96,   60,   96,   68,  112,
      116,   68,  628,  648,  628,  583,  375,  628,  374,  205,
       68,   76,   70,   56,   63,   27,   25,   19,  110,   63,
       63,  111,  112,   16,   68,   96,   13,   96,   68,  112,
      116,   68,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   83,   99,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  109,  109,  109,  117,  118,  114,
      119,  109,   99,  114,  120,   10,    9,    3,    0,    0,

        0,    0,    0,   99,    0,    0,  114,  119,  123,  124,
      125,    0,  127,  128,  109,  109,  109,  117,  118,  114,
      119,  109,   99,  114,  120,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  122,  114,  119,  123,  124,
      125,  126,  127,  128,  122,  129,  130,  131,  132,  133,
      134,  126,  136,  137,  140,  144,  138,  133,  139,  146,
      133,  131,  138,  148,  139,  122,  137,    0,    0,  146,
        0,  126,    0,    0,  122,  129,  130,  131,  132,  133,
      134,  126,  136,  137,  140,  144,  138,  133,  139,  146,
      133,  131,  138,  148,  139,    0,  137,  141,  141,  146,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  147,  141,  142,  142,  149,  150,  151,
      151,  145,  152,  153,  156,  141,  141,  141,  141,  141,
      145,  147,  157,  159,  145,  150,    0,    0,  160,    0,
      162,  165,    0,  147,    0,  142,  142,  149,  150,  151,
      151,  145,  152,  153,  156,  163,  141,  141,  141,  163,
      145,  147,  157,  159,  145,  150,  154,  154,  160,  154,
      162,  165,  158,  164,  154,  168,    0,  164,  158,  154,
        0,  158,    0,  164,    0,  163,  141,  141,  167,  163,
        0,    0,    0,  171,  167,    0,  154,  154,  172,  154,

      174,  178,  158,  164,  154,  168,  166,  164,  158,  154,
      155,  158,  155,  164,  155,  155,  166,  179,  167,  181,
      155,  155,  155,  171,  167,  166,  170,  155,  172,    0,
      174,  178,    0,    0,    0,    0,  166,    0,    0,  170,
      155,  173,  155,    0,  155,  155,  166,  179,    0,  181,
      155,  155,  155,  173,    0,  166,  170,  155,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  176,  170,
      175,  173,  177,  175,  180,  184,  183,  182,  180,  185,
      190,  191,  192,  173,  183,  176,  177,  182,  188,  193,
      189,  194,  192,  188,  195,  188,  189,  196,  176,  193,

      175,  197,  177,  175,  180,  184,  183,  182,  180,  185,
      190,  191,  192,  198,  183,  176,  177,  182,  188,  193,
      189,  194,  192,  188,  195,  188,  189,  196,  199,  193,
      200,  197,  201,  203,  209,  210,  212,  213,  215,  216,
      217,  201,  218,  198,  219,  203,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,    0,    0,  199,    0,
      200,    0,  201,  203,  209,  210,  212,  213,  215,  216,
      217,  201,  218,    0,  219,  203,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  214,  214,    0,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  220,  214,  221,  222,  223,  224,    0,  225,
      226,  227,  228,  229,  214,  214,  214,  214,  214,  230,
      231,  232,  233,  234,  224,  214,  232,  235,  214,  236,
      238,  239,  220,  240,  221,  222,  223,  224,  214,  225,
      226,  227,  228,  229,  241,  214,  214,  214,  242,  230,
      231,  232,  233,  234,  224,  214,  232,  235,  214,  236,
      238,  239,  243,  240,  244,  245,  246,  247,  214,  248,
      249,  250,  252,  251,  241,  214,  214,  251,  242,  253,
      255,  256,  257,  258,  254,  259,  249,    0,  261,  258,
      262,  263,  243,  264,  244,  245,  246,  247,  254,  248,

      249,  250,  252,  251,  265,  266,  267,  251,  269,  253,
      255,  256,  257,  258,  254,  259,  249,  260,  261,  258,
      262,  263,  270,  264,  272,  260,    0,    0,  254,    0,
      274,    0,  271,  275,  265,  266,  267,  276,  269,  273,
        0,    0,  277,  271,    0,    0,  278,  260,  279,  273,
      280,  281,  270,  282,  272,  260,  268,  268,  268,  268,
      274,  268,  271,  275,  268,  283,  284,  276,  286,  273,
      268,  268,  277,  271,  268,  268,  278,  268,  279,  273,
      280,  281,    0,  282,    0,    0,  268,  268,  268,  268,
        0,  268,    0,    0,  268,  283,  284,  287,  286,  288,

      268,  268,  290,  291,  268,  268,    0,  268,  285,  285,
        0,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  292,  285,  293,  287,  295,  288,
      297,  294,  290,  291,  294,  298,  285,  285,  285,  285,
      285,  299,  294,  300,  301,  302,  294,  303,  301,  304,
      305,  306,  307,  308,  292,  309,  293,  310,  295,  309,
      297,  294,  311,  314,  294,  298,  315,  285,  285,  285,
      316,  299,  294,  300,  301,  302,  294,  303,  301,  304,
      305,  306,  307,  308,  313,  309,  312,  310,  317,  309,
        0,  318,  311,  314,  312,    0,  315,  285,  285,  313,

      316,  319,  320,  321,  322,  323,  324,  325,    0,    0,
      326,  327,  328,  330,  313,  331,  312,  332,  317,  333,
      318,  334,  335,  336,  312,  318,  337,  338,  340,  313,
      342,  319,  320,  321,  322,  323,  324,  325,  318,  318,
      326,  327,  328,  330,    0,  331,    0,  332,    0,  333,
      318,  334,  335,  336,    0,  318,  337,  338,  340,  341,
      342,  343,  346,  347,  348,  341,  349,  350,  318,  318,
      329,  329,    0,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  351,  329,  339,  341,
      344,  343,  346,  347,  348,  341,  349,  350,  329,  329,

      329,  329,  329,  339,  352,  353,  344,  354,  355,  356,
      357,  360,  329,    0,    0,  361,  351,  362,  339,  363,
      344,  359,  365,  366,  367,    0,  358,  368,  369,  329,
      329,  329,    0,  339,  352,  353,  344,  354,  355,  356,
      357,  360,  329,  358,  358,  361,  364,  362,  370,  363,
      359,  371,  365,  366,  367,  364,  358,  368,  369,  329,
      329,  372,  359,  373,  359,  376,  378,  379,  359,    0,
        0,    0,  382,  358,  358,    0,  364,  383,  370,  384,
      359,  371,  385,  386,  388,  364,  390,  392,    0,  394,
        0,  372,  359,  373,  359,  376,  378,  379,  359,  380,

      380,  380,  382,  396,  380,  380,  380,  383,  380,  384,
      389,  397,  385,  386,  388,  398,  390,  392,  380,  394,
      380,    0,    0,    0,  399,  389,    0,    0,    0,  380,
      380,  380,  400,  396,  380,  380,  380,  401,  380,  403,
      389,  397,    0,  404,  405,  398,  406,  407,  380,  408,
      380,  381,  381,  381,  399,  389,  381,  381,  381,  409,
      381,  411,  400,  410,  410,  413,  414,  401,  415,  403,
      381,  416,  381,  404,  405,  419,  406,  407,    0,  408,
        0,  381,  381,  381,    0,    0,  381,  381,  381,  409,
      381,  411,  420,  410,  410,  413,  414,  421,  415,  422,

      381,  416,  381,  412,  412,  419,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  423,
      412,  424,  420,  426,  427,  428,  429,  421,  431,  422,
      432,  412,  412,  412,  412,  412,  434,  435,  436,  437,
      438,  439,  440,  434,  442,  443,  444,  445,  446,  423,
      447,  424,  449,  426,  427,  428,  429,  451,  431,  453,
      432,  454,  412,  412,  412,    0,  434,  435,  436,  437,
      438,  439,  440,  434,  442,  443,  444,  445,  446,    0,
      447,    0,  449,  455,  456,  457,  458,  451,  459,  453,
        0,  454,  412,  412,  417,  417,    0,  417,  417,  417,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      448,  417,  450,  455,  456,  457,  458,  460,  459,  461,
      450,  448,  417,  417,  417,  417,  417,  452,  462,  465,
      466,  467,  469,  470,  452,  471,  472,  473,  474,  475,
      448,  469,  450,  476,  479,  480,  485,  460,  483,  461,
      450,  448,  483,  417,  417,  417,    0,  452,  462,  465,
      466,  467,  469,  470,  452,  471,  472,  473,  474,  475,
        0,  469,    0,  476,  479,  480,  485,    0,  483,  486,
      487,    0,  483,  417,  417,  418,  418,    0,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  482,  418,    0,  484,    0,  488,  468,  490,  486,
      487,  482,  491,  418,  418,  418,  418,  418,  477,  468,
      492,  484,  477,  477,  418,  468,  493,  494,  477,  495,
      496,  482,  497,  477,  484,  477,  488,  468,  490,  498,
      499,  482,  491,  500,  418,  418,  418,    0,  477,  468,
      492,  484,  477,  477,  418,  468,  493,  494,  477,  495,
      496,    0,  497,  477,  501,  477,  502,  503,  504,  498,
      499,  505,  506,  500,  418,  418,  425,  425,    0,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  507,  425,  501,  508,  502,  503,  504,  509,

      510,  505,  506,  511,  425,  425,  425,  425,  425,  512,
      512,  425,  513,  425,  514,  515,  516,  511,  517,  518,
      519,  521,  507,  522,  523,  508,  524,  526,  527,  509,
      510,  530,  527,  511,  531,  425,  425,  425,  525,  512,
      512,  425,  513,  425,  514,  515,  516,  511,  517,  518,
      519,  521,    0,  522,  523,  528,  524,  526,  527,  528,
      525,  530,  527,  533,  531,  425,  425,  441,  441,    0,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  529,  441,  528,  532,  529,  534,  528,
      525,  536,  538,  533,  539,  441,  441,  441,  441,  441,

      540,  541,  529,  542,  532,  543,  544,  545,  546,  547,
      548,  550,  551,  529,  549,  552,  532,  529,  534,  553,
      549,  536,  538,  556,  539,  557,  441,  441,  441,    0,
      540,  541,  529,  542,  532,  543,  544,  545,  546,  547,
      548,  550,  551,    0,  549,  552,  558,  559,  560,  553,
      549,  561,  562,  556,  564,  557,  441,  441,  463,  463,
        0,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  565,  463,  558,  559,  560,  563,
      563,  561,  562,  566,  564,  567,  463,  463,  463,  463,
      463,  568,  570,  571,  572,  573,  575,  576,  577,  579,

      580,  586,  587,  588,  565,  589,  590,  592,  593,  563,
      563,  594,  595,  566,  596,  567,  597,  463,  463,  463,
        0,  568,  570,  571,  572,  573,  575,  576,  577,  579,
      580,  586,  587,  588,    0,  589,  590,  592,  593,  598,
      599,  594,  595,  601,  596,  602,  597,  463,  463,  520,
      520,    0,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  591,  520,  603,  600,  598,
      599,  604,  605,  601,  606,  602,  608,  520,  520,  520,
      520,  520,  591,  610,  520,  600,  520,  607,  520,  520,
      614,  612,  615,  607,  616,  591,  617,  603,  600,  618,

      618,  604,  605,  612,  606,  619,  608,  621,  520,  520,
      520,    0,  591,  610,  520,  600,  520,  607,  520,  520,
      614,  612,  615,  607,  616,    0,  617,    0,    0,  618,
      618,    0,    0,  612,    0,  619,  622,  621,  520,  520,
      535,  535,    0,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  620,  535,  613,  623,
      624,  611,  620,  625,  611,  627,  622,  629,  535,  535,
      535,  535,  535,  611,  613,  630,  631,  632,  636,  611,
      637,  638,  641,  642,  643,  644,  620,    0,  613,  623,
      624,  611,  620,  625,  611,  627,  645,  629,  643,  535,

      535,  535,    0,  611,  613,  630,  631,  632,  636,  611,
      637,  638,  641,  642,  643,    0,    0,  644,    0,    0,
        0,  646,  647,    0,  649,    0,  645,  652,  643,  535,
      535,  569,  569,    0,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  644,  569,  639,
      639,  646,  647,  639,  649,  639,  653,  652,  654,  569,
      569,  569,  569,  569,  640,  640,  655,  658,  640,  639,
      640,  659,  660,  661,  657,  662,  663,  664,  665,  639,
      639,  666,  657,  639,  640,  639,  653,  657,  654,  668,
      569,  569,  569,  669,  640,  640,  655,  658,  640,  639,

      640,  659,  660,  661,  657,  662,  663,  664,  665,  670,
        0,  666,  657,    0,  640,  671,  672,  657,  674,  668,
      569,  569,  633,  669,  675,  633,  676,  633,  633,  677,
      633,  679,  633,  633,  680,  681,  682,  633,  683,  670,
      633,  684,  685,  633,    0,  671,  672,    0,  674,    0,
        0,  686,  633,  687,  675,  633,  676,  633,  633,  677,
      633,  679,  633,  633,  680,  681,  682,  633,  683,  688,
      633,  684,  685,  633,  634,  689,  690,  634,  691,  634,
      634,  686,  634,  687,  634,  634,  692,  693,  696,  634,
      694,  694,  634,  697,  694,  634,    0,    0,    0,  688,

        0,    0,  694,  698,  634,  689,  690,  634,  691,  634,
      634,  699,  634,    0,  634,  634,  692,  693,  696,  634,
      694,  694,  634,  697,  694,  634,  650,  695,  695,  650,
      650,  695,  694,  698,  700,  701,  650,  702,  703,  695,
      704,  699,  706,  650,  707,  650,  705,  705,  708,  650,
      650,    0,  709,  710,    0,    0,  650,  695,  695,  650,
      650,  695,  711,  712,  700,  701,  650,  702,  703,  695,
      704,  713,  706,  650,  707,  650,  705,  705,  708,  650,
      650,  651,  709,  710,  651,  651,  714,  715,  716,  717,
      718,  651,  711,  712,  719,  720,  721,  722,  651,  723,

      651,  713,  724,  725,  651,  651,    0,    0,  726,    0,
        0,  651,    0,    0,  651,  651,  714,  715,  716,  717,
      718,  651,  727,    0,  719,  720,  721,  722,  651,  723,
      651,  728,  724,  725,  651,  651,  667,  667,  726,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  727,  667,  729,  730,  731,    0,  732,  733,
      734,  728,  735,  736,  667,  667,  667,  667,  667,  737,
      738,  739,  740,  667,  667,  741,  742,  745,  746,  747,
      748,  749,  750,  751,  729,  730,  731,  667,  732,  733,
      734,  754,  735,  736,  755,  667,  667,  667,    0,  737,

      738,  739,  740,  667,  667,  741,  742,  745,  746,  747,
      748,  749,  750,  751,    0,  756,  757,  667,    0,  759,
      760,  754,  767,  768,  755,  667,  667,  743,  743,    0,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  769,  743,  756,  757,  770,  758,  759,
      760,  761,  767,  768,  761,  743,  743,  743,  743,  743,
      758,  762,  763,  772,  762,  763,  758,  764,  774,  764,
      764,  766,    0,  769,  766,  773,  763,  770,  758,  766,
      773,  761,  765,  775,  761,  765,  743,  743,  743,  776,
      758,  762,  763,  772,  762,  763,  758,  764,  774,  764,

      764,  766,  765,  777,  766,  773,  763,  778,  779,  766,
      773,  780,  765,  775,  781,  765,  743,  743,  782,  776,
      783,  784,    0,  787,  788,    0,  789,  791,    0,    0,
      794,  795,  765,  777,    0,  796,  797,  778,  779,  790,
        0,  780,    0,  798,  781,    0,    0,  799,  782,  790,
      783,  784,  785,  787,  788,  785,  789,  791,  785,  785,
      794,  795,  793,  800,  785,  796,  797,  785,  801,  790,
      785,  802,  793,  798,  804,  785,  785,  799,  793,  790,
        0,  806,  785,    0,    0,  785,  807,  809,  785,  785,
      810,  811,  793,  800,  785,    0,  814,  785,  801,  815,

      785,  802,  793,  816,  804,  785,  785,  786,  793,  817,
      786,  806,  818,  786,  786,  821,  807,  809,  823,  786,
      810,  811,  786,  819,  820,  786,  814,  819,  820,  815,
      786,  786,    0,  816,  824,    0,    0,  786,    0,  817,
      786,    0,  818,  786,  786,  821,    0,    0,  823,  786,
      825,  826,  786,  819,  820,  786,  827,  819,  820,  828,
      786,  786,  792,  792,  824,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  829,  792,
      825,  826,  830,  831,  832,  833,  827,  834,  835,  828,
      792,  792,  792,  792,  792,  836,  837,  838,  839,  840,

      841,  842,  843,  844,  845,  846,  847,  848,  829,  849,
      850,  851,  830,  831,  832,  833,  852,  834,  835,  853,
      854,  792,  792,  792,  855,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  856,  849,
      850,  851,  857,  858,  859,  860,  852,  861,  862,  853,
      854,  792,  792,  863,  855,  864,  865,  866,    0,    0,
      868,    0,    0,    0,    0,    0,    0,    0,  856,    0,
        0,    0,  857,  858,  859,  860,  869,  861,  862,  870,
      871,  872,  875,  863,  876,  864,  865,  866,  867,  867,
      868,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  877,  867,  869,  878,  879,  870,
      871,  872,  875,  884,  876,  885,  867,  867,  867,  867,
      867,  873,  877,  873,  867,  873,  888,  890,  887,  889,
      891,  892,  893,  867,  877,  894,  895,  878,  879,  887,
      889,  896,  898,  884,  900,  885,  901,  867,  867,  867,
        0,  873,  877,  873,  867,  873,  888,  890,  887,  889,
      891,  892,  893,  867,    0,  894,  895,  902,  903,  887,
      889,  896,  898,  904,  900,  905,  901,  867,  867,  874,
      874,    0,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  897,  874,  902,  903,  906,

      907,  899,  908,  904,  909,  905,  897,  874,  874,  874,
      874,  874,  899,  910,  911,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  897,  922,  924,  925,  906,
      907,  899,  908,  926,  909,  927,  897,  930,  874,  874,
      874,    0,  899,  910,  911,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,    0,  922,  924,  925,  932,
      931,  933,  934,  926,  931,  927,  935,  930,  874,  874,
      883,  883,    0,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  936,  883,  937,  932,
      931,  933,  934,  938,  931,  940,  935,  941,  883,  883,

      883,  883,  883,  939,  942,  943,  944,  939,  945,  946,
      947,  949,  950,  951,  952,  953,  936,  955,  937,  956,
      957,  958,  959,  938,  960,  940,  964,  941,  965,  883,
      883,  883,    0,  939,  942,  943,  944,  939,  945,  946,
      947,  949,  950,  951,  952,  953,    0,  955,    0,  956,
      957,  958,  959,  966,  960,  967,  964,  968,  965,  883,
      883,  961,  961,    0,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  972,  961,  973,
      974,  975,  976,  966,  977,  967,  978,  968,  979,  961,
      961,  961,  961,  961,  973,  980,  981,  982,  983,  984,

      985,  986,  987,  988,  989,  991,  992,  972,  993,  973,
      974,  975,  976,  961,  977,  994,  978,  995,  979,  996,
      961,  961,  961,    0,  973,  980,  981,    0,  983,  984,
      985,  986,  987,  988,  989,  991,  992,  997,  993,  998,
      999,    0, 1000,  961,  982,  994, 1001,  995, 1002,  996,
      961,  961,  962,  962, 1003, 1004, 1006,  962, 1007, 1008,
      962, 1009, 1010, 1011, 1012,  962, 1013,  997,  962,  998,
      999,  962, 1000,    0,  982, 1014, 1001,    0, 1002, 1015,
        0, 1016,  962,  962, 1003, 1004, 1006,  962, 1007, 1008,
      962, 1009, 1010, 1011, 1012,  962, 1013, 1017,  962, 1018,

     1019,  962,  963,  963, 1020, 1014, 1021,  963, 1022, 1015,
      963, 1016, 1023, 1024, 1025,  963, 1026, 1027,  963, 1028,
     1029,  963, 1031, 1034, 1035, 1036, 1038, 1017, 1041, 1018,
     1019, 1043,  963,  963, 1020, 1044, 1021,  963, 1022,    0,
      963, 1036, 1023, 1024, 1025,  963, 1026, 1027,  963, 1028,
     1029,  963, 1031, 1034, 1035, 1036, 1038, 1047, 1041, 1050,
     1048, 1043, 1051, 1049, 1052, 1044, 1053, 1054, 1055, 1047,
     1057, 1036, 1048,    0, 1054, 1059, 1047, 1060, 1061, 1048,
     1062, 1063, 1064, 1065, 1066, 1049, 1067, 1047, 1068, 1050,
     1048, 1070, 1051, 1071, 1052, 1069, 1053, 1054, 1055, 1047,

     1057, 1069, 1048, 1049, 1054, 1059, 1047, 1060, 1061, 1048,
     1062, 1063, 1064, 1065, 1066, 1049, 1067, 1072, 1068, 1073,
     1075, 1070, 1076, 1071, 1077, 1069, 1078, 1079, 1080, 1081,
     1082, 1069, 1083, 1049, 1084, 1085, 1086, 1076, 1088, 1087,
     1089, 1090, 1093, 1080, 1092, 1094, 1095, 1072, 1096, 1073,
     1075, 1097, 1076, 1087, 1077, 1092, 1078, 1079, 1080, 1081,
     1082, 1098, 1083, 1099, 1084, 1085, 1086, 1076, 1088, 1087,
     1089, 1090, 1093, 1080, 1092, 1094, 1095, 1100, 1096, 1101,
     1102, 1097, 1103, 1087, 1104, 1092, 1105, 1106, 1107, 1108,
     1101, 1098, 1109, 1099, 1110, 1112, 1113, 1114, 1115, 1116,

     1117, 1118, 1119, 1121, 1122, 1120, 1123, 1100, 1126, 1101,
     1102, 1127, 1103, 1128, 1104, 1129, 1105, 1106, 1107, 1108,
     1101, 1120, 1109, 1130, 1110, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1121, 1122, 1120, 1123, 1131, 1126, 1132,
     1139, 1127,    0, 1128,    0, 1129,    0, 1135, 1142, 1143,
     1135, 1120, 1125, 1130, 1144, 1145,    0, 1146, 1147,    0,
     1148, 1150,    0, 1153, 1154, 1155, 1156, 1131, 1157, 1132,
     1139, 1158, 1125, 1159, 1125, 1160, 1125, 1135, 1142, 1143,
     1135, 1161, 1125, 1162, 1144, 1145, 1125, 1146, 1147, 1125,
     1148, 1150, 1125, 1153, 1154, 1155, 1156, 1163, 1157, 1164,

     1165, 1158, 1125, 1159, 1125, 1160, 1125, 1166, 1167, 1168,
     1169, 1161, 1125, 1162, 1170, 1171, 1125, 1172, 1173, 1125,
     1174, 1175, 1125, 1176, 1177,    0,    0, 1163,    0, 1164,
     1165,    0,    0,    0,    0,    0,    0, 1166, 1167, 1168,
     1169, 1180,    0, 1181, 1170, 1171, 1182, 1172, 1173, 1183,
     1174, 1175, 1184, 1176, 1177, 1178, 1178,    0, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1180, 1178, 1181, 1185, 1186, 1182, 1187, 1188, 1183,
     1189, 1190, 1184, 1178, 1178, 1178, 1178, 1178, 1191, 1192,
     1193, 1195, 1194, 1196, 1197, 1193, 1199, 1200, 1201, 1202,

     1203, 1204, 1205, 1207, 1185, 1186, 1208, 1187, 1188, 1194,
     1189, 1190, 1209, 1214, 1178, 1178, 1178,    0, 1191, 1192,
     1193, 1195, 1194, 1196, 1197, 1193, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1207, 1215, 1217, 1208, 1218, 1219, 1194,
     1220, 1221, 1209, 1214, 1178, 1178, 1210, 1210,    0, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1222, 1210, 1215, 1217, 1223, 1218, 1219, 1224,
     1220, 1221, 1226, 1226, 1210, 1210, 1210, 1210, 1210, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238,
     1238, 1239, 1222, 1240, 1241, 1242, 1223, 1243, 1244, 1224,

     1245, 1246, 1226, 1226, 1247, 1210, 1210, 1210,    0, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238,
     1238, 1239,    0, 1240, 1241, 1242, 1248, 1243, 1244, 1249,
     1245, 1246, 1250, 1251, 1247, 1210, 1210, 1237, 1237,    0,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1252, 1237, 1253, 1248, 1254, 1255, 1249,
     1256, 1257, 1250, 1251, 1258, 1237, 1237, 1237, 1237, 1237,
     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1252, 1272, 1253, 1273, 1254, 1255, 1274,
     1256, 1257, 1275, 1276, 1258, 1277, 1237, 1237, 1237, 1278,

     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1279, 1272, 1280, 1273, 1281, 1282, 1274,
     1283, 1284, 1275, 1276, 1285, 1277, 1237, 1237, 1286, 1278,
     1287, 1288, 1289, 1290, 1291,    0,    0, 1295, 1297,    0,
     1298,    0, 1299, 1279, 1296, 1280, 1300, 1281, 1282, 1296,
     1283, 1284,    0,    0, 1285,    0, 1302, 1304, 1286, 1305,
     1287, 1288, 1289, 1290, 1291, 1293, 1293, 1295, 1297, 1293,
     1298, 1293, 1299, 1301, 1296, 1303, 1300, 1301, 1306, 1296,
     1303, 1307, 1293, 1293, 1308, 1293, 1302, 1304, 1308, 1305,
        0, 1309,    0, 1310, 1311, 1293, 1293, 1312, 1313, 1293,

     1314, 1293, 1316, 1301,    0, 1303,    0, 1301, 1306, 1317,
     1303, 1307, 1293, 1293, 1308, 1293, 1294, 1294, 1308, 1318,
     1294, 1309, 1294, 1310, 1311, 1319, 1322, 1312, 1313, 1323,
     1314, 1324, 1316, 1294, 1294, 1325, 1294, 1327, 1327, 1317,
     1319, 1328, 1329, 1319, 1330, 1331, 1294, 1294, 1332, 1318,
     1294, 1334, 1294, 1335, 1336, 1319, 1322, 1337, 1338, 1323,
     1339, 1324, 1340, 1294, 1294, 1325, 1294, 1327, 1327, 1341,
     1319, 1328, 1329, 1319, 1330, 1331, 1342, 1343, 1332,    0,
     1350, 1334,    0, 1335, 1336,    0,    0, 1337, 1338,    0,
     1339,    0, 1340,    0, 1351,    0, 1353, 1358, 1359, 1341,

     1360, 1361, 1362, 1361, 1363, 1364, 1342, 1343, 1346, 1346,
     1350, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1351, 1346, 1353, 1358, 1359, 1365,
     1360, 1361, 1362, 1361, 1363, 1364, 1346, 1346, 1346, 1346,
     1346, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1380, 1381, 1382, 1383, 1365,
     1384, 1386, 1387, 1388, 1385, 1389, 1390, 1346, 1346, 1346,
     1385, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1380, 1381, 1382, 1383, 1391,
     1384, 1386, 1387, 1388, 1385, 1389, 1390, 1346, 1346, 1393,

     1385, 1394, 1396, 1397, 1394, 1399, 1400, 1402, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1391,
     1415, 1416,    0,    0,    0,    0,    0,    0,    0, 1393,
        0, 1394, 1396, 1397, 1394, 1399, 1400, 1402, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1418,
     1415, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1419, 1420, 1421, 1422, 1424, 1425, 1426, 1428,
     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1418,
     1440, 1441, 1442, 1443, 1444, 1445, 1417,    0,    0, 1441,
        0,    0, 1419, 1420, 1421, 1422, 1424, 1425, 1426, 1428,

     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1446,
     1440, 1441, 1442, 1443, 1444, 1445, 1417, 1430, 1430, 1441,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1447, 1430, 1448, 1449, 1450, 1452, 1446,
     1453, 1454, 1451, 1455, 1456, 1430, 1430, 1430, 1430, 1430,
     1451, 1457, 1461, 1462, 1463, 1464, 1466, 1467, 1469, 1472,
     1473, 1474, 1475, 1447, 1476, 1448, 1449, 1450, 1452, 1477,
     1453, 1454, 1451, 1455, 1456, 1478, 1430, 1430, 1430, 1479,
     1451, 1457, 1461, 1462, 1463, 1464, 1466, 1467, 1469, 1472,
     1473, 1474, 1475, 1480, 1476, 1481, 1482, 1484, 1486, 1477,

     1487, 1488, 1489, 1490, 1491, 1478, 1430, 1430, 1492, 1479,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1493,
     1494, 1498, 1499, 1480, 1483, 1481, 1482, 1484, 1486, 1500,
     1487, 1488, 1489, 1490, 1491, 1502, 1504, 1505, 1492, 1506,
     1507, 1509, 1510, 1512, 1514, 1515, 1516, 1517, 1519, 1493,
     1494, 1498, 1499,    0, 1483,    0,    0,    0,    0, 1500,
        0,    0,    0,    0,    0, 1502, 1504, 1505, 1521, 1506,
     1507, 1509, 1510, 1512, 1514, 1515, 1516, 1517, 1519, 1520,
     1520,    0, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520,    0, 1520, 1526, 1521, 1529,

     1522, 1530, 1533, 1534, 1522, 1529, 1522, 1520, 1520, 1520,
     1520, 1520, 1522, 1523, 1535, 1536, 1537, 1523, 1538, 1523,
     1539, 1540, 1541, 1543, 1544, 1523, 1545, 1526, 1546, 1529,
     1522, 1530, 1533, 1534, 1522, 1529, 1522, 1547, 1520, 1520,
     1520, 1548, 1522, 1523, 1535, 1536, 1537, 1523, 1538, 1523,
     1539, 1540, 1541, 1543, 1544, 1523, 1545, 1549, 1546, 1550,
     1551, 1552, 1553, 1554, 1555, 1556, 1557, 1547, 1520, 1520,
     1558, 1548, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1552,
     1553, 1567, 1568, 1569, 1570, 1571, 1572, 1549, 1573, 1550,
     1551, 1552, 1553, 1554, 1555, 1556, 1557, 1574, 1575, 1576,

     1558, 1577, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1552,
     1553, 1567, 1568, 1569, 1570, 1571, 1572, 1578, 1573, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1574, 1575, 1576,
     1587, 1577, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1596, 1597, 1598, 1599, 1600, 1602,    0, 1578, 1605, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586,    0,    0,    0,
     1587,    0, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1596, 1597, 1598, 1599, 1600, 1602, 1604, 1604, 1605, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1606, 1604, 1607, 1608, 1609, 1610, 1611, 1612,

     1613, 1614, 1615, 1616, 1604, 1604, 1604, 1604, 1604, 1617,
     1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1606, 1630, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1616, 1631, 1604, 1604, 1604, 1633, 1617,
     1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1635, 1630, 1636, 1637, 1638, 1639, 1640, 1641,
     1642, 1643, 1644, 1645, 1631, 1604, 1604, 1646, 1633, 1647,
     1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
     1658, 1659, 1635, 1660, 1636, 1637, 1638, 1639, 1640, 1641,
     1642, 1643, 1644, 1645, 1661, 1662, 1663, 1646, 1664, 1647,

     1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
     1658, 1659, 1665, 1660, 1666, 1667, 1668, 1669, 1670, 1673,
     1674, 1675, 1676, 1677, 1661, 1662, 1663, 1678, 1664, 1679,
     1680, 1681, 1685, 1686, 1687, 1688, 1681, 1689, 1691, 1692,
     1693, 1696, 1665, 1697, 1666, 1667, 1668, 1669, 1670, 1673,
     1674, 1675, 1676, 1677, 1700, 1701, 1704, 1678, 1705, 1679,
     1680, 1681, 1685, 1686, 1687, 1688, 1681, 1689, 1691, 1692,
     1693, 1696, 1706, 1697, 1707, 1708, 1709,    0,    0, 1711,
        0,    0,    0,    0, 1700, 1701, 1704,    0, 1705,    0,
        0,    0,    0, 1713,    0, 1716, 1717, 1718, 1719, 1720,

     1722, 1723, 1706, 1724, 1707, 1708, 1709, 1710, 1710, 1711,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1713, 1710, 1716, 1717, 1718, 1719, 1720,
     1722, 1723, 1725, 1724, 1726, 1710, 1710, 1710, 1710, 1710,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1745, 1746,    0, 1748, 1749, 1753,
     1755, 1756, 1725, 1747, 1726, 1757, 1710, 1710, 1710, 1758,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1745, 1746, 1747, 1748, 1749, 1753,
     1755, 1756, 1759, 1760, 1761, 1757, 1710, 1710, 1762, 1758,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1764, 1765, 1766, 1767, 1768, 1770, 1747, 1771, 1777, 1778,
     1779, 1774, 1759, 1760, 1761, 1774, 1775, 1780, 1762, 1781,
     1775, 1783, 1784, 1774, 1785, 1786, 1787, 1789, 1775, 1790,
     1764, 1765, 1766, 1767, 1768, 1770, 1791, 1771, 1777, 1778,
     1779, 1774, 1792,    0,    0, 1774, 1775, 1780,    0, 1781,
     1775, 1783, 1784, 1774, 1785, 1786, 1787, 1789, 1775, 1790,
        0, 1794, 1795, 1796, 1797, 1798, 1791, 1800, 1801, 1802,
     1803,    0, 1792, 1793, 1793,    0, 1793, 1793, 1793, 1793,
     1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1804,

     1793, 1794, 1795, 1796, 1797, 1798, 1805, 1800, 1801, 1802,
     1803, 1793, 1793, 1793, 1793, 1793, 1806, 1807, 1809, 1810,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1821, 1804,
     1832, 1833, 1834, 1835, 1837, 1839, 1805, 1842, 1843, 1844,
     1845, 1846, 1793, 1793, 1793,    0, 1806, 1807, 1809, 1810,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1821,    0,
     1832, 1833, 1834, 1835, 1837, 1839, 1848, 1842, 1843, 1844,
     1845, 1846, 1793, 1793, 1799, 1799,    0, 1799, 1799, 1799,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1849, 1799, 1850, 1851, 1852, 1853, 1848, 1855, 1856, 1857,

     1858,    0, 1799, 1799, 1799, 1799, 1799, 1859, 1862, 1863,
     1864, 1866, 1860, 1867, 1868, 1871, 1865, 1872, 1874, 1875,
     1849, 1876, 1850, 1851, 1852, 1853, 1859, 1855, 1856, 1857,
     1858, 1860, 1865, 1799, 1799, 1799,    0, 1859, 1862, 1863,
     1864, 1866, 1860, 1867, 1868, 1871, 1865, 1872, 1874, 1875,
        0, 1876,    0,    0, 1877, 1878, 1859, 1879, 1880, 1881,
     1882, 1860, 1865, 1799, 1799, 1836, 1836,    0, 1836, 1836,
     1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836,
     1836, 1883, 1836, 1869, 1877, 1878, 1884, 1879, 1880, 1881,
     1882, 1885, 1886, 1836, 1836, 1836, 1836, 1836, 1887, 1869,

     1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1899, 1900,
     1901, 1883, 1902, 1869, 1903, 1905, 1884, 1906, 1907, 1908,
     1909, 1885, 1886, 1911, 1836, 1836, 1836, 1912, 1887, 1869,
     1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1899, 1900,
     1901, 1913, 1902, 1914, 1903, 1905, 1915, 1906, 1907, 1908,
     1909, 1916,    0, 1911, 1836, 1836,    0, 1912, 2857, 2857,
     2857, 2857, 2857, 2857, 2857, 2857, 2857, 2857, 1918,    0,
     1919, 1913, 1920, 1914, 1921, 1922, 1915, 1924, 1925, 1926,
        0, 1916, 1917, 1917,    0, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1918, 1917,

     1919, 1927, 1920, 1928, 1921, 1922, 1929, 1924, 1925, 1926,
     1917, 1917, 1917, 1917, 1917, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1945,    0,    0,
     1946, 1927, 1947, 1928,    0, 1948, 1929, 1949, 1951, 1953,
     1954, 1917, 1917, 1917,    0, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1945, 1943, 1944,
     1946, 1955, 1947, 1943, 1944, 1948, 1956, 1949, 1951, 1953,
     1954, 1917, 1917, 1943, 1944, 1957, 1958, 1943, 1944, 1960,
     1962, 1963, 1965, 1966, 1967, 1968, 1969, 1971, 1943, 1944,
     1970, 1955, 1970, 1943, 1944, 1974, 1956, 1975, 1976, 1977,

     1978, 1979, 1980, 1943, 1944, 1957, 1958, 1943, 1944, 1960,
     1962, 1963, 1965, 1966, 1967, 1968, 1969, 1971, 1981, 1982,
     1970, 1983, 1970, 1984, 1985, 1974, 1986, 1975, 1976, 1977,
     1978, 1979, 1980, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 1981, 1982,
     2002, 1983, 2003, 1984, 1985, 2004, 1986, 2005, 2006, 2008,
     2009, 2010, 2011, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2012, 2013,
     2002, 2014, 2003, 2015, 2016, 2004, 2017, 2005, 2006, 2008,
     2009, 2010, 2011, 2018, 2020, 2021, 2023, 2024, 2026, 2028,

     2029, 2030, 2032, 2033, 2034, 2035, 2036,    0, 2012, 2013,
        0, 2014, 2039, 2015, 2016, 2043, 2017, 2046, 2047, 2049,
        0, 2050, 2051, 2018, 2020, 2021, 2023, 2024, 2026, 2028,
     2029, 2030, 2032, 2033, 2034, 2035, 2036, 2037, 2052, 2037,
     2037, 2038, 2039, 2038, 2038, 2043, 2037, 2046, 2047, 2049,
     2038, 2050, 2051, 2053, 2055, 2037, 2058, 2061, 2062, 2038,
     2063, 2037, 2064, 2066, 2068, 2038, 2069, 2037, 2052, 2037,
     2037, 2038, 2071, 2038, 2038, 2072, 2037, 2073, 2063, 2074,
     2038, 2075, 2076, 2053, 2055, 2037, 2058, 2061, 2062, 2038,
     2063, 2037, 2064, 2066, 2068, 2038, 2069, 2077, 2078, 2079,

     2080, 2081, 2071, 2082, 2083, 2072, 2084, 2073, 2063, 2074,
     2086, 2075, 2076, 2085, 2085, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2096, 2098, 2100, 2102, 2077, 2078, 2079,
     2080, 2081, 2104, 2082, 2083, 2099, 2084, 2105, 2107, 2099,
     2086, 2108, 2109, 2085, 2085, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2096, 2098, 2100, 2102, 2110, 2111, 2113,
     2115, 2110, 2104,    0, 2116, 2099,    0, 2105, 2107, 2099,
        0, 2108, 2109,    0,    0,    0,    0,    0, 2118,    0,
     2119, 2120, 2122, 2123, 2124, 2126, 2127, 2110, 2111, 2113,
     2115, 2110, 2112, 2112, 2116, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2118, 2112,
     2119, 2120, 2122, 2123, 2124, 2126, 2127, 2128, 2129, 2130,
     2112, 2112, 2112, 2112, 2112, 2131, 2132, 2133, 2134, 2135,
     2136, 2137, 2139, 2144, 2146, 2147, 2148, 2150, 2152, 2153,
     2154, 2156, 2158, 2160,    0, 2159, 2134, 2128, 2129, 2130,
     2159, 2112, 2112, 2112,    0, 2131, 2132, 2133, 2134, 2135,
     2136, 2137, 2139, 2144, 2146, 2147, 2148, 2150, 2152, 2153,
     2154, 2156, 2158, 2160, 2161, 2159, 2134, 2162,    0, 2161,
     2159, 2112, 2112, 2114, 2114,    0, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2140,

     2114, 2141, 2163, 2164, 2161, 2165, 2166, 2162, 2140, 2161,
     2141, 2114, 2114, 2114, 2114, 2114, 2140, 2167, 2141, 2168,
     2169, 2140, 2170, 2141, 2171, 2172, 2174, 2175, 2176, 2140,
     2177, 2141, 2163, 2164, 2178, 2165, 2166, 2180, 2140, 2182,
     2141, 2183, 2114, 2114, 2114,    0, 2140, 2167, 2141, 2168,
     2169, 2140, 2170, 2141, 2171, 2172, 2174, 2175, 2176,    0,
     2177,    0, 2184, 2186, 2178, 2187, 2188, 2180, 2191, 2182,
     2192, 2183, 2114, 2114, 2117, 2117,    0, 2117, 2117, 2117,
     2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2193, 2117, 2184, 2186, 2194, 2187, 2188, 2195, 2191, 2196,

     2192, 2197, 2117, 2117, 2117, 2117, 2117, 2198, 2199, 2200,
     2201, 2202, 2203, 2205, 2206, 2207, 2209, 2210, 2211, 2212,
     2193, 2213, 2214, 2215, 2194, 2217, 2218, 2195, 2219, 2196,
     2221, 2197, 2222, 2117, 2117, 2117,    0, 2198, 2199, 2200,
     2201, 2202, 2203, 2205, 2206, 2207, 2209, 2210, 2211, 2212,
        0, 2213, 2214, 2215, 2223, 2217, 2218, 2224, 2219, 2225,
     2221, 2226, 2222, 2117, 2117, 2155, 2155,    0, 2155, 2155,
     2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155,
     2155, 2227, 2155, 2228, 2223, 2229, 2230, 2224, 2231, 2225,
     2232, 2226, 2233, 2155, 2155, 2155, 2155, 2155, 2234, 2235,

     2236, 2237, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
     2247, 2227, 2248, 2228, 2249, 2229, 2230, 2250, 2231, 2251,
     2232, 2252, 2233, 2253, 2155, 2155, 2155,    0, 2234, 2235,
     2236, 2237, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
     2247,    0, 2248,    0, 2249, 2254, 2255, 2250, 2256, 2251,
     2257, 2252, 2258, 2253, 2155, 2155, 2216, 2216,    0, 2216,
     2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
     2216, 2216, 2259, 2216, 2260, 2254, 2255, 2261, 2256, 2262,
     2257, 2263, 2258, 2264, 2216, 2216, 2216, 2216, 2216, 2265,
     2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,

     2277, 2278, 2259, 2279, 2260, 2280, 2281, 2261, 2282, 2262,
     2283, 2263, 2285, 2264, 2286, 2216, 2216, 2216, 2288, 2265,
     2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
     2277, 2278, 2290, 2279, 2291, 2280, 2281, 2292, 2282, 2293,
     2283, 2294, 2285, 2295, 2286, 2216, 2216, 2297, 2288, 2299,
     2300, 2301, 2302, 2304, 2306, 2307, 2310, 2311, 2312, 2313,
     2314, 2315, 2290, 2316, 2291, 2318, 2319, 2292, 2320, 2293,
     2321, 2294, 2322, 2295, 2323, 2324, 2325, 2297, 2326, 2299,
     2300, 2301, 2302, 2304, 2306, 2307, 2310, 2311, 2312, 2313,
     2314, 2315, 2327, 2316, 2328, 2318, 2319, 2329, 2320, 2330,

     2321, 2331, 2322, 2332, 2323, 2324, 2325, 2333, 2326, 2334,
     2335, 2336, 2337, 2338, 2339, 2341, 2342, 2345, 2347, 2348,
     2352, 2353, 2327, 2354, 2328, 2356, 2358, 2329, 2359, 2330,
     2360, 2331, 2361, 2332, 2362, 2363, 2364, 2333, 2366, 2334,
     2335, 2336, 2337, 2338, 2339, 2341, 2342, 2345, 2347, 2348,
     2352, 2353, 2367, 2354, 2368, 2356, 2358, 2369, 2359, 2371,
     2360, 2374, 2361, 2376, 2362, 2363, 2364, 2377, 2366, 2378,
     2379, 2380, 2381, 2382, 2383, 2383, 2384, 2385, 2386, 2387,
     2388, 2389, 2367, 2390, 2368, 2391, 2392, 2369, 2393, 2371,
     2395, 2374, 2394, 2376, 2396, 2394, 2397, 2377, 2398, 2378,

     2379, 2380, 2381, 2382, 2383, 2383, 2384, 2385, 2386, 2387,
     2388, 2389, 2399, 2390, 2400, 2391, 2392, 2401, 2393, 2402,
     2395, 2403, 2394, 2404, 2396, 2394, 2397, 2405, 2398, 2406,
     2407, 2408, 2406, 2409, 2410, 2411, 2412, 2413, 2417, 2418,
     2419, 2420, 2399, 2421, 2400, 2422, 2423, 2401, 2425, 2402,
     2426, 2403, 2427, 2404, 2428, 2429, 2430, 2405, 2431, 2406,
     2407, 2408, 2406, 2409, 2410, 2411, 2412, 2413, 2417, 2418,
     2419, 2420, 2432, 2421, 2433, 2422, 2423, 2434, 2425, 2435,
     2426, 2436, 2427, 2437, 2428, 2429, 2430, 2438, 2431, 2439,
     2441, 2442, 2443, 2444, 2446, 2439, 2447, 2448, 2449, 2444,

     2450, 2451, 2432, 2452, 2433, 2453, 2455, 2434, 2439, 2435,
     2458, 2436, 2444, 2437, 2460, 2463, 2464, 2438, 2465, 2439,
     2441, 2442, 2443, 2444, 2446, 2439, 2447, 2448, 2449, 2444,
     2450, 2451, 2468, 2452, 2469, 2453, 2455, 2470, 2439, 2471,
     2458, 2472, 2444, 2477, 2460, 2463, 2464, 2478, 2465, 2479,
     2480, 2481, 2482, 2483, 2484, 2486, 2487, 2488, 2489, 2490,
     2491, 2492, 2468, 2493, 2469, 2495, 2497, 2470, 2498, 2471,
     2499, 2472, 2500, 2477, 2501, 2502, 2503, 2478, 2504, 2479,
     2480, 2481, 2482, 2483, 2484, 2486, 2487, 2488, 2489, 2490,
     2491, 2492, 2506, 2493, 2508, 2495, 2497, 2510, 2498, 2511,

     2499, 2512, 2500, 2513, 2501, 2502, 2503,    0, 2504, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,    0,
     2515,    0, 2506, 2516, 2508, 2517, 2518, 2510, 2521, 2511,
     2522, 2512,    0, 2513, 2514, 2514,    0, 2514, 2514, 2514,
     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
     2515, 2514, 2523, 2516, 2524, 2517, 2518, 2525, 2521, 2526,
     2522, 2527, 2514, 2514, 2514, 2514, 2514, 2528, 2529, 2530,
     2532, 2533, 2534, 2535, 2536, 2537, 2539, 2540, 2541, 2542,
     2543, 2544, 2523, 2545, 2524, 2546, 2548, 2525, 2549, 2526,
     2550, 2527, 2552, 2514, 2514, 2514, 2553, 2528, 2529, 2530,

     2532, 2533, 2534, 2535, 2536, 2537, 2539, 2540, 2541, 2542,
     2543, 2544, 2554, 2545, 2555, 2546, 2548, 2557, 2549, 2559,
     2550, 2560, 2552, 2514, 2514, 2561, 2553, 2562, 2564, 2565,
     2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
     2576, 2577, 2554, 2578, 2555, 2579, 2580, 2557, 2581, 2559,
     2583, 2560, 2584, 2585, 2586, 2561, 2588, 2562, 2564, 2565,
     2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
     2576, 2577, 2589, 2578, 2590, 2579, 2580, 2591, 2581, 2592,
     2583, 2593, 2584, 2585, 2586, 2596, 2588, 2597, 2598, 2599,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,

     2610, 2611, 2589, 2612, 2590, 2613, 2613, 2591, 2614, 2592,
     2615, 2593, 2617, 2617, 2618, 2596, 2619, 2597, 2598, 2599,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2621, 2612, 2624, 2613, 2613, 2626, 2614,    0,
     2615,    0, 2617, 2617, 2618,    0, 2619,    0,    0,    0,
        0, 2627, 2628, 2628, 2628, 2628, 2628, 2628, 2628, 2628,
     2628, 2628, 2621,    0, 2624, 2625, 2625, 2626, 2625, 2625,
     2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625,
     2625, 2627, 2625, 2632, 2634, 2635, 2628, 2638, 2644, 2645,
     2646, 2647, 2649, 2625, 2625, 2625, 2625, 2625, 2629, 2629,

     2629, 2629, 2629, 2629, 2629, 2629, 2629, 2629, 2651, 2653,
     2654, 2655, 2656, 2632, 2634, 2635, 2628, 2638, 2644, 2645,
     2646, 2647, 2649, 2659, 2625, 2625, 2625, 2660, 2662, 2664,
     2666, 2667, 2629,    0,    0, 2668,    0,    0, 2651, 2653,
     2654, 2655, 2656,    0,    0,    0,    0,    0,    0, 2669,
        0, 2673, 2674, 2659, 2625, 2625, 2675, 2660, 2662, 2664,
     2666, 2667, 2629, 2661, 2661, 2668, 2661, 2661, 2661, 2661,
     2661, 2661, 2661, 2661, 2661, 2661, 2661, 2661, 2661, 2669,
     2661, 2673, 2674, 2676, 2677, 2678, 2675, 2680, 2681, 2682,
     2683, 2661, 2661, 2661, 2661, 2661, 2685, 2686, 2687, 2688,

     2689, 2690, 2691, 2692, 2693, 2694, 2696, 2697, 2698, 2699,
     2702, 2703, 2704, 2676, 2677, 2678, 2705, 2680, 2681, 2682,
     2683, 2707, 2661, 2661, 2661,    0, 2685, 2686, 2687, 2688,
     2689, 2690, 2691, 2692, 2693, 2694, 2696, 2697, 2698, 2699,
     2702, 2703, 2704, 2708, 2709, 2710, 2705, 2711, 2712, 2714,
     2716, 2707, 2661, 2661, 2663, 2663,    0, 2663, 2663, 2663,
     2663, 2663, 2663, 2663, 2663, 2663, 2663, 2663, 2663, 2663,
     2718, 2663, 2719, 2708, 2709, 2710, 2722, 2711, 2712, 2714,
     2716, 2725, 2663, 2663, 2663, 2663, 2663, 2726, 2728, 2730,
     2731, 2732, 2734, 2735, 2736, 2737, 2741, 2743, 2744, 2745,

     2718, 2746, 2719, 2750, 2751, 2753, 2722, 2754, 2756, 2758,
     2759, 2725, 2761, 2663, 2663, 2663,    0, 2726, 2728, 2730,
     2731, 2732, 2734, 2735, 2736, 2737, 2741, 2743, 2744, 2745,
        0, 2746,    0, 2750, 2751, 2753, 2762, 2754, 2756, 2758,
     2759,    0, 2761, 2663, 2663, 2748, 2748,    0, 2748, 2748,
     2748, 2748, 2748, 2748, 2748, 2748, 2748, 2748, 2748, 2748,
     2748, 2752, 2748, 2757, 2763, 2764, 2762, 2765, 2766, 2752,
     2767, 2757, 2768, 2748, 2748, 2748, 2748, 2748, 2769, 2752,
     2770, 2757, 2771, 2773, 2774, 2775, 2776, 2777, 2779, 2780,
     2781, 2752, 2782, 2757, 2763, 2764, 2784, 2765, 2766, 2752,

     2767, 2757, 2768, 2785, 2748, 2748, 2748, 2786, 2769, 2752,
     2770, 2757, 2771, 2773, 2774, 2775, 2776, 2777, 2779, 2780,
     2781, 2787, 2782, 2789, 2791, 2792, 2784, 2793, 2794, 2796,
     2797, 2798, 2799, 2785, 2748, 2748, 2800, 2786, 2801, 2802,
     2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812,
     2813, 2787, 2814, 2789, 2791, 2792, 2815, 2793, 2794, 2796,
     2797, 2798, 2799, 2819, 2820, 2821, 2800, 2822, 2801, 2802,
     2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812,
     2813, 2826, 2814, 2828, 2829, 2830, 2815, 2831, 2832, 2833,
        0,    0, 2835, 2819, 2820, 2821,    0, 2822,    0,    0,

        0,    0,    0,    0,    0,    0, 2836,    0, 2837, 2838,
     2839, 2826, 2841, 2828, 2829, 2830, 2842, 2831, 2832, 2833,
     2834, 2834, 2835, 2834, 2834, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 2834, 2834, 2834, 2834, 2836, 2834, 2837, 2838,
     2839, 2846, 2841, 2851, 2852, 2854, 2842, 2856, 2834, 2834,
     2834, 2834, 2834, 2858, 2860, 2862, 2865, 2867, 2868, 2869,
     2870, 2871, 2834, 2872, 2874, 2871, 2875, 2876, 2877, 2878,
     2879, 2846, 2880, 2851, 2852, 2854, 2882, 2856, 2881, 2834,
     2834, 2834, 2881, 2858, 2860, 2862, 2865, 2867, 2868, 2869,
     2870, 2871, 2834, 2872, 2874, 2871, 2875, 2876, 2877, 2878,

     2879, 2884, 2880, 2885, 2886, 2887, 2882, 2888, 2881, 2834,
     2834,    0, 2881, 2883, 2883,    0, 2883, 2883, 2883, 2883,
     2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2891,
     2883, 2884, 2892, 2885, 2886, 2887, 2895, 2888, 2897, 2898,
     2899, 2883, 2883, 2883, 2883, 2883, 2900, 2902, 2904, 2906,
     2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2891,
     2916, 2917, 2892, 2918, 2919, 2920, 2895, 2921, 2897, 2898,
     2899, 2922, 2883, 2883, 2883,    0, 2900, 2902, 2904, 2906,
     2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915,    0,
     2916, 2917, 2923, 2918, 2919, 2920, 2925, 2921, 2926, 2927,

     2928, 2922, 2883, 2883, 2901, 2901,    0, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,
     2929, 2901, 2923, 2930, 2931, 2932, 2925, 2933, 2926, 2927,
     2928, 2934, 2901, 2901, 2901, 2901, 2901, 2935, 2936, 2937,
     2938, 2939, 2940, 2941, 2942, 2944, 2901, 2945, 2946, 2947,
     2929, 2948, 2951, 2930, 2931, 2932, 2952, 2933, 2953, 2954,
     2959, 2934, 2963, 2901, 2901, 2901,    0, 2935, 2936, 2937,
     2938, 2939, 2940, 2941, 2942, 2944, 2901, 2945, 2946, 2947,
        0, 2948, 2951, 2965, 2969, 2970, 2952, 2971, 2953, 2954,
     2959, 2975, 2963, 2901, 2901, 2903, 2903,    0, 2903, 2903,

     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2967, 2903, 2965, 2969, 2970, 2976, 2971, 2977, 2967,
     2973, 2975, 2978, 2903, 2903, 2903, 2903, 2903, 2973, 2980,
     2982, 2983, 2984, 2985, 2986, 2987, 2988, 2903, 2989, 2990,
     2991, 2967, 2993, 2994, 2996, 2997, 2976, 2998, 2977, 2967,
     2973, 3000, 2978, 3001, 2903, 2903, 2903,    0, 2973, 2980,
     2982, 2983, 2984, 2985, 2986, 2987, 2988, 2903, 2989, 2990,
     2991,    0, 2993, 2994, 2996, 2997, 3003, 2998, 3004, 3007,
     3008, 3000, 3009, 3001, 2903, 2903, 2955, 2955,    0, 2955,
     2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955,

     2955, 2955, 3010, 2955, 3011, 3012, 3003, 3013, 3004, 3007,
     3008, 3014, 3009, 3017, 2955, 2955, 2955, 2955, 2955, 3018,
     3019, 3013, 3020, 3021, 3024, 3025, 3030, 3031, 3032, 3033,
     3034, 3038, 3010, 3039, 3011, 3012, 3020, 3013, 3040, 3041,
     3042, 3014,    0, 3017, 3045, 2955, 2955, 2955,    0, 3018,
     3019, 3013, 3020, 3021, 3024, 3025, 3030, 3031, 3032, 3033,
     3034, 3038,    0, 3039,    0, 3046, 3020, 3047, 3040, 3041,
     3042, 3044, 3044, 3049, 3045, 2955, 2955, 2974, 2974,    0,
     2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974,
     2974, 2974, 2974, 3050, 2974, 3046, 3051, 3047, 3052, 3053,

     3056, 3044, 3044, 3049, 3057, 2974, 2974, 2974, 2974, 2974,
     3055, 3055, 3058, 3059, 3060, 3062, 3063, 3064, 3065, 3070,
     3067, 3071, 3078, 3050, 3067, 3079, 3051, 3073, 3052, 3053,
     3056, 3073, 3065, 3080, 3057, 3071, 2974, 2974, 2974,    0,
     3055, 3055, 3058, 3059, 3060, 3062, 3063, 3064, 3065, 3070,
     3067, 3071, 3078,    0, 3067, 3079,    0, 3073,    0, 3082,
        0, 3073, 3065, 3080, 3083, 3071, 2974, 2974, 3022, 3022,
        0, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022,
     3022, 3022, 3022, 3022, 3068, 3022, 3074, 3084, 3068, 3082,
     3074, 3085, 3086, 3087, 3083, 3088, 3022, 3022, 3022, 3022,

     3022, 3089, 3090, 3068, 3093, 3074, 3094, 3098, 3099, 3101,
     3102, 3103, 3104, 3105, 3068, 3107, 3074, 3084, 3068, 3108,
     3074, 3085, 3086, 3087, 3109, 3088, 3110, 3022, 3022, 3022,
        0, 3089, 3090, 3068, 3093, 3074, 3094, 3098, 3099, 3101,
     3102, 3103, 3104, 3105,    0, 3107,    0, 3111, 3112, 3108,
     3113, 3114, 3115, 3116, 3109, 3117, 3110, 3022, 3022, 3023,
     3023,    0, 3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023,
     3023, 3023, 3023, 3023, 3023, 3118, 3023, 3111, 3112, 3119,
     3113, 3114, 3115, 3116, 3120, 3117, 3121, 3023, 3023, 3023,
     3023, 3023, 3122, 3126, 3127, 3129, 3128, 3132, 3133, 3135,

     3138, 3128, 3139, 3140, 3142, 3118, 3143, 3144, 3146, 3119,
     3147, 3128, 3148, 3149, 3120, 3128, 3121, 3150, 3023, 3023,
     3023,    0, 3122, 3126, 3127, 3129, 3128, 3132, 3133, 3135,
     3138, 3128, 3139, 3140, 3142,    0, 3143, 3144, 3146, 3151,
     3147, 3128, 3148, 3149, 3153, 3128, 3154, 3150, 3023, 3023,
     3054, 3054,    0, 3054, 3054, 3054, 3054, 3054, 3054, 3054,
     3054, 3054, 3054, 3054, 3054, 3054, 3155, 3054, 3134, 3151,
     3156, 3158, 3160, 3134, 3153, 3161, 3154, 3162, 3054, 3054,
     3054, 3054, 3054, 3134, 3164, 3165, 3166, 3134, 3167, 3168,
     3170, 3171, 3167, 3172, 3173, 3174, 3155, 3175, 3134, 3174,

     3156, 3158, 3160, 3134, 3177, 3161, 3178, 3162, 3179, 3054,
     3054, 3054,    0, 3134, 3164, 3165, 3166, 3134, 3167, 3168,
     3170, 3171, 3167, 3172, 3173, 3174,    0, 3175,    0, 3174,
     3181, 3182, 3184, 3185, 3177, 3186, 3178, 3187, 3179, 3054,
     3054, 3072, 3072,    0, 3072, 3072, 3072, 3072, 3072, 3072,
     3072, 3072, 3072, 3072, 3072, 3072, 3072, 3191, 3072, 3192,
     3181, 3182, 3184, 3185, 3193, 3186, 3195, 3187, 3196, 3072,
     3072, 3072, 3072, 3072, 3188, 3188, 3197, 3198, 3199, 3199,
     3202, 3203, 3204, 3209, 3210, 3212, 3213, 3191, 3214, 3192,
     3216, 3215, 3217, 3219, 3193, 3215, 3195, 3220, 3196, 3221,

     3072, 3072, 3072,    0, 3188, 3188, 3197, 3198, 3199, 3199,
     3202, 3203, 3204, 3209, 3210, 3212, 3213,    0, 3214,    0,
     3216, 3215, 3217, 3219,    0, 3215, 3223, 3220,    0, 3221,
     3072, 3072, 3075, 3075,    0, 3075, 3075, 3075, 3075, 3075,
     3075, 3075, 3075, 3075, 3075, 3075, 3075, 3075, 3222, 3075,
     3224, 3225, 3222, 3211, 3218, 3227, 3223, 3211, 3218, 3228,
     3075, 3075, 3075, 3075, 3075, 3211, 3218, 3229, 3231, 3232,
     3233, 3234, 3235, 3236, 3237, 3238, 3211, 3218, 3222, 3239,
     3224, 3225, 3222, 3211, 3218, 3227, 3240, 3211, 3218, 3228,
     3243, 3075, 3075, 3075,    0, 3211, 3218, 3229, 3231, 3232,

     3233, 3234, 3235, 3236, 3237, 3238, 3211, 3218,    0, 3239,
        0, 3244, 3245, 3246, 3247, 3248, 3240, 3249, 3250, 3251,
     3243, 3075, 3075, 3081, 3081,    0, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3252,
     3081, 3244, 3245, 3246, 3247, 3248, 3253, 3249, 3250, 3251,
     3254, 3081, 3081, 3081, 3081, 3081, 3255, 3256, 3258, 3259,
     3260, 3261, 3263, 3264, 3266, 3267, 3268, 3269, 3270, 3252,
     3271, 3273, 3274, 3275, 3276, 3277, 3253, 3278, 3279, 3280,
     3254, 3281, 3081, 3081, 3081,    0, 3255, 3256, 3258, 3259,
     3260, 3261, 3263, 3264, 3266, 3267, 3268, 3269, 3270,    0,

     3271, 3273, 3274, 3275, 3276, 3277, 3283, 3278, 3279, 3280,
     3284, 3281, 3081, 3081, 3097, 3097,    0, 3097, 3097, 3097,
     3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097,
     3286, 3097, 3290, 3298, 3299, 3301, 3283, 3302, 3303, 3304,
     3284, 3306, 3097, 3097, 3097, 3097, 3097, 3307, 3309, 3310,
     3311, 3312, 3314, 3315, 3317, 3318, 3319, 3320, 3321, 3324,
     3286, 3325, 3290, 3298, 3299, 3301, 3326, 3302, 3303, 3304,
     3327, 3306, 3328, 3097, 3097, 3097,    0, 3307, 3309, 3310,
     3311, 3312, 3314, 3315, 3317, 3318, 3319, 3320, 3321, 3324,
        0, 3325,    0, 3329, 3330, 3333, 3326, 3334, 3335, 3336,

     3327, 3337, 3328, 3097, 3097, 3176, 3176,    0, 3176, 3176,
     3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176,
     3176, 3338, 3176, 3329, 3330, 3333, 3339, 3334, 3335, 3336,
     3340, 3337, 3341, 3176, 3176, 3176, 3176, 3176, 3342, 3344,
     3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3355,
     3356, 3338, 3357, 3358, 3359, 3360, 3339, 3361, 3362, 3363,
     3340, 3364, 3341, 3365, 3176, 3176, 3176,    0, 3342, 3344,
     3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3355,
     3356,    0, 3357, 3358, 3359, 3360, 3366, 3361, 3362, 3363,
     3367, 3364, 3368, 3365, 3176, 3176, 3206, 3206,    0, 3206,

     3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206, 3206,
     3206, 3206, 3369, 3206, 3370, 3371, 3366, 3372, 3373, 3374,
     3367, 3375, 3368, 3376, 3206, 3206, 3206, 3206, 3206, 3377,
     3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387,
     3388, 3389, 3369, 3390, 3370, 3371, 3391, 3372, 3373, 3374,
     3392, 3375, 3393, 3376, 3394, 3206, 3206, 3206,    0, 3377,
     3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387,
     3388, 3389,    0, 3390,    0, 3395, 3391, 3396, 3397, 3398,
     3392, 3399, 3393, 3400, 3394, 3206, 3206, 3230, 3230,    0,
     3230, 3230, 3230, 3230, 3230, 3230, 3230, 3230, 3230, 3230,

     3230, 3230, 3230, 3402, 3230, 3395, 3403, 3396, 3397, 3398,
     3404, 3399, 3405, 3400, 3408, 3230, 3230, 3230, 3230, 3230,
     3409, 3410, 3411, 3413, 3414, 3415, 3417, 3421, 3422, 3423,
     3425, 3426, 3427, 3402, 3428, 3429, 3403, 3430, 3432, 3433,
     3404, 3434, 3405, 3435, 3408, 3436, 3230, 3230, 3230,    0,
     3409, 3410, 3411, 3413, 3414, 3415, 3417, 3421, 3422, 3423,
     3425, 3426, 3427,    0, 3428, 3429, 3443, 3430, 3432, 3433,
     3445, 3434, 3446, 3435, 3450, 3436, 3230, 3230, 3242, 3242,
        0, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242,
     3242, 3242, 3242, 3242, 3452, 3242, 3443, 3453, 3454, 3455,

     3445, 3456, 3446, 3458, 3450, 3459, 3242, 3242, 3242, 3242,
     3242, 3460, 3461, 3464, 3465, 3466, 3468, 3469, 3470, 3471,
     3474, 3475, 3476, 3477, 3452, 3479, 3478, 3453, 3454, 3455,
     3480, 3456, 3478, 3458, 3481, 3459, 3483, 3242, 3242, 3242,
        0, 3460, 3461, 3464, 3465, 3466, 3468, 3469, 3470, 3471,
     3474, 3475, 3476, 3477,    0, 3479, 3478, 3482, 3484, 3485,
     3480, 3487, 3478, 3482, 3481, 3488, 3483, 3242, 3242, 3262,
     3262,    0, 3262, 3262, 3262, 3262, 3262, 3262, 3262, 3262,
     3262, 3262, 3262, 3262, 3262, 3492, 3262, 3482, 3484, 3485,
     3493, 3487, 3494, 3482, 3495, 3488, 3497, 3262, 3262, 3262,

     3262, 3262, 3498, 3499, 3502, 3503, 3504, 3506, 3507, 3508,
     3509, 3510, 3511, 3512, 3513, 3492, 3514, 3515, 3516, 3517,
     3493, 3518, 3494, 3519, 3495, 3520, 3497, 3521, 3262, 3262,
     3262,    0, 3498, 3499, 3502, 3503, 3504, 3506, 3507, 3508,
     3509, 3510, 3511, 3512, 3513,    0, 3514, 3515, 3516, 3517,
     3522, 3518, 3523, 3519, 3524, 3520, 3529, 3521, 3262, 3262,
     3297, 3297,    0, 3297, 3297, 3297, 3297, 3297, 3297, 3297,
     3297, 3297, 3297, 3297, 3297, 3297, 3530, 3297, 3531, 3532,
     3522, 3533, 3523, 3535, 3524, 3536, 3529, 3534, 3297, 3297,
     3297, 3297, 3297, 3534, 3537, 3538, 3539, 3540, 3541, 3542,

     3543, 3544, 3545, 3546, 3541, 3549, 3530, 3554, 3531, 3532,
        0, 3533,    0, 3535, 3557, 3536, 3558, 3534, 3559, 3297,
     3297, 3297,    0, 3534, 3537, 3538, 3539, 3540, 3541, 3542,
     3543, 3544, 3545, 3546, 3541, 3549,    0, 3554,    0, 3547,
     3547, 3552, 3552,    0, 3557, 3561, 3558,    0, 3559, 3297,
     3297, 3308, 3308,    0, 3308, 3308, 3308, 3308, 3308, 3308,
     3308, 3308, 3308, 3308, 3308, 3308, 3308,    0, 3308, 3547,
     3547, 3552, 3552, 3560, 3566, 3561, 3567, 3560, 3566, 3308,
     3308, 3308, 3308, 3308, 3569, 3560, 3565, 3565, 3571, 3575,
     3575, 3577, 3579, 3580, 3581, 3582, 3560, 3566,    0, 3583,

     3584, 3585, 3586, 3560, 3566, 3576, 3567, 3560, 3566, 3576,
     3308, 3308, 3308,    0, 3569, 3560, 3565, 3565, 3571, 3575,
     3575, 3577, 3579, 3580, 3581, 3582, 3560, 3566, 3576, 3583,
     3584, 3585, 3586,    0, 3587, 3576, 3588,    0, 3589, 3576,
     3308, 3308, 3420, 3420,    0, 3420, 3420, 3420, 3420, 3420,
     3420, 3420, 3420, 3420, 3420, 3420, 3420, 3420, 3576, 3420,
     3591, 3593, 3594, 3570, 3587, 3595, 3588, 3570, 3589, 3596,
     3420, 3420, 3420, 3420, 3420, 3570, 3597, 3598, 3600, 3601,
     3602, 3604, 3606, 3609, 3597, 3610, 3570, 3601, 3611, 3614,
     3591, 3593, 3594, 3570, 3615, 3595, 3618, 3570, 3622, 3596,

     3624, 3420, 3420, 3420,    0, 3570, 3597, 3598, 3600, 3601,
     3602, 3604, 3606, 3609, 3597, 3610, 3570, 3601, 3611, 3614,
        0, 3625, 3626, 3627, 3615, 3628, 3618, 3629, 3622, 3630,
     3624, 3420, 3420, 3431, 3431,    0, 3431, 3431, 3431, 3431,
     3431, 3431, 3431, 3431, 3431, 3431, 3431, 3431, 3431, 3631,
     3431, 3625, 3626, 3627, 3632, 3628, 3633, 3629, 3634, 3630,
     3635, 3431, 3431, 3431, 3431, 3431, 3636, 3637, 3638, 3639,
     3640, 3641, 3642, 3643, 3644, 3645, 3648, 3651, 3652, 3631,
     3653, 3654, 3655, 3656, 3632, 3657, 3633, 3660, 3634, 3661,
     3635,    0, 3431, 3431, 3431,    0, 3636, 3637, 3638, 3639,

     3640, 3641, 3642, 3643, 3644, 3645, 3648, 3651, 3652,    0,
     3653, 3654, 3655, 3656, 3665, 3657, 3666, 3660, 3669, 3661,
     3662, 3662, 3431, 3431, 3448, 3448,    0, 3448, 3448, 3448,
     3448, 3448, 3448, 3448, 3448, 3448, 3448, 3448, 3448, 3448,
     3670, 3448, 3671, 3672, 3665, 3673, 3666, 3676, 3669, 3677,
     3662, 3662, 3448, 3448, 3448, 3448, 3448, 3678, 3678, 3681,
     3682, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693,
     3670, 3694, 3671, 3672, 3695, 3673, 3700, 3676, 3701, 3677,
     3702, 3703, 3704, 3448, 3448, 3448,    0, 3678, 3678, 3681,
     3682, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693,

        0, 3694,    0, 3705, 3695, 3706, 3700, 3707, 3701, 3708,
     3702, 3703, 3704, 3448, 3448, 3451, 3451,    0, 3451, 3451,
     3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451,
     3451, 3709, 3451, 3705, 3710, 3706, 3711, 3707, 3712, 3708,
     3713, 3714, 3715, 3451, 3451, 3451, 3451, 3451, 3718, 3719,
     3720, 3721, 3722, 3723, 3725, 3726, 3727, 3728, 3729, 3730,
     3731, 3709, 3733, 3734, 3710, 3735, 3711, 3736, 3712, 3737,
     3713, 3714, 3715, 3738, 3451, 3451, 3451,    0, 3718, 3719,
     3720, 3721, 3722, 3723, 3725, 3726, 3727, 3728, 3729, 3730,
     3731,    0, 3733, 3734, 3739, 3735, 3740, 3736, 3741, 3737,

     3742, 3743, 3745, 3738, 3451, 3451, 3467, 3467,    0, 3467,
     3467, 3467, 3467, 3467, 3467, 3467, 3467, 3467, 3467, 3467,
     3467, 3467, 3746, 3467, 3739, 3747, 3740, 3748, 3741, 3753,
     3742, 3743, 3745, 3754, 3467, 3467, 3467, 3467, 3467, 3755,
     3758, 3759, 3760, 3761, 3766, 3767, 3768, 3770, 3771, 3772,
     3773, 3774, 3746, 3775, 3776, 3747, 3777, 3748, 3778, 3753,
     3779, 3780, 3781, 3754, 3782, 3467, 3467, 3467,    0, 3755,
     3758, 3759, 3760, 3761, 3766, 3767, 3768, 3770, 3771, 3772,
     3773, 3774,    0, 3775, 3776, 3783, 3777, 3784, 3778, 3786,
     3779, 3780, 3781, 3788, 3782, 3467, 3467, 3472, 3472,    0,

     3472, 3472, 3472, 3472, 3472, 3472, 3472, 3472, 3472, 3472,
     3472, 3472, 3472, 3790, 3472, 3783, 3792, 3784, 3793, 3786,
     3794, 3795, 3796, 3788, 3797, 3472, 3472, 3472, 3472, 3472,
     3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3807, 3809,
     3810, 3811, 3804, 3790, 3813, 3815, 3792, 3817, 3793, 3818,
     3794, 3795, 3796, 3819, 3797, 3804, 3472, 3472, 3472,    0,
     3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3807, 3809,
     3810, 3811, 3804,    0, 3813, 3815, 3820, 3817, 3821, 3818,
        0, 3822, 3823, 3819, 3825, 3804, 3472, 3472, 3473, 3473,
        0, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,

     3473, 3473, 3473, 3473, 3812, 3473, 3820, 3824, 3821, 3829,
     3812, 3822, 3823, 3824, 3825, 3832, 3473, 3473, 3473, 3473,
     3473, 3832, 3833, 3812, 3837, 3842, 3843, 3844, 3847, 3848,
     3849, 3850, 3851, 3852, 3812, 3853, 3855, 3824, 3857, 3829,
     3812, 3858, 3859, 3824, 3860, 3832, 3861, 3473, 3473, 3473,
        0, 3832, 3833, 3812, 3837, 3842, 3843, 3844, 3847, 3848,
     3849, 3850, 3851, 3852,    0, 3853, 3855, 3862, 3857, 3863,
     3864, 3858, 3859, 3865, 3860, 3866, 3861, 3473, 3473, 3528,
     3528,    0, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528,
     3528, 3528, 3528, 3528, 3528, 3867, 3528, 3862, 3868, 3863,

     3864, 3869, 3870, 3865, 3871, 3866, 3872, 3528, 3528, 3528,
     3528, 3528, 3873, 3874, 3876, 3875, 3877, 3878, 3879, 3880,
     3881, 3882, 3883, 3875, 3885, 3867, 3886, 3887, 3868, 3890,
     3891, 3869, 3870, 3875, 3871, 3892, 3872, 3893, 3528, 3528,
     3528,    0, 3873, 3874, 3876, 3875, 3877, 3878, 3879, 3880,
     3881, 3882, 3883, 3875, 3885,    0, 3886, 3887, 3895, 3890,
     3891, 3896, 3898, 3875,    0, 3892, 3899, 3893, 3528, 3528,
     3572, 3572,    0, 3572, 3572, 3572, 3572, 3572, 3572, 3572,
     3572, 3572, 3572, 3572, 3572, 3572, 3884, 3572, 3895, 3900,
     3902, 3896, 3898, 3903, 3884, 3905, 3899, 3908, 3572, 3572,

     3572, 3572, 3572, 3909, 3884, 3912, 3913, 3914, 3915, 3916,
     3917, 3920, 3922, 3923, 3925, 3926, 3884, 3927, 3928, 3900,
     3902, 3929, 3930, 3903, 3884, 3905, 3931, 3908, 3932, 3572,
     3572, 3572,    0, 3909, 3884, 3912, 3913, 3914, 3915, 3916,
     3917, 3920, 3922, 3923, 3925, 3926,    0, 3927, 3928, 3933,
     3934, 3929, 3930, 3935, 3936, 3937, 3931, 3938, 3932, 3572,
     3572, 3573, 3573,    0, 3573, 3573, 3573, 3573, 3573, 3573,
     3573, 3573, 3573, 3573, 3573, 3573, 3573, 3939, 3573, 3933,
     3934, 3941, 3942, 3935, 3936, 3937, 3943, 3938, 3944, 3573,
     3573, 3573, 3573, 3573, 3945, 3946, 3947, 3948, 3949, 3950,

     3952, 3953, 3954, 3955, 3956, 3957, 3958, 3939, 3961, 3963,
     3964, 3941, 3942, 3965, 3968, 3970, 3943, 3971, 3944, 3972,
     3573, 3573, 3573,    0, 3945, 3946, 3947, 3948, 3949, 3950,
     3952, 3953, 3954, 3955, 3956, 3957, 3958,    0, 3961, 3963,
     3964, 3973, 3974, 3965, 3968, 3970, 3975, 3971, 3976, 3972,
     3573, 3573, 3574, 3574,    0, 3574, 3574, 3574, 3574, 3574,
     3574, 3574, 3574, 3574, 3574, 3574, 3574, 3574, 3977, 3574,
     3978, 3973, 3974, 3979, 3980, 3981, 3975, 3982, 3976, 3983,
     3574, 3574, 3574, 3574, 3574, 3984, 3985, 3986, 3987, 3988,
     3989, 3990, 3991, 3992, 3993, 3998, 3999, 4002, 3977, 4003,

     3978, 4004, 4005, 3979, 3980, 3981, 4006, 3982, 4008, 3983,
     4009, 3574, 3574, 3574,    0, 3984, 3985, 3986, 3987, 3988,
     3989, 3990, 3991, 3992, 3993, 3998, 3999, 4002,    0, 4003,
        0, 4004, 4005, 4010, 4011, 4012, 4006, 4013, 4008, 4015,
     4009, 3574, 3574, 3578, 3578,    0, 3578, 3578, 3578, 3578,
     3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 4016,
     3578, 4017, 4019, 4010, 4011, 4012, 4020, 4013, 4021, 4015,
     4022, 3578, 3578, 3578, 3578, 3578, 4023, 4024, 4026, 4027,
     4028, 4029, 4032, 4033, 4036, 4037, 4038, 4039, 4040, 4016,
     4041, 4017, 4019, 4043, 4045, 4046, 4020, 4047, 4021, 4048,

     4022, 4049, 3578, 3578, 3578,    0, 4023, 4024, 4026, 4027,
     4028, 4029, 4032, 4033, 4036, 4037, 4038, 4039, 4040,    0,
     4041,    0, 4050, 4043, 4045, 4046, 4051, 4047, 4053, 4048,
     4055, 4049, 3578, 3578, 3675, 3675,    0, 3675, 3675, 3675,
     3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675,
     4056, 3675, 4050, 4057, 4058, 4059, 4051, 4062, 4053, 4063,
     4055, 4064, 3675, 3675, 3675, 3675, 3675, 4065, 4068, 4069,
     4070, 4071, 4073, 4074, 4075, 4078, 4079, 4080, 4081, 4083,
     4056, 4086, 4087, 4057, 4058, 4059, 4088, 4062, 4089, 4063,
     4091, 4064, 4092, 3675, 3675, 3675,    0, 4065, 4068, 4069,

     4070, 4071, 4073, 4074, 4075, 4078, 4079, 4080, 4081, 4083,
        0, 4086, 4087, 4095, 4096, 4097, 4088, 4098, 4089, 4100,
     4091, 4101, 4092, 3675, 3675, 3684, 3684,    0, 3684, 3684,
     3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684,
     3684, 4104, 3684, 4095, 4096, 4097, 4105, 4098, 4106, 4100,
     4107, 4101, 4108, 3684, 3684, 3684, 3684, 3684, 4109, 4114,
     4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124,
     4125, 4104, 4126, 4127, 4128, 4129, 4105, 4130, 4106, 4131,
     4107, 4132, 4108, 4133, 3684, 3684, 3684,    0, 4109, 4114,
     4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124,

     4125,    0, 4126, 4127, 4128, 4129, 4134, 4130, 4135, 4131,
     4136, 4132, 4137, 4133, 3684, 3684, 3697, 3697,    0, 3697,
     3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697,
     3697, 3697, 4140, 3697, 4141, 4142, 4134, 4143, 4135, 4146,
     4136, 4147, 4137, 4148, 3697, 3697, 3697, 3697, 3697, 4149,
     4152, 4153, 4154, 4155, 4156, 4157, 4158, 4153, 4159, 4160,
     4161, 4162, 4140, 4164, 4141, 4142, 4163, 4143, 4165, 4146,
     4166, 4147, 4163, 4148, 4167, 3697, 3697, 3697,    0, 4149,
     4152, 4153, 4154, 4155, 4156, 4157, 4158, 4153, 4159, 4160,
     4161, 4162,    0, 4164,    0, 4168, 4163, 4169, 4165, 4170,

     4166, 4171, 4163, 4172, 4167, 3697, 3697, 3732, 3732,    0,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 4173, 3732, 4168, 4174, 4169, 4175, 4170,
     4176, 4171, 4177, 4172, 4178, 3732, 3732, 3732, 3732, 3732,
     4180, 4181, 4182, 4184, 4185, 4186, 4187, 4188, 4189, 4192,
     4193, 4194, 4195, 4173, 4196, 4197, 4174, 4198, 4175, 4199,
     4176, 4200, 4177, 4203, 4178, 4204, 3732, 3732, 3732,    0,
     4180, 4181, 4182, 4184, 4185, 4186, 4187, 4188, 4189, 4192,
     4193, 4194, 4195,    0, 4196, 4197, 4205, 4198, 4206, 4199,
     4207, 4200, 4208, 4203, 4209, 4204, 3732, 3732, 3757, 3757,

        0, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757,
     3757, 3757, 3757, 3757, 4210, 3757, 4205, 4212, 4206, 4213,
     4207, 4215, 4208, 4216, 4209, 4217, 3757, 3757, 3757, 3757,
     3757, 4218, 4219, 4220, 4221, 4222, 4222, 4223, 4224, 4225,
     4226, 4227, 4228, 4229, 4210, 4230, 4231, 4212,    0, 4213,
     4233, 4215, 4234, 4216, 4235, 4217, 4236, 3757, 3757, 3757,
        0, 4218, 4219, 4220, 4221, 4222, 4222, 4223, 4224, 4225,
     4226, 4227, 4228, 4229,    0, 4230, 4231, 4232, 4232, 4237,
     4233, 4238, 4234, 4239, 4235, 4240, 4236, 3757, 3757, 3816,
     3816,    0, 3816, 3816, 3816, 3816, 3816, 3816, 3816, 3816,

     3816, 3816, 3816, 3816, 3816, 4241, 3816, 4232, 4232, 4237,
     4242, 4238, 4243, 4239, 4244, 4240, 4245, 3816, 3816, 3816,
     3816, 3816, 4246, 4247, 4248, 4249, 4252, 4253, 4254, 4255,
     4256, 4257, 4258, 4259, 4260, 4241, 4263, 4264, 4265, 4266,
     4242, 4267, 4243, 4268, 4244, 4269, 4245, 4270, 3816, 3816,
     3816,    0, 4246, 4247, 4248, 4249, 4252, 4253, 4254, 4255,
     4256, 4257, 4258, 4259, 4260,    0, 4263, 4264, 4265, 4266,
     4271, 4267, 4272, 4268, 4273, 4269, 4275, 4270, 3816, 3816,
     3834, 3834,    0, 3834, 3834, 3834, 3834, 3834, 3834, 3834,
     3834, 3834, 3834, 3834, 3834, 3834, 4276, 3834, 4277, 4278,

     4271, 4279, 4272, 4280, 4273, 4281, 4275, 4282, 3834, 3834,
     3834, 3834, 3834, 4284, 4285, 4286, 4287, 4288, 4289, 4290,
     4291, 4293, 4295, 4297, 4302, 4300, 4276, 4303, 4277, 4278,
     4300, 4279, 4304, 4280, 4305, 4281, 4306, 4282, 4307, 3834,
     3834, 3834,    0, 4284, 4285, 4286, 4287, 4288, 4289, 4290,
     4291, 4293, 4295, 4297, 4302, 4300,    0, 4303,    0, 4308,
     4300, 4311, 4304, 4312, 4305, 4313, 4306, 4314, 4307, 3834,
     3834, 3835, 3835,    0, 3835, 3835, 3835, 3835, 3835, 3835,
     3835, 3835, 3835, 3835, 3835, 3835, 3835, 4309, 3835, 4308,
     4315, 4311, 4309, 4312, 4316, 4313, 4317, 4314, 4319, 3835,

     3835, 3835, 3835, 3835, 4321, 4322, 4323, 4318, 4318, 4324,
     4318, 4326, 4318, 4327, 4325, 4328, 4329, 4309, 4330, 4318,
     4315, 4323, 4309, 4333, 4316, 4334, 4317, 4318, 4319, 4325,
     3835, 3835, 3835,    0, 4321, 4322, 4323, 4318, 4318, 4324,
     4318, 4326, 4318, 4327, 4325, 4328, 4329,    0, 4330, 4318,
     4335, 4323, 4336, 4333,    0, 4334,    0, 4318,    0, 4325,
     3835, 3835, 3838, 3838,    0, 3838, 3838, 3838, 3838, 3838,
     3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 4337, 3838,
     4335, 4338, 4336, 4320, 4320, 4339, 4320, 4342, 4320, 4343,
     3838, 3838, 3838, 3838, 3838, 4320, 4344, 4345, 4346, 4347,

     4348, 4349, 4350, 4320, 4351, 4352, 4353, 4354, 4337, 4355,
     4356, 4338, 4357, 4320, 4320, 4339, 4320, 4342, 4320, 4343,
     4358, 3838, 3838, 3838,    0, 4320, 4344, 4345, 4346, 4347,
     4348, 4349, 4350, 4320, 4351, 4352, 4353, 4354,    0, 4355,
     4356, 4359, 4357, 4360, 4361, 4362, 4363, 4365, 4366, 4367,
     4358, 3838, 3838, 3846, 3846,    0, 3846, 3846, 3846, 3846,
     3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 4369,
     3846, 4359, 4370, 4360, 4361, 4362, 4363, 4365, 4366, 4367,
     4372, 3846, 3846, 3846, 3846, 3846, 4373, 4374, 4376, 4377,
     4378, 4379, 4380, 4383, 4384, 4385, 4386, 4387, 4390, 4369,

     4391, 4392, 4370, 4393, 4394, 4395, 4396, 4397, 4400, 4401,
     4372, 4402, 3846, 3846, 3846,    0, 4373, 4374, 4376, 4377,
     4378, 4379, 4380, 4383, 4384, 4385, 4386, 4387, 4390,    0,
     4391, 4392, 4403, 4393, 4394, 4395, 4396, 4397, 4400, 4401,
     4407, 4402, 3846, 3846, 3901, 3901,    0, 3901, 3901, 3901,
     3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     4408, 3901, 4403, 4411, 4411, 4413, 4414, 4417, 4417, 4418,
     4407, 4419, 3901, 3901, 3901, 3901, 3901, 4420, 4421, 4422,
     4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4430, 4442,
     4408, 4433, 4433, 4411, 4411, 4413, 4414, 4417, 4417, 4418,

     4444, 4419, 4446, 3901, 3901, 3901,    0, 4420, 4421, 4422,
     4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4430, 4442,
        0, 4433, 4433, 4436, 4436, 4439, 4439, 4447, 4448, 4450,
     4444, 4451, 4446, 3901, 3901, 3904, 3904,    0, 3904, 3904,
     3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904,
     3904, 4452, 3904, 4436, 4436, 4439, 4439, 4447, 4448, 4450,
     4462, 4451, 4463, 3904, 3904, 3904, 3904, 3904, 4464, 4466,
     4467, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477,
     4478, 4452, 4479, 4480, 4481, 4482, 4483, 4485, 4490,    0,
     4462, 4492, 4463, 4494, 3904, 3904, 3904,    0, 4464, 4466,

     4467, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477,
     4478, 4495, 4479, 4480, 4481, 4482, 4483, 4485, 4490, 4491,
        0, 4492, 4493, 4494, 3904, 3904, 3906, 3906, 4496, 3906,
     4497, 3906, 4498, 4499, 4491, 4500, 4501, 4493, 3906, 4502,
     4503, 4495, 4504, 4505, 4506, 3906, 3906, 4508, 4510, 4491,
     3906,    0, 4493, 4511,    0, 4512, 3906, 3906, 4496, 3906,
     4497, 3906, 4498, 4499, 4491, 4500, 4501, 4493, 3906, 4502,
     4503,    0, 4504, 4505, 4506, 3906, 3906, 4508, 4510, 4513,
     3906, 3910, 3910, 4511, 3910, 4512, 3910, 4514, 4515, 4516,
     4517,    0,    0, 3910,    0,    0,    0,    0,    0,    0,

     3910, 3910,    0,    0,    0, 3910,    0,    0,    0, 4513,
        0, 3910, 3910,    0, 3910,    0, 3910, 4514, 4515, 4516,
     4517,    0,    0, 3910,    0,    0,    0,    0,    0,    0,
     3910, 3910,    0,    0,    0, 3910, 3951, 3951,    0, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951,    0, 3951,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3951, 3951, 3951, 3951, 3951,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3951, 3951, 3951,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3951, 3951, 4025, 4025,    0,
     4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025,
     4025, 4025, 4025,    0, 4025,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4025, 4025, 4025, 4025, 4025,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4025, 4025, 4025,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4025, 4025, 4054, 4054,
        0, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054,
     4054, 4054, 4054, 4054,    0, 4054,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4054, 4054, 4054, 4054,
     4054,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4054, 4054, 4054,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 4054, 4054, 4076,
     4076,    0, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076,    0, 4076,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4076, 4076, 4076,
     4076, 4076,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4076, 4076,
     4076,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4076, 4076,

     4077, 4077,    0, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077,    0, 4077,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4077, 4077,
     4077, 4077, 4077,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4077,
     4077, 4077,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4077,
     4077, 4082, 4082,    0, 4082, 4082, 4082, 4082, 4082, 4082,

     4082, 4082, 4082, 4082, 4082, 4082, 4082,    0, 4082,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4082,
     4082, 4082, 4082, 4082,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4082, 4082, 4082,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4082, 4082, 4201, 4201,    0, 4201, 4201, 4201, 4201, 4201,
     4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201,    0, 4201,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4201, 4201, 4201, 4201, 4201,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4201, 4201, 4201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4201, 4201, 4283, 4283,    0, 4283, 4283, 4283, 4283,
     4283, 4283, 4283, 4283, 4283, 4283, 4283, 4283, 4283,    0,
     4283,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4283, 4283, 4283, 4283, 4283,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4283, 4283, 4283,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4283, 4283, 4294, 4294,    0, 4294, 4294, 4294,
     4294, 4294, 4294, 4294, 4294, 4294, 4294, 4294, 4294, 4294,
        0, 4294,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4294, 4294, 4294, 4294, 4294,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4294, 4294, 4294,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4294, 4294, 4299, 4299,    0, 4299, 4299,
     4299, 4299, 4299, 4299, 4299, 4299, 4299, 4299, 4299, 4299,
     4299,    0, 4299,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4299, 4299, 4299, 4299, 4299,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4299,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4299, 4299, 4299,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4299,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4299, 4299, 4371, 4371,    0, 4371,
     4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371,
     4371, 4371,    0, 4371,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4371, 4371, 4371, 4371, 4371,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4371, 4371, 4371,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4371, 4371, 4389, 4389,    0,
     4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389,
     4389, 4389, 4389,    0, 4389,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4389, 4389, 4389, 4389, 4389,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4389, 4389, 4389,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4389, 4389, 4412, 4412,
        0, 4412, 4412, 4412, 4412, 4412, 4412, 4412, 4412, 4412,
     4412, 4412, 4412, 4412,    0, 4412,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4412, 4412, 4412, 4412,
     4412,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4412, 4412, 4412,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4412, 4412, 4416,
     4416,    0, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416,
     4416, 4416, 4416, 4416, 4416,    0, 4416,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4416, 4416, 4416,
     4416, 4416,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4416, 4416,
     4416,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4416, 4416,
     4487, 4487,    0, 4487, 4487, 4487, 4487, 4487, 4487, 4487,
     4487, 4487, 4487, 4487, 4487, 4487,    0, 4487,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4487, 4487,
     4487, 4487, 4487,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4487,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4487,
     4487, 4487,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4487,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4487,

     4487, 4521, 4521, 4521, 4521, 4521, 4522, 4522, 4522, 4522,
     4522, 4523, 4523, 4525,    0, 4525, 4525, 4525, 4526, 4526,
     4526, 4527,    0, 4527, 4527, 4527, 4528,    0, 4528, 4528,
     4528, 4529,    0, 4529, 4529, 4529, 4530, 4530, 4530, 4530,
     4530, 4531,    0, 4531, 4531, 4531, 4532,    0, 4532, 4532,
     4532, 4533,    0, 4533, 4533, 4533, 4534,    0, 4534, 4534,
     4534, 4535,    0, 4535, 4535, 4535, 4536,    0, 4536, 4536,
     4536, 4537,    0, 4537, 4537, 4537, 4538,    0, 4538, 4538,
     4538, 4539,    0, 4539, 4539, 4539, 4540,    0, 4540, 4540,
     4540, 4541,    0, 4541, 4541, 4541, 4542,    0, 4542, 4542,

     4542, 4543,    0, 4543, 4543, 4543, 4544,    0, 4544, 4544,
     4544, 4545,    0, 4545, 4545, 4545, 4546,    0, 4546, 4546,
     4546, 4547,    0, 4547, 4547, 4547, 4548,    0, 4548, 4548,
     4548, 4549,    0, 4549, 4549, 4549, 4550,    0, 4550, 4550,
     4550, 4551,    0, 4551, 4551, 4551, 4552,    0, 4552, 4552,
     4552, 4553,    0, 4553, 4553, 4553, 4554,    0, 4554, 4554,
     4554, 4555,    0, 4555, 4555, 4555, 4556,    0, 4556, 4556,
     4556, 4557,    0, 4557, 4557, 4557, 4558,    0, 4558, 4558,
     4558, 4559,    0, 4559, 4559, 4559, 4560,    0, 4560, 4560,
     4560, 4561,    0, 4561, 4561, 4561, 4562,    0, 4562, 4562,

     4562, 4563,    0, 4563, 4563, 4563, 4564,    0, 4564, 4564,
     4564, 4565,    0, 4565, 4565, 4565, 4566,    0, 4566, 4566,
     4566, 4567,    0, 4567, 4567, 4567, 4568,    0, 4568, 4568,
     4568, 4569,    0, 4569, 4569, 4569, 4570,    0, 4570, 4570,
     4570, 4571,    0, 4571, 4571, 4571, 4572,    0, 4572, 4572,
     4572, 4573,    0, 4573, 4573, 4573, 4574,    0, 4574, 4574,
     4574, 4575,    0, 4575, 4575, 4575, 4576,    0, 4576, 4576,
     4576, 4577,    0, 4577, 4577, 4577, 4578,    0, 4578, 4578,
     4578, 4579,    0, 4579, 4579, 4579, 4580,    0, 4580, 4580,
     4580, 4581,    0, 4581, 4581, 4581, 4582,    0, 4582, 4582,

     4582, 4583,    0, 4583, 4583, 4583, 4584,    0, 4584, 4584,
     4584, 4585,    0, 4585, 4585, 4585, 4586,    0, 4586, 4586,
     4586, 4587,    0, 4587, 4587, 4587, 4588,    0, 4588, 4588,
     4588, 4589,    0, 4589, 4589, 4589, 4590,    0, 4590, 4590,
     4590, 4591,    0, 4591, 4591, 4591, 4592,    0, 4592, 4592,
     4592, 4593,    0, 4593, 4593, 4593, 4594,    0, 4594, 4594,
     4594, 4595,    0, 4595, 4595, 4595, 4596,    0, 4596, 4596,
     4596, 4597,    0, 4597, 4597, 4597, 4598,    0, 4598, 4598,
     4598, 4599,    0, 4599, 4599, 4599, 4600,    0, 4600, 4600,
     4600, 4601,    0, 4601, 4601, 4601, 4602,    0, 4602, 4602,

     4602, 4603,    0, 4603, 4603, 4603, 4604,    0, 4604, 4604,
     4604, 4605,    0, 4605, 4605, 4605, 4606,    0, 4606, 4606,
     4606, 4607,    0, 4607, 4607, 4607, 4608,    0, 4608, 4608,
     4608, 4609,    0, 4609, 4609, 4609, 4610,    0, 4610, 4610,
     4610, 4611,    0, 4611, 4611, 4611, 4612,    0, 4612, 4612,
     4612, 4613,    0, 4613, 4613, 4613, 4614,    0, 4614, 4614,
     4614, 4615,    0, 4615, 4615, 4615, 4616,    0, 4616, 4616,
     4616, 4617,    0, 4617, 4617, 4617, 4618,    0, 4618, 4618,
     4618, 4619,    0, 4619, 4619, 4619, 4620,    0, 4620, 4620,
     4620, 4621,    0, 4621, 4621, 4621, 4622,    0, 4622, 4622,

     4622, 4623,    0, 4623, 4623, 4623, 4624,    0, 4624, 4624,
     4624, 4625,    0, 4625, 4625, 4625, 4626,    0, 4626, 4626,
     4626, 4627,    0, 4627, 4627, 4627, 4628,    0, 4628, 4628,
     4628, 4629,    0, 4629, 4629, 4629, 4630,    0, 4630, 4630,
     4630, 4631,    0, 4631, 4631, 4631, 4632,    0, 4632, 4632,
     4632, 4633,    0, 4633, 4633, 4633, 4634,    0, 4634, 4634,
     4634, 4635,    0, 4635, 4635, 4635, 4636,    0, 4636, 4636,
     4636, 4637,    0, 4637, 4637, 4637, 4638,    0, 4638, 4638,
     4638, 4639,    0, 4639, 4639, 4639, 4640,    0, 4640, 4640,
     4640, 4641,    0, 4641, 4641, 4641, 4642,    0, 4642, 4642,

     4642, 4643,    0, 4643, 4643, 4643, 4644,    0, 4644, 4644,
     4644, 4645,    0, 4645, 4645, 4645, 4646,    0, 4646, 4646,
     4646, 4647,    0, 4647, 4647, 4647, 4648,    0, 4648, 4648,
     4648, 4649,    0, 4649, 4649, 4649, 4650,    0, 4650, 4650,
     4650, 4651,    0, 4651, 4651, 4651, 4652,    0, 4652, 4652,
     4652, 4653,    0, 4653, 4653, 4653, 4654,    0, 4654, 4654,
     4654, 4655,    0, 4655, 4655, 4655, 4656,    0, 4656, 4656,
     4656, 4657,    0, 4657, 4657, 4657, 4658,    0, 4658, 4658,
     4658, 4659,    0, 4659, 4659, 4659, 4660,    0, 4660, 4660,
     4660, 4661,    0, 4661, 4661, 4661, 4662,    0, 4662, 4662,

     4662, 4663,    0, 4663, 4663, 4663, 4664,    0, 4664, 4664,
     4664, 4665,    0, 4665, 4665, 4665, 4666,    0, 4666, 4666,
     4666, 4667,    0, 4667, 4667, 4667, 4668,    0, 4668, 4668,
     4668, 4669,    0, 4669, 4669, 4669, 4670,    0, 4670, 4670,
     4670, 4671,    0, 4671, 4671, 4671, 4672,    0, 4672, 4672,
     4672, 4673,    0, 4673, 4673, 4673, 4674,    0, 4674, 4674,
     4674, 4675,    0, 4675, 4675, 4675, 4676,    0, 4676, 4676,
     4676, 4677,    0, 4677, 4677, 4677, 4678,    0, 4678, 4678,
     4678, 4679,    0, 4679, 4679, 4679, 4680,    0, 4680, 4680,
     4680, 4681,    0, 4681, 4681, 4681, 4682,    0, 4682, 4682,

     4682, 4683,    0, 4683, 4683, 4683, 4684,    0, 4684, 4684,
     4684, 4685,    0, 4685, 4685, 4685, 4686,    0, 4686, 4686,
     4686, 4687,    0, 4687, 4687, 4687, 4688,    0, 4688, 4688,
     4688, 4689,    0, 4689, 4689, 4689, 4690,    0, 4690, 4690,
     4690, 4691,    0, 4691, 4691, 4691, 4692,    0, 4692, 4692,
     4692, 4693,    0, 4693, 4693, 4693, 4694,    0, 4694, 4694,
     4694, 4695,    0, 4695, 4695, 4695, 4696,    0, 4696, 4696,
     4696, 4697,    0, 4697, 4697, 4697, 4698,    0, 4698, 4698,
     4698, 4699,    0, 4699, 4699, 4699, 4700,    0, 4700, 4700,
     4700, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,

     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "..\\comcompiler\\comscanner.l"
#define INITIAL 0
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 8 "..\\comcompiler\\comscanner.l"

	#include <string>
	#include <iostream>
	#include <iomanip>
    #include "../../util/SGF_Debug.h"
	#include "scanner.h"
	
	/* import the parser's token type into a local typedef */
	
	typedef CmdCompiler::Parser::token token;
	typedef CmdCompiler::Parser::token_type token_type;
    /* By default yylex returns int, we use token_type. Unfortunately yyterminate
    * by default returns 0, which is not of token_type. */
    #define yyterminate() return token::END

	
      // used to keep track of location
   	/* The following paragraph suffices to track locations accurately. Each time
 	* yylex is invoked, the begin position is moved onto the end position. */

	#define YY_USER_ACTION yylloc->columns(yyleng);
	/* This disables inclusion of unistd.h, which is not available under Visual C++
 	* on Win32. The C++ scanner uses STL streams instead. */

	#define YY_NO_UNISTD_H


/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 39 "..\\comcompiler\\comscanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* change the name of the scanner class. results in "ExampleFlexLexer" */
#line 4984 "lex.Cmd.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 52 "..\\comcompiler\\comscanner.l"


 /* code to place at the beginning of yylex() */



    // reset location
    yylloc->step();


#line 5122 "lex.Cmd.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4521 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 13892 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("D"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_DOWN" <<endl; 
	return token::CMD_KEY_DOWN; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("F");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_FORWARD" <<endl; 
	return token::CMD_KEY_FORWARD; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("DF");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_DOWN_FORWARD" <<endl; 
	return token::CMD_KEY_DOWN_FORWARD; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("B");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_BACK" <<endl; 
	return token::CMD_KEY_BACK; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("DB");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_DOWN_BACK" <<endl; 
	return token::CMD_KEY_DOWN_BACK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 72 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("UF");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_UP_FORWARD" <<endl; 
	return token::CMD_KEY_UP_FORWARD; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 74 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("U");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_UP" <<endl; 
	return token::CMD_KEY_UP; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("UB");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_KEY_UP_BACK" <<endl; 
	return token::CMD_KEY_UP_BACK; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("a");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_A" <<endl; 
	return token::CMD_BUTTON_A; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("b");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_B" <<endl; 
	return token::CMD_BUTTON_B; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 83 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("c");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_C" <<endl; 
	return token::CMD_BUTTON_C; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 85 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("x");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_X" <<endl; 
	return token::CMD_BUTTON_X; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("y");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_Y" <<endl; 
	return token::CMD_BUTTON_Y; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("z");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_Z" <<endl; 
	 return token::CMD_BUTTON_Z; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 91 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("s"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_BUTTON_S" <<endl; 
	 return token::CMD_BUTTON_S; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_FX: " << yylval->doubleVal  <<endl; 
	return token::KEY_FX;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 97 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloatX(); /*sscanf(yytext,"S%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_SX: " << yylval->doubleVal  <<endl; 
	return token::KEY_SX;}
	YY_BREAK
case 18:
#line 102 "..\\comcompiler\\comscanner.l"
case 19:
#line 103 "..\\comcompiler\\comscanner.l"
case 20:
YY_RULE_SETUP
#line 103 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloat();
				  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer NUMBER= "<< *yytext <<" lenght: "<< yyleng <<" doubleval: "<< setiosflags(ios::fixed) <<setprecision(4) << yylval->doubleVal <<endl;
				 return token::NUMBER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 106 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloat();
				  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer NUMBER= "<< *yytext <<" lenght: "<< yyleng <<" doubleval: "<< setiosflags(ios::fixed) <<setprecision(4) << yylval->doubleVal <<endl;
				 return token::NUMBER;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING 3= "<<  yylval->stringVal->c_str() <<endl;
return token::QUOTESTRING; }			  
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING 2= "<<  yylval->stringVal->c_str() <<endl;
return token::QUOTESTRING; }			  
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 118 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string(yytext, yyleng);
			  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer QUOTESTRING= "<< yylval->stringVal->c_str() <<endl; 
			  return token::QUOTESTRING;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<< yytext[0] <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  *yytext <<endl;
         return token_type (yytext[0]);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 131 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 135 "..\\comcompiler\\comscanner.l"
{	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
            return token_type (yytext[0]);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "..\\comcompiler\\comscanner.l"
{	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
            return token_type (yytext[0]);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 139 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 142 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 146 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }		 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 150 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }         
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 154 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 156 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 158 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }    
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 160 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }  
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 162 "..\\comcompiler\\comscanner.l"
{SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer = "<<  yytext[0] <<endl;
           return token_type (yytext[0]); }      
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 164 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_XOR" <<endl; 
	return token::CMD_XOR; }
	YY_BREAK
/* =============  FUNCTIONS ========================= */
case 46:
YY_RULE_SETUP
#line 169 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("acos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 171 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("asin"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("atan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 176 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("animelem"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("abs"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("animelemtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("animelemno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 185 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("animexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("cos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ceil"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 195 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("const240p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 197 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("const480p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 199 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("const720p"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 202 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("const"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_CONST" <<endl; 
	return token::FUNC_CONST;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 206 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("exp"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 211 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("floor"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 213 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_FVAR" <<endl; 
	return token::FUNC_FVAR;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 217 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("gethitvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_GETHITVAR" <<endl; 
	return token::FUNC_GETHITVAR;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 222 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ifelse"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IFELSE" <<endl; 
	return token::FUNC_IFELSE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 224 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ishelper"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 228 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ln"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 230 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("log"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_LOG" <<endl; 
	return token::FUNC_LOG;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 236 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numprojid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 238 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numtarget"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER; }                             
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 240 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numexplod");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER; }                              
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 242 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numhelper");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER; }                              
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 246 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("projguardedtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 249 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJHIT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJHIT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 251 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJHIT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJHIT;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 254 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJGUARDED: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJGUARDED;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 256 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJGUARDED: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJGUARDED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 258 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("projhittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 260 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = toFloatX(); /* sscanf(yytext,"%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJCONTACT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJCONTACT;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 262 "..\\comcompiler\\comscanner.l"
{ yylval->doubleVal = 0; /* sscanf(yytext,"F%d",&yylval->doubleVal); */SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_PROJCONTACT: " << yylval->doubleVal  <<endl; 
	return token::FUNC_PROJCONTACT;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 264 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("projcontacttime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 266 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("projcanceltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 268 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("playeridexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 272 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("selfanimexist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sysfvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 276 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sin"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 279 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sysvar"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_SYSVAR" <<endl; 
	return token::FUNC_SYSVAR;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 285 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("tan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 288 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("timemod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 291 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("teammode"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::FUNC_IDENTIFIER;}   
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 294 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("var"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_VAR" <<endl; 
	return token::FUNC_VAR;}
	YY_BREAK
/* =============  ESPECIAL COMMANDS ========================= */
case 91:
YY_RULE_SETUP
#line 299 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("command.buffer.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_COMMAND" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("command.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_COMMAND" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 305 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("command"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_COMMAND" <<endl; 
	return token::KEY_COMMAND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 308 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("statetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATETYPE" <<endl; 
	return token::KEY_STATETYPE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 311 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("physics");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_PHYSICS" <<endl; 
	return token::KEY_PHYSICS; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 317 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("state"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: CMD_STATE" <<endl; 
	return token::CMD_STATE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 319 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("statedef");	SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: CMD_STATEDEF" <<endl; 
		  return token::CMD_STATEDEF;}			  
	YY_BREAK
/* =============  KEY_IDENTIFIER ========================= */
case 98:
YY_RULE_SETUP
#line 324 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("accel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 327 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 329 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 331 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("anim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_ANIM" <<endl; 
	return token::KEY_ANIM;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 333 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("attack"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 337 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("affectteam"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 341 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 343 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 346 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 349 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 352 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 355 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 358 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 361 "..\\comcompiler\\comscanner.l"
{  yylval->stringVal = new string("air.gethit.airrecover.up");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 364 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.down"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 366 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 368 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover.ground.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 370 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.groundrecover.groundlevel");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 372 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 374 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.airrecover.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 376 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.gethit.trip.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 379 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump.num"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 381 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 384 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 387 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 390 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 393 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 396 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airjuggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 398 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 401 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("alive");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 404 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("animtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 406 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("attack.dist");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 409 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("attr"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 412 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("authorname"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 415 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("backedgebodydist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 417 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("backedgedist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                         
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 420 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("bindtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 423 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("buffer.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 426 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("buffer"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 432 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("color");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 435 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("ctrl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 437 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("crouch.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 439 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("crouch.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 442 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("crouch"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 445 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("canrecover");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                                             
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 449 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("defence"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 452 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.bounce.offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 454 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.bounce.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 456 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.bounce.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 458 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 460 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("drawgame");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; } 
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 463 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("draw.offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 466 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("draw"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; } 
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 469 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("facing");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 471 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.defence_up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 473 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.defence_mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 476 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.xvelocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 479 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.yvelocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 481 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 483 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("forcestand"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 485 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("forcenofall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 487 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("facep2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 489 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("floatpersistindex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}	
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 491 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("frontedgebodydist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 493 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("frontedgedist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                     
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 495 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fvalue"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 498 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 503 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("gametime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }    
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 505 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("ground.back");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 507 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 510 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 513 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 516 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guardflag"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 519 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.pausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 522 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guardsound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 525 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 528 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 531 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 534 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 537 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 540 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("getpower "); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 543 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("givepower"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 547 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 550 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 553 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 556 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 558 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 561 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 565 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 568 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("head.pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 572 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("head"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 574 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitonce"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 577 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitcountpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 580 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitdefpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 583 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 585 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitfall");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 587 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitflag");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 589 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 591 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitpausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 593 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitshakeover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 595 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitsound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 597 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                          
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 600 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("id"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 603 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("inguarddist");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 606 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("intpersistindex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 609 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ignorehitpause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 612 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("interval"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 615 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ishometeam");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                           
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 619 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("juggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 622 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("jump.changeanim.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 625 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("jump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 627 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("jump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 629 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("jump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 631 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("jump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 634 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 637 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("KO.echo"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 640 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ko"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 644 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("liedown.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 646 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("liedown"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 648 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("lifemax");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 650 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("life"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                   
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 652 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("loseko");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 654 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("losetime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 656 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("lose");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 661 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("matchno");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 663 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("matchover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                              
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 665 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("maxdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 667 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("mindist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 669 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("mid.pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 671 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("mid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 673 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movehitpersist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 675 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("moveguarded");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                            
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 677 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movehit");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 679 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movereversed");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                           
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 681 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movecontact"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 683 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 686 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 691 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 693 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("nochainID"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 695 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("numenemy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 697 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numhits"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 699 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("numpartner"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 701 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("numproj");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                               
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 704 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("pausetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 707 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("persistent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 710 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("postype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 712 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("pos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 715 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("priority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 718 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("proj"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 721 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("proj.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 723 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("proj.doscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 725 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1id"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                  
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 727 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 729 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2bodydist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 732 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 734 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2life"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 736 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 738 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                             
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 740 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p3name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                            
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 742 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p4name"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 744 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 747 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 750 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 753 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1getp2facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 756 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2facing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 759 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p1stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 762 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2getp1state"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 764 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("palno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 766 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("pi"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                     
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 768 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("prevstateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                            
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 770 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("powermax"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                               
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 773 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("power"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 776 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("p2statetype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 778 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("p2bodytype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 780 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2movetype");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 785 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("random");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 788 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("removetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                 
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 791 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("run.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 794 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("run.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 797 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("run"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 800 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("runjump"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 802 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("roundno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                                
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 804 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("roundsexisted"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                         
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 806 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("roundstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 809 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("rootdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER; }                             
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 812 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("runjump.neu"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 814 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("runjump.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 816 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("runjump.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 821 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("screenpos"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 824 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("shadowoffset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 827 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sinadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 829 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("snap"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 831 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 833 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("stateno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 836 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("spacing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 839 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sparkxy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 842 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("statetime");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 844 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("stand.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 846 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("stand.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER;}" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 849 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("stand"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 852 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 854 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger1"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 856 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 858 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger3"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 860 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger4"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 862 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger5"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 864 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger6"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 866 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger7"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 868 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger8"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 870 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trigger9"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGER: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGER;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 873 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("triggerall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_TRIGGERALL: " << *yylval->stringVal <<endl; 
	return token::KEY_TRIGGERALL;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 876 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal<<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 878 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("teamside"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                              
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 880 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("tickspersecond"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                        
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 882 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("timemode"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}                              
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 886 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("uniqhitcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER: " << *yylval->stringVal <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 889 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("under"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 896 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("value2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 899 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("value"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 901 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("volume"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 905 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("walk.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 908 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("walk.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 911 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("walk"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 913 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("waveform"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 915 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("win"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                    
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 917 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("winko"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                 
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 920 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("wintime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                    
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 922 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("winperfect"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}                                 
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 926 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("xscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 930 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 932 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("yscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_IDENTIFIER" <<endl; 
	return token::KEY_IDENTIFIER;} 
	YY_BREAK
/* =============  KEYWORD ========================= */
case 329:
YY_RULE_SETUP
#line 938 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitvelx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }                               
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 940 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("hitvely"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }                               
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 945 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2distx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 947 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2disty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 950 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("p2bodydisty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 953 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("p2bodydistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 957 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("parentdisty"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 960 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("parentdistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 964 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("posx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 966 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("posy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 969 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("rootdistx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 971 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("rootdisty");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 976 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("screenposx");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 979 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("screenposy");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 984 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 986 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("vely"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 988 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("vel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEYWORD" <<endl; 
	return token::KEYWORD;}			  
	YY_BREAK
/* =============  CONSTPARAM ========================= */
case 346:
YY_RULE_SETUP
#line 995 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("data.life");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 997 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.power"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 999 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.attack"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1001 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.defence"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;} 
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1003 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.fall.defence_up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1005 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.fall.defence_mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1007 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.liedown.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1009 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.airjuggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 1011 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1013 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.guard.sparkno"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1015 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.KO.echo"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 1017 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.IntPersistIndex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 1019 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.FloatPersistIndex"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 1021 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("data.volume"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 1027 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.xscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1029 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.yscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 1031 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.ground.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 1033 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.ground.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1035 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.air.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 1037 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.air.front"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 1039 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 1041 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 1043 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.proj.attack.dist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 1045 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.proj.doscale"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 1047 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.head.pos.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 1049 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.head.pos.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 1051 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.mid.pos.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 1053 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.mid.pos.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 1055 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.shadowoffset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 1057 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.draw.offset.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 1059 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("size.draw.offset.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 1063 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.walk.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 1065 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.walk.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 1067 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.run.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 1069 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.run.fwd.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 1071 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.run.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 1073 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.run.back.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 1075 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.jump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 1077 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.runjump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 1079 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.jump.neu.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 1081 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.jump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 1083 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.jump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 1085 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.runjump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 1087 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.runjump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 1089 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.airjump.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 1091 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.airjump.neu.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 1093 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.airjump.back.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 1095 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.airjump.fwd.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 1097 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.groundrecover.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 1099 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.groundrecover.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 1101 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.mul.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 1103 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.mul.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 1105 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.add.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 1107 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.add.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 1109 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.back"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 1111 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.fwd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 1113 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.up"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 1115 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velocity.air.gethit.airrecover.down"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 1118 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.airjump.num"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 1120 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.airjump.height"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 1122 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 1124 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.stand.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 1126 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.crouch.friction"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 1128 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.stand.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 1130 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.crouch.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 1132 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.jump.changeanim.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 1134 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 1136 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundrecover.ground.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 1138 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.groundrecover.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 1140 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.airrecover.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 1142 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.airrecover.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 1144 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.air.gethit.trip.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 1146 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.offset.x"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 1148 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.offset.y"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 1150 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.yaccel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 1152 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.down.bounce.groundlevel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 1154 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movement.down.friction.threshold"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CONST_PARAM" <<endl; 
	return token::CONST_PARAM;}
	YY_BREAK
/* =============  HITDEFATTR AND PARAMS ========================= */
case 423:
YY_RULE_SETUP
#line 1158 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitdefattr"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_HITDEF: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_HITDEF;}
	YY_BREAK
/* =============  GETHITVAR PARAM ========================= */
case 424:
YY_RULE_SETUP
#line 1165 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 1167 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 1169 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 1171 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("chainid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 1173 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("damage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 1175 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fallcount"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 1177 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.damage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 1179 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.xvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 1181 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.yvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 1183 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.recover"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 1185 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.recovertime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 1187 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 1189 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.kill"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 1191 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.envshake.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 1193 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.envshake.freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 1195 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.envshake.ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 1197 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.envshake.phase"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 1199 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("groundtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 1201 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guarded"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 1203 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitshaketime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "GETHIT_PARAM" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 1205 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitid"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 1207 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 1209 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("isbound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 1211 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("recovertime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 1213 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("slidetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 1215 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("xoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 1217 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("zoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 1219 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("xvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 1221 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("xveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 1223 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("yoff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 1225 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("yvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 1227 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("yveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "(KEY_IDENTIFIER do tipo GETHIT_PARAM)" <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/* =============  STATE CONTROLLERS ========================= */
case 456:
YY_RULE_SETUP
#line 1234 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("afterimage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 1237 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("afterimagetime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 1242 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("allpalfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 1245 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("angleadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 1248 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("angledraw"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 1251 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("anglemul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 1254 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("angleset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 1257 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("appendtoclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 1260 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("assertspecial"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 1263 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("attackdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 1266 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("attackmulset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 1269 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("bgpalfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 1272 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("bindtoparent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 1275 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("bindtoroot"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 1278 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("bindtotarget"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 1281 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("changeanim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 1284 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("changeanim2"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 1287 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("changestate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 1290 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("clearclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 1293 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ctrlset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 1296 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("defencemulset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 1299 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("destroyself"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 1302 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("displaytoclipboard"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 1305 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envcolor"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 1308 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envshake"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 1311 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("explod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 1314 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("explodbindtime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 1317 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("forcefeedback"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 1320 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fallenvshake"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 1323 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("gamemakeanim"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 1326 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("gravity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 1329 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("helper"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl;  
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 1332 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 1335 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitby"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 1338 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitdef"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 1341 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitfalldamage"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 1344 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitfallset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 1347 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitfallvel"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 1350 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitoverride"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 1353 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("hitvelset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 1356 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("lifeadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 1359 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("lifeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 1362 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("makedust"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 1365 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("modifyexplod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 1368 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("movehitreset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 1371 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("nothitby"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 1374 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("null"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 1377 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("offset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 1380 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("palfx"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 1382 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("parentdist"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 1385 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("parentvaradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 1388 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("parentvarset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 1391 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("pause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 1394 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("playerpush"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 1397 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("playsnd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 1400 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("posadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 1403 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("posfreeze"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 1406 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("posset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 1409 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("poweradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 1412 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("powerset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 1415 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("projectile"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 1418 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("removeexplod"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 1421 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("reversaldef"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 1424 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("screenbound"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 1427 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("selfstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 1430 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sprpriority"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: " <<  yylval->stringVal->c_str() <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 1433 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("statetypeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 1436 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("sndpan"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 1439 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("stopsnd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 1442 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("superpause"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 1445 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetbind"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 1448 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetdrop"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 1451 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetfacing"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 1454 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetlifeadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 1457 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetpoweradd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 1460 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetstate"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 1463 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetveladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 1466 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("targetvelset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 1469 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("trans"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 1472 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("turn"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 1475 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("varadd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 1478 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("varrandom");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 1481 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("varrangeset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 1484 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("varset"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 1487 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("veladd"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 1490 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velmul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 1493 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("velset");  SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: " <<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER; }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 1495 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("width"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 1498 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("zoom"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 1501 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("unknown"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER;}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 1503 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("debug"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: KEY_STATE_CONTROLER: "<<  yylval->stringVal->c_str()  <<endl; return token::KEY_IDENTIFIER;}
	YY_BREAK
/* =============  STATE CONTROLLERS ========================= */
case 547:
YY_RULE_SETUP
#line 1509 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("enemynear"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "FUNC_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER;}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 1512 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("helper"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER;}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 1515 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("target"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER;}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 1520 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("enemy"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER; }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 1523 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("partner"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 1526 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("playerid");SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER; }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 1529 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("root"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 1532 "..\\comcompiler\\comscanner.l"
{yylval->stringVal = new string("parent"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "HELPER_IDENTIFIER" <<endl; 
	return token::HELPER_IDENTIFIER; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 1537 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string(yytext, yyleng); 
SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer IDENTIFIER= "<<  yylval->stringVal->c_str() <<endl;
return token::IDENTIFIER; }
	YY_BREAK
/*  HIT DEF PARAMETERS ==================  */
/*    yaccel ok  */
/*     hitflag ok  */
/*	  affectteam  ok  */
/*    animtype ok gethitparam  */
case 556:
YY_RULE_SETUP
#line 1554 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 1557 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("fall.animtype"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    damage ok gethitparam  */
/*    sparkno ok   */
/*    guard.sparkno ok   */
case 558:
YY_RULE_SETUP
#line 1567 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.type"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 1569 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 1572 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 1575 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airguard.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 1578 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("ground.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 1581 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 1584 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 1587 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("guard.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 1590 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airguard.cornerpush.veloff"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 1593 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("airguard.ctrltime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 1596 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.juggle"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    p2stateno ok     */
/*    fall ok    */
/*    fall.recover ok gethitparam             */
/*    fall.recovertime ok gethitparam         */
/*    fall.damage ok gethitparam              */
case 569:
YY_RULE_SETUP
#line 1604 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("air.fall"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 1606 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.velocity"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 1609 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.hittime"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 1612 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("down.bounce"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    id ok    */
/*    chainID  ok gethitparam          */
/*    fall.kill OK   */
case 573:
YY_RULE_SETUP
#line 1619 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("palfx.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 1622 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("palfx.mul"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 1625 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("palfx.add"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 1628 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envshake.time"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 1631 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envshake.freq"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 1634 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envshake.ampl"); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 1637 "..\\comcompiler\\comscanner.l"
{ yylval->stringVal = new string("envshake.phase "); SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< " ( HitDef controller identifier) KEY_IDENTIFIER: "<<  yylval->stringVal->c_str()  <<endl; 
	return token::KEY_IDENTIFIER;}
	YY_BREAK
/*    fall.envshake.time OK   */
/*    fall.envshake.freq OK   */
/*    fall.envshake.ampl OK   */
/*    fall.envshake.phase OK   */
/*  TRIGGERS   
	
	AILevel
Abs - done - FUNC_IDENTIFIER
Acos - done - FUNC_IDENTIFIER
Alive - done - KEY_IDENTIFIER
Anim - done - KEY_ANIM
AnimElem - done -  FUNC_IDENTIFIER
AnimElemNo - done - FUNC_IDENTIFIER
AnimElemTime - done - FUNC_IDENTIFIER
AnimExist - done - FUNC_IDENTIFIER
AnimTime - done - KEY_IDENTIFIER
Asin - done - FUNC_IDENTIFIER
Atan - done - FUNC_IDENTIFIER
AuthorName - done - KEY_IDENTIFIER

B
-----------------------
BackEdgeBodyDist - done - KEY_IDENTIFIER
BackEdgeDist - done - KEY_IDENTIFIER

C
-----------------------
CanRecover - done  - KEY_IDENTIFIER
Ceil - done - FUNC_IDENTIFIER
Command - done - KEY_COMMAND
Const - done - FUNC_CONST
Const240p - FUNC_IDENTIFIER
Const480p - FUNC_IDENTIFIER
Const720p - FUNC_IDENTIFIER
Cos - done - FUNC_IDENTIFIER
Ctrl - done - KEY_IDENTIFIER

D
-----------------------
DrawGame - KEY_IDENTIFIER

E
-----------------------
E - NOT DEFINED - WILL COMPILE LIKE IDENTIFIER
Exp - done - FUNC_IDENTIFIER

F
-----------------------
FVar - done - FUNC_FVAR
Facing - done - KEY_IDENTIFIER
Floor - done - FUNC_IDENTIFIER
FrontEdgeBodyDist - done - KEY_IDENTIFIER
FrontEdgeDist - done - KEY_IDENTIFIER

G
-----------------------
GameTime - done - KEY_IDENTIFIER
GetHitVar - DONE - FUNC_GETHITVAR

H
-----------------------
HitCount - done - KEY_IDENTIFIER
HitDefAttr - DONE - KEY_HITDEF
HitFall - done - KEY_IDENTIFIER
HitOver - done - KEY_IDENTIFIER
HitPauseTime - done - KEY_IDENTIFIER
HitShakeOver - done - KEY_IDENTIFIER
HitVel - done - KEY_IDENTIFIER

I
-----------------------
ID - done - KEY_IDENTIFIER
IfElse - done - FUNC_IFELSE
InGuardDist - done - KEY_IDENTIFIER
IsHelper - done - FUNC_IDENTIFIER
IsHomeTeam - DONE - KEY_IDENTIFIER

L
-----------------------
Life - done - KEY_IDENTIFIER
LifeMax - done - KEY_IDENTIFIER
Ln - done - FUNC_IDENTIFIER
Log - done - FUNC_LOG
Lose DONE -  - KEY_IDENTIFIER

M
-----------------------
MatchNo - done - KEY_IDENTIFIER
MatchOver - done - KEY_IDENTIFIER
MoveContact - DONE - KEY_IDENTIFIER
MoveGuarded - done - KEY_IDENTIFIER
MoveHit - DONE - KEY_IDENTIFIER
MoveReversed - DONE - KEY_IDENTIFIER
MoveType - done - KEY_IDENTIFIER

N
-----------------------
Name - done - KEY_IDENTIFIER
NumEnemy - DONE - KEY_IDENTIFIER
NumExplod - done - FUNC_IDENTIFIER
NumHelper - DONE - FUNC_IDENTIFIER
NumPartner - DONE - KEY_IDENTIFIER
NumProj - DONE - KEY_IDENTIFIER
NumProjID - DONE - FUNC_IDENTIFIER
NumTarget - DONE - FUNC_IDENTIFIER

P
-----------------------
P1Name - done - KEY_IDENTIFIER
P2BodyDist - done - KEY_IDENTIFIER
P2Dist - done - KEY_IDENTIFIER
P2Life - done - KEY_IDENTIFIER
P2MoveType - done - KEY_IDENTIFIER
P2Name - done - KEY_IDENTIFIER
P2StateNo - done - KEY_IDENTIFIER
P2StateType - done - KEY_IDENTIFIER
P3Name - done - KEY_IDENTIFIER
P4Name - done - KEY_IDENTIFIER
PalNo - done - KEY_IDENTIFIER
ParentDist - done - KEY_IDENTIFIER
Pi - done - KEY_IDENTIFIER
PlayerIDExist - done - FUNC_IDENTIFIER
Pos - done - KEY_IDENTIFIER
Power - done - KEY_IDENTIFIER
PowerMax - done - KEY_IDENTIFIER
PrevStateNo - done - KEY_IDENTIFIER
ProjCancelTime - DONE - FUNC_IDENTIFIER
ProjContact - DONE - FUNC_PROJCONTACT
ProjContactTime - DONE - FUNC_IDENTIFIER
ProjGuarded - DONE - FUNC_IDENTIFIER
ProjGuardedTime - DONE - FUNC_IDENTIFIER
ProjHit - DONE -FUNC_IDENTIFIER
ProjHitTime - DONE - FUNC_IDENTIFIER

R
-----------------------
Random - done - KEY_IDENTIFIER
RootDist - done - KEY_IDENTIFIER
RoundNo - done - KEY_IDENTIFIER
RoundState - done - KEY_IDENTIFIER
RoundsExisted - done - KEY_IDENTIFIER

S
-----------------------
ScreenPos - done - KEY_IDENTIFIER
SelfAnimExist - done - FUNC_IDENTIFIER
Sin - done - FUNC_IDENTIFIER
StateNo - DONE - KEY_IDENTIFIER
StateType - done - KEY_STATETYPE
SysFVar - donE - FUNC_IDENTIFIER
SysVar - done - FUNC_SYSVAR

T
-----------------------
Tan - done - FUNC_IDENTIFIER
TeamMode - DONE - FUNC_IDENTIFIER
TeamSide - DONE - KEY_IDENTIFIER
TicksPerSecond - DONE - KEY_IDENTIFIER
Time - DONE - KEY_IDENTIFIER
TimeMod - DONE - FUNC_IDENTIFIER

U
-----------------------
UniqHitCount - DONE - KEY_IDENTIFIER

V
-----------------------
Var - done - FUNC_VAR
Vel - done - KEYWORD

W
-----------------------
Win - DONE - KEY_IDENTIFIER


Keywords

"vel" - DONE - KEYWORD
"velx" - DONE - KEYWORD
"vely" - DONE - KEYWORD
"hitvelx" - DONE - KEYWORD
"hitvely" - DONE - KEYWORD
"screenposy" - DONE - KEYWORD
"screenposx" - DONE - KEYWORD
"posy" - DONE - KEYWORD
"posx" - DONE - KEYWORD
"p2bodydistx" - DONE - KEYWORD
"p2bodydisty" - DONE - KEYWORD
"parentdistx" - DONE - KEYWORD
"parentdisty" - DONE - KEYWORD
"p2distx" - DONE - KEYWORD
"p2disty" - DONE - KEYWORD
"rootdistx" - DONE - KEYWORD
"rootdisty" - DONE - KEYWORD
	*/
/* gobble up white-spaces */
case 580:
YY_RULE_SETUP
#line 1839 "..\\comcompiler\\comscanner.l"
{
    //SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer blank= "<< *yytext <<endl;
    yylloc->step();
}
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 1844 "..\\comcompiler\\comscanner.l"
{//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "COMMENT" <<endl; 
	return token::COMMENT; }        
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 1847 "..\\comcompiler\\comscanner.l"
{ yylloc->lines(yyleng); yylloc->step();
				SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer EOL= "<< "EOL" <<endl;
				return token::EOL;
				}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 1854 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_NOTEQ" <<endl; 
	return token::CMD_NOTEQ; }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 1856 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_GREATERTHANEQ" <<endl; 
	return token::CMD_GREATERTHANEQ; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 1858 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LESSTHANEQ" <<endl; 
	return token::CMD_LESSTHANEQ; }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 1860 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGAND" <<endl; 
	return token::CMD_LOGAND; }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 1862 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGOR" <<endl; 
	return token::CMD_LOGOR; }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 1864 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_SQUARE" <<endl; 
	return token::CMD_SQUARE; }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 1866 "..\\comcompiler\\comscanner.l"
{ SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Token: "<< "CMD_LOGXOR" <<endl; 
	return token::CMD_LOGXOR; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 1870 "..\\comcompiler\\comscanner.l"
{ ; }
	YY_BREAK
/* discard all other characters */
case 591:
YY_RULE_SETUP
#line 1874 "..\\comcompiler\\comscanner.l"
{
    yylloc->step();
    SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer Unknow caracter= "<< *yytext <<endl;
  
}			  
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 1879 "..\\comcompiler\\comscanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 8979 "lex.Cmd.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4521 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4521 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4520);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1879 "..\\comcompiler\\comscanner.l"

	/*** END EXAMPLE - Change the example lexer rules above ***/
	/*** Additional Code bellow ***/
namespace CmdCompiler {

CScanner::CScanner(std::istream* in,
		 std::ostream* out)
    : CmdFlexLexer(in, out)
{
}

CScanner::~CScanner()
{
}

void CScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

float CScanner::toFloat() {
char *tempNumber=new char[yyleng+1];
for (int i = 0; i < yyleng ; i++)
{
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<i<<"] = " << yytext[i] << endl;
tempNumber[i]=yytext[i];

}
tempNumber[yyleng]='\0';
float rez = 0, fact =1;
if (*tempNumber == '-') {
tempNumber++;
fact = -1;
}
int point_seen =0;
for (int j =0; j < yyleng; j++) {
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<j<<"] = " << tempNumber[j] << endl;
	if (tempNumber[j] == '.'){
	point_seen =1;
	}else{
	int d = tempNumber[j] - '0';
	if (d >=0 && d <=9) {
		if (point_seen) fact /= 10.0f;
		rez = rez * 10.0f + (float)d;
		//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer rez = " << rez << endl;

		}
	}
}
//delete tempNumber;
return rez * fact;
}

float CScanner::toFloatX() {
char *tempNumber=new char[yyleng+2];
for (int i = 0; i < yyleng ; i++)
{
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<i<<"] = " << yytext[i] << endl;
tempNumber[i]=yytext[i];

}
tempNumber[yyleng]='\0';
float rez = 0, fact =1;
if (*tempNumber == '-') {
tempNumber++;
fact = -1;
}
int point_seen =0;
for (int j =0; j < yyleng; j++) {
//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer number[" <<j<<"] = " << tempNumber[j] << endl;
	if (tempNumber[j] == '.'){
	point_seen =1;
	}else{
	int d = tempNumber[j] - '0';
	if (d >=0 && d <=9) {
		if (point_seen) fact /= 10.0f;
		rez = rez * 10.0f + (float)d;
		//SGF::Debug::debug(SGF::Debug::compilers,__FUNCTION__) <<"Lexer rez = " << rez << endl;

		}
	}
}
//delete tempNumber;
return rez * fact;
}

void CScanner::destroyComment()
{
char c;

   c= yyinput();
   while (c != '\n' && c != 0)
   {	
	c=yyinput();

   }
   
 
}


}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
/*
int CmdFlexLexer::yylex()
{
    std::cerr << "in CmdFlexLexer::yylex() !" << endl;
    return 0;
}  
*/
/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */
/*
int CmdFlexLexer::Cmdwrap()
{
    return 1;
}
*/